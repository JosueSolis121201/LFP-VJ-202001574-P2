
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftoperador_ORleftoperador_ANDleftoperador_igualacionoperador_diferenciacionleftoperador_menoroperador_menor_igualoperador_mayoroperador_mayor_igualleftoperador_sumaoperador_restaleftoperador_multiplicacionoperador_restorightoperador_NOTcoma comentario_multilinea comentario_unilinea corchete_abre corchete_cierra dato_boolean_false dato_boolean_true dato_char dato_double dato_string dos_puntos id llave_abre llave_cierra numero operador_AND operador_NOT operador_OR operador_diferenciacion operador_divicion operador_igual operador_igualacion operador_mayor operador_mayor_igual operador_menor operador_menor_igual operador_multiplicacion operador_resta operador_resto operador_suma parentesis_abre parentesis_cierra punto punto_coma reservada_break reservada_continue reservada_do reservada_else reservada_fin reservada_if reservada_inicio reservada_return reservada_void reservada_while tipo_boolean tipo_char tipo_double tipo_int tipo_string\n      S0 : INITIAL\n    \n    INITIAL : INITIAL ESTRUCTURA\n    \n    INITIAL : ESTRUCTURA\n    \n    ESTRUCTURA : PRODIF_ELSE\n               | PRODIF\n               | PRODDO_WHILE\n               | PRODWHILE\n               | PRODVOID\n               | PRODFUNCION\n               | DECLARACION\n                 \n    \n    PRODDO_WHILE : reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma\n    \n    PRODWHILE : reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO \n    \n    PRODIF_ELSE : reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO\n    \n    PRODIF : reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO\n    \n    PRODVOID : reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO\n    \n    PRODFUNCION : TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO\n    \n    OPERACIONES : OPERACIONES OPERACION\n                | OPERACION\n    \n    OPERACION : OPERACION operador_suma OPERACION\n            |   OPERACION operador_resta OPERACION\n            |   OPERACION operador_multiplicacion OPERACION\n            |   OPERACION operador_divicion OPERACION\n            |   OPERACION operador_resto OPERACION\n            |   OPERACION operador_igualacion OPERACION\n            |   OPERACION operador_diferenciacion OPERACION\n            |   OPERACION operador_mayor OPERACION\n            |   OPERACION operador_mayor_igual OPERACION\n            |   OPERACION operador_menor OPERACION\n            |   OPERACION operador_menor_igual OPERACION\n            |   OPERACION operador_AND OPERACION\n            |   OPERACION operador_OR OPERACION\n            |   OPERACION operador_NOT OPERACION\n            |   OPERACION operador_igual OPERACION\n            |   numero\n    \n    INSTRUCCIONES : DECLARACION\n                  | ASINGACION\n                  | PRODIF_ELSE\n                  | PRODIF\n                  | PRODDO_WHILE\n                  | PRODWHILE\n                  | PRODVOID\n                  | RETURN\n                  | BREAK\n                  | CONTINUE\n                  | LLAMADA\n                  \n    \n    DECLARACION : TIPO_DATO id operador_igual DATO punto_coma\n    \n    ASINGACION : id operador_igual DATO punto_coma\n    \n  TIPO_DATO : tipo_int \n            | tipo_double\n            | tipo_string\n            | tipo_char\n            | tipo_boolean\n  \n  \n  DATO : numero \n          | dato_double\n          | dato_string\n          | dato_char\n          | dato_boolean_true\n          | dato_boolean_false\n  \n    PARAMETRO : TIPO_DATO id\n    \n    PARAMETROS :  PARAMETROS coma PARAMETRO \n               | PARAMETRO\n               | \n    \n    LLAMADA : id parentesis_abre ARGUMENTOS parentesis_cierra\n    \n    ARGUMENTOS :  ARGUMENTOS coma ARGUMENTO \n               | ARGUMENTO\n               | \n     \n    ARGUMENTO :  DATO\n    \n    RETURN : reservada_return punto_coma \n           | reservada_return DATO punto_coma \n    \n    BREAK : reservada_break punto_coma \n    \n    CONTINUE : reservada_continue punto_coma \n    \n    OPERACION_FACTORIZADO : parentesis_abre OPERACIONES parentesis_cierra\n    \n    INSTRUCCIONES_FACTORIZADO : llave_abre INSTRUCCIONES llave_cierra\n    \n    PARAMETROS_FACTORIZADO : parentesis_abre PARAMETROS parentesis_cierra\n    '
    
_lr_action_items = {'reservada_if':([0,2,3,4,5,6,7,8,9,10,21,25,29,51,75,89,93,95,111,120,],[11,11,-3,-4,-5,-6,-7,-8,-9,-10,-2,11,-14,-12,-73,-15,-16,-13,-11,-46,]),'reservada_do':([0,2,3,4,5,6,7,8,9,10,21,25,29,51,75,89,93,95,111,120,],[12,12,-3,-4,-5,-6,-7,-8,-9,-10,-2,12,-14,-12,-73,-15,-16,-13,-11,-46,]),'reservada_while':([0,2,3,4,5,6,7,8,9,10,21,24,25,29,51,75,89,93,95,111,120,],[13,13,-3,-4,-5,-6,-7,-8,-9,-10,-2,33,13,-14,-12,-73,-15,-16,-13,-11,-46,]),'reservada_void':([0,2,3,4,5,6,7,8,9,10,21,25,29,51,75,89,93,95,111,120,],[14,14,-3,-4,-5,-6,-7,-8,-9,-10,-2,14,-14,-12,-73,-15,-16,-13,-11,-46,]),'tipo_int':([0,2,3,4,5,6,7,8,9,10,21,25,29,51,53,75,89,93,95,111,118,120,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-2,16,-14,-12,16,-73,-15,-16,-13,-11,16,-46,]),'tipo_double':([0,2,3,4,5,6,7,8,9,10,21,25,29,51,53,75,89,93,95,111,118,120,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-2,17,-14,-12,17,-73,-15,-16,-13,-11,17,-46,]),'tipo_string':([0,2,3,4,5,6,7,8,9,10,21,25,29,51,53,75,89,93,95,111,118,120,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-2,18,-14,-12,18,-73,-15,-16,-13,-11,18,-46,]),'tipo_char':([0,2,3,4,5,6,7,8,9,10,21,25,29,51,53,75,89,93,95,111,118,120,],[19,19,-3,-4,-5,-6,-7,-8,-9,-10,-2,19,-14,-12,19,-73,-15,-16,-13,-11,19,-46,]),'tipo_boolean':([0,2,3,4,5,6,7,8,9,10,21,25,29,51,53,75,89,93,95,111,118,120,],[20,20,-3,-4,-5,-6,-7,-8,-9,-10,-2,20,-14,-12,20,-73,-15,-16,-13,-11,20,-46,]),'$end':([1,2,3,4,5,6,7,8,9,10,21,29,51,75,89,93,95,111,120,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-2,-14,-12,-73,-15,-16,-13,-11,-46,]),'parentesis_abre':([11,13,27,28,33,47,],[23,23,53,53,23,78,]),'llave_abre':([12,22,26,52,54,56,57,117,],[25,25,25,25,25,25,-72,-74,]),'id':([14,15,16,17,18,19,20,25,46,92,],[27,28,-48,-49,-50,-51,-52,47,76,119,]),'numero':([23,30,31,32,48,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,78,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,123,],[32,32,-18,-34,81,81,-17,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,81,81,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,81,]),'reservada_return':([25,],[48,]),'reservada_break':([25,],[49,]),'reservada_continue':([25,],[50,]),'operador_igual':([28,31,32,47,58,76,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,],[55,73,-34,77,73,55,-19,-20,-21,73,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,73,]),'reservada_else':([29,75,],[56,-73,]),'llave_cierra':([29,34,35,36,37,38,39,40,41,42,43,44,45,51,75,79,87,88,89,95,111,116,120,121,122,],[-14,75,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-12,-73,-68,-70,-71,-15,-13,-11,-69,-46,-47,-63,]),'parentesis_cierra':([30,31,32,53,58,78,81,82,83,84,85,86,90,91,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,113,114,115,119,124,125,],[57,-18,-34,-62,-17,-66,-53,-54,-55,-56,-57,-58,117,-61,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,122,-65,-67,-59,-60,-64,]),'operador_suma':([31,32,58,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,],[59,-34,59,-19,-20,-21,59,-23,59,59,59,59,59,59,59,59,-32,59,]),'operador_resta':([31,32,58,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,],[60,-34,60,-19,-20,-21,60,-23,60,60,60,60,60,60,60,60,-32,60,]),'operador_multiplicacion':([31,32,58,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,],[61,-34,61,61,61,-21,61,-23,61,61,61,61,61,61,61,61,-32,61,]),'operador_divicion':([31,32,58,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,],[62,-34,62,-19,-20,-21,62,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,62,]),'operador_resto':([31,32,58,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,],[63,-34,63,63,63,-21,63,-23,63,63,63,63,63,63,63,63,-32,63,]),'operador_igualacion':([31,32,58,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,],[64,-34,64,-19,-20,-21,64,-23,-24,-25,-26,-27,-28,-29,64,64,-32,64,]),'operador_diferenciacion':([31,32,58,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,],[65,-34,65,-19,-20,-21,65,-23,-24,-25,-26,-27,-28,-29,65,65,-32,65,]),'operador_mayor':([31,32,58,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,],[66,-34,66,-19,-20,-21,66,-23,66,66,-26,-27,-28,-29,66,66,-32,66,]),'operador_mayor_igual':([31,32,58,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,],[67,-34,67,-19,-20,-21,67,-23,67,67,-26,-27,-28,-29,67,67,-32,67,]),'operador_menor':([31,32,58,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,],[68,-34,68,-19,-20,-21,68,-23,68,68,-26,-27,-28,-29,68,68,-32,68,]),'operador_menor_igual':([31,32,58,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,],[69,-34,69,-19,-20,-21,69,-23,69,69,-26,-27,-28,-29,69,69,-32,69,]),'operador_AND':([31,32,58,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,],[70,-34,70,-19,-20,-21,70,-23,-24,-25,-26,-27,-28,-29,-30,70,-32,70,]),'operador_OR':([31,32,58,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,],[71,-34,71,-19,-20,-21,71,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,71,]),'operador_NOT':([31,32,58,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,],[72,-34,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'punto_coma':([48,49,50,57,74,80,81,82,83,84,85,86,94,112,],[79,87,88,-72,111,116,-53,-54,-55,-56,-57,-58,120,121,]),'dato_double':([48,55,77,78,123,],[82,82,82,82,82,]),'dato_string':([48,55,77,78,123,],[83,83,83,83,83,]),'dato_char':([48,55,77,78,123,],[84,84,84,84,84,]),'dato_boolean_true':([48,55,77,78,123,],[85,85,85,85,85,]),'dato_boolean_false':([48,55,77,78,123,],[86,86,86,86,86,]),'coma':([53,78,81,82,83,84,85,86,90,91,113,114,115,119,124,125,],[-62,-66,-53,-54,-55,-56,-57,-58,118,-61,123,-65,-67,-59,-60,-64,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'S0':([0,],[1,]),'INITIAL':([0,],[2,]),'ESTRUCTURA':([0,2,],[3,21,]),'PRODIF_ELSE':([0,2,25,],[4,4,37,]),'PRODIF':([0,2,25,],[5,5,38,]),'PRODDO_WHILE':([0,2,25,],[6,6,39,]),'PRODWHILE':([0,2,25,],[7,7,40,]),'PRODVOID':([0,2,25,],[8,8,41,]),'PRODFUNCION':([0,2,],[9,9,]),'DECLARACION':([0,2,25,],[10,10,35,]),'TIPO_DATO':([0,2,25,53,118,],[15,15,46,92,92,]),'OPERACION_FACTORIZADO':([11,13,33,],[22,26,74,]),'INSTRUCCIONES_FACTORIZADO':([12,22,26,52,54,56,],[24,29,51,89,93,95,]),'OPERACIONES':([23,],[30,]),'OPERACION':([23,30,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[31,58,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,]),'INSTRUCCIONES':([25,],[34,]),'ASINGACION':([25,],[36,]),'RETURN':([25,],[42,]),'BREAK':([25,],[43,]),'CONTINUE':([25,],[44,]),'LLAMADA':([25,],[45,]),'PARAMETROS_FACTORIZADO':([27,28,],[52,54,]),'DATO':([48,55,77,78,123,],[80,94,112,115,115,]),'PARAMETROS':([53,],[90,]),'PARAMETRO':([53,118,],[91,124,]),'ARGUMENTOS':([78,],[113,]),'ARGUMENTO':([78,123,],[114,125,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> S0","S'",1,None,None,None),
  ('S0 -> INITIAL','S0',1,'p_S0','lexico.py',260),
  ('INITIAL -> INITIAL ESTRUCTURA','INITIAL',2,'p_INITIAL_RECURSIVO','lexico.py',265),
  ('INITIAL -> ESTRUCTURA','INITIAL',1,'p_INITIAL_INICIAL','lexico.py',271),
  ('ESTRUCTURA -> PRODIF_ELSE','ESTRUCTURA',1,'p_ESTRUCTURA','lexico.py',277),
  ('ESTRUCTURA -> PRODIF','ESTRUCTURA',1,'p_ESTRUCTURA','lexico.py',278),
  ('ESTRUCTURA -> PRODDO_WHILE','ESTRUCTURA',1,'p_ESTRUCTURA','lexico.py',279),
  ('ESTRUCTURA -> PRODWHILE','ESTRUCTURA',1,'p_ESTRUCTURA','lexico.py',280),
  ('ESTRUCTURA -> PRODVOID','ESTRUCTURA',1,'p_ESTRUCTURA','lexico.py',281),
  ('ESTRUCTURA -> PRODFUNCION','ESTRUCTURA',1,'p_ESTRUCTURA','lexico.py',282),
  ('ESTRUCTURA -> DECLARACION','ESTRUCTURA',1,'p_ESTRUCTURA','lexico.py',283),
  ('PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma','PRODDO_WHILE',5,'p_ESTRUCTURA_PRODDO_WHILE','lexico.py',292),
  ('PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO','PRODWHILE',3,'p_ESTRUCTURA_PRODWHILE','lexico.py',297),
  ('PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO','PRODIF_ELSE',5,'p_ESTRUCTURA_IF_ELSE','lexico.py',302),
  ('PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO','PRODIF',3,'p_ESTRUCTURA_IF','lexico.py',312),
  ('PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO','PRODVOID',4,'p_ESTRUCTURA_VOID','lexico.py',317),
  ('PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO','PRODFUNCION',4,'p_ESTRUCTURA_FUNCION','lexico.py',322),
  ('OPERACIONES -> OPERACIONES OPERACION','OPERACIONES',2,'p_OPERACIONES','lexico.py',328),
  ('OPERACIONES -> OPERACION','OPERACIONES',1,'p_OPERACIONES','lexico.py',329),
  ('OPERACION -> OPERACION operador_suma OPERACION','OPERACION',3,'p_OPERACION','lexico.py',334),
  ('OPERACION -> OPERACION operador_resta OPERACION','OPERACION',3,'p_OPERACION','lexico.py',335),
  ('OPERACION -> OPERACION operador_multiplicacion OPERACION','OPERACION',3,'p_OPERACION','lexico.py',336),
  ('OPERACION -> OPERACION operador_divicion OPERACION','OPERACION',3,'p_OPERACION','lexico.py',337),
  ('OPERACION -> OPERACION operador_resto OPERACION','OPERACION',3,'p_OPERACION','lexico.py',338),
  ('OPERACION -> OPERACION operador_igualacion OPERACION','OPERACION',3,'p_OPERACION','lexico.py',339),
  ('OPERACION -> OPERACION operador_diferenciacion OPERACION','OPERACION',3,'p_OPERACION','lexico.py',340),
  ('OPERACION -> OPERACION operador_mayor OPERACION','OPERACION',3,'p_OPERACION','lexico.py',341),
  ('OPERACION -> OPERACION operador_mayor_igual OPERACION','OPERACION',3,'p_OPERACION','lexico.py',342),
  ('OPERACION -> OPERACION operador_menor OPERACION','OPERACION',3,'p_OPERACION','lexico.py',343),
  ('OPERACION -> OPERACION operador_menor_igual OPERACION','OPERACION',3,'p_OPERACION','lexico.py',344),
  ('OPERACION -> OPERACION operador_AND OPERACION','OPERACION',3,'p_OPERACION','lexico.py',345),
  ('OPERACION -> OPERACION operador_OR OPERACION','OPERACION',3,'p_OPERACION','lexico.py',346),
  ('OPERACION -> OPERACION operador_NOT OPERACION','OPERACION',3,'p_OPERACION','lexico.py',347),
  ('OPERACION -> OPERACION operador_igual OPERACION','OPERACION',3,'p_OPERACION','lexico.py',348),
  ('OPERACION -> numero','OPERACION',1,'p_OPERACION','lexico.py',349),
  ('INSTRUCCIONES -> DECLARACION','INSTRUCCIONES',1,'p_INSTRUCCIONES','lexico.py',359),
  ('INSTRUCCIONES -> ASINGACION','INSTRUCCIONES',1,'p_INSTRUCCIONES','lexico.py',360),
  ('INSTRUCCIONES -> PRODIF_ELSE','INSTRUCCIONES',1,'p_INSTRUCCIONES','lexico.py',361),
  ('INSTRUCCIONES -> PRODIF','INSTRUCCIONES',1,'p_INSTRUCCIONES','lexico.py',362),
  ('INSTRUCCIONES -> PRODDO_WHILE','INSTRUCCIONES',1,'p_INSTRUCCIONES','lexico.py',363),
  ('INSTRUCCIONES -> PRODWHILE','INSTRUCCIONES',1,'p_INSTRUCCIONES','lexico.py',364),
  ('INSTRUCCIONES -> PRODVOID','INSTRUCCIONES',1,'p_INSTRUCCIONES','lexico.py',365),
  ('INSTRUCCIONES -> RETURN','INSTRUCCIONES',1,'p_INSTRUCCIONES','lexico.py',366),
  ('INSTRUCCIONES -> BREAK','INSTRUCCIONES',1,'p_INSTRUCCIONES','lexico.py',367),
  ('INSTRUCCIONES -> CONTINUE','INSTRUCCIONES',1,'p_INSTRUCCIONES','lexico.py',368),
  ('INSTRUCCIONES -> LLAMADA','INSTRUCCIONES',1,'p_INSTRUCCIONES','lexico.py',369),
  ('DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma','DECLARACION',5,'p_DECLARACIONES','lexico.py',376),
  ('ASINGACION -> id operador_igual DATO punto_coma','ASINGACION',4,'p_ASIGNACION','lexico.py',383),
  ('TIPO_DATO -> tipo_int','TIPO_DATO',1,'p_TIPO_DATO','lexico.py',388),
  ('TIPO_DATO -> tipo_double','TIPO_DATO',1,'p_TIPO_DATO','lexico.py',389),
  ('TIPO_DATO -> tipo_string','TIPO_DATO',1,'p_TIPO_DATO','lexico.py',390),
  ('TIPO_DATO -> tipo_char','TIPO_DATO',1,'p_TIPO_DATO','lexico.py',391),
  ('TIPO_DATO -> tipo_boolean','TIPO_DATO',1,'p_TIPO_DATO','lexico.py',392),
  ('DATO -> numero','DATO',1,'p_DATO','lexico.py',399),
  ('DATO -> dato_double','DATO',1,'p_DATO','lexico.py',400),
  ('DATO -> dato_string','DATO',1,'p_DATO','lexico.py',401),
  ('DATO -> dato_char','DATO',1,'p_DATO','lexico.py',402),
  ('DATO -> dato_boolean_true','DATO',1,'p_DATO','lexico.py',403),
  ('DATO -> dato_boolean_false','DATO',1,'p_DATO','lexico.py',404),
  ('PARAMETRO -> TIPO_DATO id','PARAMETRO',2,'p_PARAMETRO_DEFINICION','lexico.py',410),
  ('PARAMETROS -> PARAMETROS coma PARAMETRO','PARAMETROS',3,'p_PARAMETROS_RECURSIVO','lexico.py',415),
  ('PARAMETROS -> PARAMETRO','PARAMETROS',1,'p_PARAMETROS_RECURSIVO','lexico.py',416),
  ('PARAMETROS -> <empty>','PARAMETROS',0,'p_PARAMETROS_RECURSIVO','lexico.py',417),
  ('LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra','LLAMADA',4,'p_LLAMADA','lexico.py',422),
  ('ARGUMENTOS -> ARGUMENTOS coma ARGUMENTO','ARGUMENTOS',3,'p_ARGUMENTOS','lexico.py',427),
  ('ARGUMENTOS -> ARGUMENTO','ARGUMENTOS',1,'p_ARGUMENTOS','lexico.py',428),
  ('ARGUMENTOS -> <empty>','ARGUMENTOS',0,'p_ARGUMENTOS','lexico.py',429),
  ('ARGUMENTO -> DATO','ARGUMENTO',1,'p_ARGUMENTO','lexico.py',434),
  ('RETURN -> reservada_return punto_coma','RETURN',2,'p_RETURN','lexico.py',440),
  ('RETURN -> reservada_return DATO punto_coma','RETURN',3,'p_RETURN','lexico.py',441),
  ('BREAK -> reservada_break punto_coma','BREAK',2,'p_BREAK','lexico.py',446),
  ('CONTINUE -> reservada_continue punto_coma','CONTINUE',2,'p_CONTINUE','lexico.py',451),
  ('OPERACION_FACTORIZADO -> parentesis_abre OPERACIONES parentesis_cierra','OPERACION_FACTORIZADO',3,'p_FACTORIZACION_OPERACION','lexico.py',465),
  ('INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra','INSTRUCCIONES_FACTORIZADO',3,'p_FACTORIZACION_INSTRUCCIONES','lexico.py',470),
  ('PARAMETROS_FACTORIZADO -> parentesis_abre PARAMETROS parentesis_cierra','PARAMETROS_FACTORIZADO',3,'p_FACTORIZACION_PARAMETROS','lexico.py',475),
]
