
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftoperador_sumaoperador_restaleftoperador_multiplicacionoperador_restocoma comentario_multilinea comentario_unilinea corchete_abre corchete_cierra dato_boolean_false dato_boolean_true dato_char dato_double dato_string dos_puntos id llave_abre llave_cierra numero operador_AND operador_NOT operador_OR operador_diferenciacion operador_divicion operador_igual operador_igualacion operador_mayor operador_mayor_igual operador_menor operador_menor_igual operador_multiplicacion operador_resta operador_resto operador_suma parentesis_abre parentesis_cierra punto punto_coma reservada_break reservada_continue reservada_do reservada_else reservada_fin reservada_if reservada_inicio reservada_return reservada_void reservada_while tipo_boolean tipo_char tipo_double tipo_int tipo_string\n  INITIAL : reservada_inicio EXPRESSIONS reservada_fin\n\n  \n  EXPRESSIONS : EXPRESSIONS E\n              | E\n  \n  E : E operador_suma E\n    | E operador_resta E\n    | E operador_multiplicacion E\n    | E operador_divicion E\n    | E operador_resto E\n    | id\n    | numero\n  '
    
_lr_action_items = {'reservada_inicio':([0,],[2,]),'$end':([1,7,],[0,-1,]),'id':([2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,],[5,5,-3,-9,-10,-2,5,5,5,5,5,-4,-5,-6,-7,-8,]),'numero':([2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,],[6,6,-3,-9,-10,-2,6,6,6,6,6,-4,-5,-6,-7,-8,]),'reservada_fin':([3,4,5,6,8,14,15,16,17,18,],[7,-3,-9,-10,-2,-4,-5,-6,-7,-8,]),'operador_suma':([4,5,6,8,14,15,16,17,18,],[9,-9,-10,9,-4,-5,-6,9,-8,]),'operador_resta':([4,5,6,8,14,15,16,17,18,],[10,-9,-10,10,-4,-5,-6,10,-8,]),'operador_multiplicacion':([4,5,6,8,14,15,16,17,18,],[11,-9,-10,11,11,11,-6,11,-8,]),'operador_divicion':([4,5,6,8,14,15,16,17,18,],[12,-9,-10,12,-4,-5,-6,12,-8,]),'operador_resto':([4,5,6,8,14,15,16,17,18,],[13,-9,-10,13,13,13,-6,13,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'INITIAL':([0,],[1,]),'EXPRESSIONS':([2,],[3,]),'E':([2,3,9,10,11,12,13,],[4,8,14,15,16,17,18,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> INITIAL","S'",1,None,None,None),
  ('INITIAL -> reservada_inicio EXPRESSIONS reservada_fin','INITIAL',3,'p_INITIAL','lexico.py',198),
  ('EXPRESSIONS -> EXPRESSIONS E','EXPRESSIONS',2,'p_EXPRESSIONS','lexico.py',208),
  ('EXPRESSIONS -> E','EXPRESSIONS',1,'p_EXPRESSIONS','lexico.py',209),
  ('E -> E operador_suma E','E',3,'p_E','lexico.py',222),
  ('E -> E operador_resta E','E',3,'p_E','lexico.py',223),
  ('E -> E operador_multiplicacion E','E',3,'p_E','lexico.py',224),
  ('E -> E operador_divicion E','E',3,'p_E','lexico.py',225),
  ('E -> E operador_resto E','E',3,'p_E','lexico.py',226),
  ('E -> id','E',1,'p_E','lexico.py',227),
  ('E -> numero','E',1,'p_E','lexico.py',228),
]
