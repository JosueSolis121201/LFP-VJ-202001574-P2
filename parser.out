Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    comentario_multilinea
    comentario_unilinea
    corchete_abre
    corchete_cierra
    dos_puntos
    punto
    reservada_fin
    reservada_inicio

Grammar

Rule 0     S' -> S0
Rule 1     S0 -> INITIAL
Rule 2     INITIAL -> INITIAL ESTRUCTURA
Rule 3     INITIAL -> ESTRUCTURA
Rule 4     ESTRUCTURA -> PRODIF_ELSE
Rule 5     ESTRUCTURA -> PRODIF
Rule 6     ESTRUCTURA -> PRODDO_WHILE
Rule 7     ESTRUCTURA -> PRODWHILE
Rule 8     ESTRUCTURA -> PRODVOID
Rule 9     ESTRUCTURA -> PRODFUNCION
Rule 10    ESTRUCTURA -> DECLARACION
Rule 11    ESTRUCTURA -> LLAMADA
Rule 12    ESTRUCTURA -> ASINGACION
Rule 13    ESTRUCTURA -> RETURN
Rule 14    ESTRUCTURA -> BREAK
Rule 15    ESTRUCTURA -> CONTINUE
Rule 16    PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma
Rule 17    PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
Rule 18    PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO
Rule 19    PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
Rule 20    PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO
Rule 21    PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO
Rule 22    OPERACIONES -> OPERACIONES OPERACION
Rule 23    OPERACIONES -> OPERACION
Rule 24    OPERACION -> OPERACION operador_suma OPERACION
Rule 25    OPERACION -> OPERACION operador_resta OPERACION
Rule 26    OPERACION -> OPERACION operador_multiplicacion OPERACION
Rule 27    OPERACION -> OPERACION operador_divicion OPERACION
Rule 28    OPERACION -> OPERACION operador_resto OPERACION
Rule 29    OPERACION -> OPERACION operador_igualacion OPERACION
Rule 30    OPERACION -> OPERACION operador_diferenciacion OPERACION
Rule 31    OPERACION -> OPERACION operador_mayor OPERACION
Rule 32    OPERACION -> OPERACION operador_mayor_igual OPERACION
Rule 33    OPERACION -> OPERACION operador_menor OPERACION
Rule 34    OPERACION -> OPERACION operador_menor_igual OPERACION
Rule 35    OPERACION -> OPERACION operador_AND OPERACION
Rule 36    OPERACION -> OPERACION operador_OR OPERACION
Rule 37    OPERACION -> OPERACION operador_NOT OPERACION
Rule 38    OPERACION -> OPERACION operador_igual OPERACION
Rule 39    OPERACION -> numero
Rule 40    INSTRUCCIONES -> DECLARACION
Rule 41    INSTRUCCIONES -> ASINGACION
Rule 42    INSTRUCCIONES -> PRODIF_ELSE
Rule 43    INSTRUCCIONES -> PRODIF
Rule 44    INSTRUCCIONES -> PRODDO_WHILE
Rule 45    INSTRUCCIONES -> PRODWHILE
Rule 46    INSTRUCCIONES -> PRODVOID
Rule 47    INSTRUCCIONES -> RETURN
Rule 48    INSTRUCCIONES -> BREAK
Rule 49    INSTRUCCIONES -> CONTINUE
Rule 50    INSTRUCCIONES -> LLAMADA
Rule 51    DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma
Rule 52    ASINGACION -> id operador_igual DATO punto_coma
Rule 53    TIPO_DATO -> tipo_int
Rule 54    TIPO_DATO -> tipo_double
Rule 55    TIPO_DATO -> tipo_string
Rule 56    TIPO_DATO -> tipo_char
Rule 57    TIPO_DATO -> tipo_boolean
Rule 58    DATO -> numero
Rule 59    DATO -> dato_double
Rule 60    DATO -> dato_string
Rule 61    DATO -> dato_char
Rule 62    DATO -> dato_boolean_true
Rule 63    DATO -> dato_boolean_false
Rule 64    PARAMETRO -> TIPO_DATO id
Rule 65    PARAMETROS -> PARAMETROS coma PARAMETRO
Rule 66    PARAMETROS -> PARAMETRO
Rule 67    PARAMETROS -> <empty>
Rule 68    LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra
Rule 69    ARGUMENTOS -> ARGUMENTOS coma ARGUMENTO
Rule 70    ARGUMENTOS -> ARGUMENTO
Rule 71    ARGUMENTOS -> <empty>
Rule 72    ARGUMENTO -> DATO
Rule 73    RETURN -> reservada_return punto_coma
Rule 74    RETURN -> reservada_return DATO punto_coma
Rule 75    BREAK -> reservada_break punto_coma
Rule 76    CONTINUE -> reservada_continue punto_coma
Rule 77    OPERACION_FACTORIZADO -> parentesis_abre OPERACIONES parentesis_cierra
Rule 78    INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra
Rule 79    PARAMETROS_FACTORIZADO -> parentesis_abre PARAMETROS parentesis_cierra

Terminals, with rules where they appear

coma                 : 65 69
comentario_multilinea : 
comentario_unilinea  : 
corchete_abre        : 
corchete_cierra      : 
dato_boolean_false   : 63
dato_boolean_true    : 62
dato_char            : 61
dato_double          : 59
dato_string          : 60
dos_puntos           : 
error                : 
id                   : 20 21 51 52 64 68
llave_abre           : 78
llave_cierra         : 78
numero               : 39 58
operador_AND         : 35
operador_NOT         : 37
operador_OR          : 36
operador_diferenciacion : 30
operador_divicion    : 27
operador_igual       : 38 51 52
operador_igualacion  : 29
operador_mayor       : 31
operador_mayor_igual : 32
operador_menor       : 33
operador_menor_igual : 34
operador_multiplicacion : 26
operador_resta       : 25
operador_resto       : 28
operador_suma        : 24
parentesis_abre      : 68 77 79
parentesis_cierra    : 68 77 79
punto                : 
punto_coma           : 16 51 52 73 74 75 76
reservada_break      : 75
reservada_continue   : 76
reservada_do         : 16
reservada_else       : 18
reservada_fin        : 
reservada_if         : 18 19
reservada_inicio     : 
reservada_return     : 73 74
reservada_void       : 20
reservada_while      : 16 17
tipo_boolean         : 57
tipo_char            : 56
tipo_double          : 54
tipo_int             : 53
tipo_string          : 55

Nonterminals, with rules where they appear

ARGUMENTO            : 69 70
ARGUMENTOS           : 68 69
ASINGACION           : 12 41
BREAK                : 14 48
CONTINUE             : 15 49
DATO                 : 51 52 72 74
DECLARACION          : 10 40
ESTRUCTURA           : 2 3
INITIAL              : 1 2
INSTRUCCIONES        : 78
INSTRUCCIONES_FACTORIZADO : 16 17 18 18 19 20 21
LLAMADA              : 11 50
OPERACION            : 22 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38
OPERACIONES          : 22 77
OPERACION_FACTORIZADO : 16 17 18 19
PARAMETRO            : 65 66
PARAMETROS           : 65 79
PARAMETROS_FACTORIZADO : 20 21
PRODDO_WHILE         : 6 44
PRODFUNCION          : 9
PRODIF               : 5 43
PRODIF_ELSE          : 4 42
PRODVOID             : 8 46
PRODWHILE            : 7 45
RETURN               : 13 47
S0                   : 0
TIPO_DATO            : 21 51 64

Parsing method: LALR

state 0

    (0) S' -> . S0
    (1) S0 -> . INITIAL
    (2) INITIAL -> . INITIAL ESTRUCTURA
    (3) INITIAL -> . ESTRUCTURA
    (4) ESTRUCTURA -> . PRODIF_ELSE
    (5) ESTRUCTURA -> . PRODIF
    (6) ESTRUCTURA -> . PRODDO_WHILE
    (7) ESTRUCTURA -> . PRODWHILE
    (8) ESTRUCTURA -> . PRODVOID
    (9) ESTRUCTURA -> . PRODFUNCION
    (10) ESTRUCTURA -> . DECLARACION
    (11) ESTRUCTURA -> . LLAMADA
    (12) ESTRUCTURA -> . ASINGACION
    (13) ESTRUCTURA -> . RETURN
    (14) ESTRUCTURA -> . BREAK
    (15) ESTRUCTURA -> . CONTINUE
    (18) PRODIF_ELSE -> . reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO
    (19) PRODIF -> . reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (16) PRODDO_WHILE -> . reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma
    (17) PRODWHILE -> . reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (20) PRODVOID -> . reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (21) PRODFUNCION -> . TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (51) DECLARACION -> . TIPO_DATO id operador_igual DATO punto_coma
    (68) LLAMADA -> . id parentesis_abre ARGUMENTOS parentesis_cierra
    (52) ASINGACION -> . id operador_igual DATO punto_coma
    (73) RETURN -> . reservada_return punto_coma
    (74) RETURN -> . reservada_return DATO punto_coma
    (75) BREAK -> . reservada_break punto_coma
    (76) CONTINUE -> . reservada_continue punto_coma
    (53) TIPO_DATO -> . tipo_int
    (54) TIPO_DATO -> . tipo_double
    (55) TIPO_DATO -> . tipo_string
    (56) TIPO_DATO -> . tipo_char
    (57) TIPO_DATO -> . tipo_boolean

    reservada_if    shift and go to state 16
    reservada_do    shift and go to state 17
    reservada_while shift and go to state 18
    reservada_void  shift and go to state 19
    id              shift and go to state 20
    reservada_return shift and go to state 22
    reservada_break shift and go to state 23
    reservada_continue shift and go to state 24
    tipo_int        shift and go to state 25
    tipo_double     shift and go to state 26
    tipo_string     shift and go to state 27
    tipo_char       shift and go to state 28
    tipo_boolean    shift and go to state 29

    S0                             shift and go to state 1
    INITIAL                        shift and go to state 2
    ESTRUCTURA                     shift and go to state 3
    PRODIF_ELSE                    shift and go to state 4
    PRODIF                         shift and go to state 5
    PRODDO_WHILE                   shift and go to state 6
    PRODWHILE                      shift and go to state 7
    PRODVOID                       shift and go to state 8
    PRODFUNCION                    shift and go to state 9
    DECLARACION                    shift and go to state 10
    LLAMADA                        shift and go to state 11
    ASINGACION                     shift and go to state 12
    RETURN                         shift and go to state 13
    BREAK                          shift and go to state 14
    CONTINUE                       shift and go to state 15
    TIPO_DATO                      shift and go to state 21

state 1

    (0) S' -> S0 .



state 2

    (1) S0 -> INITIAL .
    (2) INITIAL -> INITIAL . ESTRUCTURA
    (4) ESTRUCTURA -> . PRODIF_ELSE
    (5) ESTRUCTURA -> . PRODIF
    (6) ESTRUCTURA -> . PRODDO_WHILE
    (7) ESTRUCTURA -> . PRODWHILE
    (8) ESTRUCTURA -> . PRODVOID
    (9) ESTRUCTURA -> . PRODFUNCION
    (10) ESTRUCTURA -> . DECLARACION
    (11) ESTRUCTURA -> . LLAMADA
    (12) ESTRUCTURA -> . ASINGACION
    (13) ESTRUCTURA -> . RETURN
    (14) ESTRUCTURA -> . BREAK
    (15) ESTRUCTURA -> . CONTINUE
    (18) PRODIF_ELSE -> . reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO
    (19) PRODIF -> . reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (16) PRODDO_WHILE -> . reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma
    (17) PRODWHILE -> . reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (20) PRODVOID -> . reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (21) PRODFUNCION -> . TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (51) DECLARACION -> . TIPO_DATO id operador_igual DATO punto_coma
    (68) LLAMADA -> . id parentesis_abre ARGUMENTOS parentesis_cierra
    (52) ASINGACION -> . id operador_igual DATO punto_coma
    (73) RETURN -> . reservada_return punto_coma
    (74) RETURN -> . reservada_return DATO punto_coma
    (75) BREAK -> . reservada_break punto_coma
    (76) CONTINUE -> . reservada_continue punto_coma
    (53) TIPO_DATO -> . tipo_int
    (54) TIPO_DATO -> . tipo_double
    (55) TIPO_DATO -> . tipo_string
    (56) TIPO_DATO -> . tipo_char
    (57) TIPO_DATO -> . tipo_boolean

    $end            reduce using rule 1 (S0 -> INITIAL .)
    reservada_if    shift and go to state 16
    reservada_do    shift and go to state 17
    reservada_while shift and go to state 18
    reservada_void  shift and go to state 19
    id              shift and go to state 20
    reservada_return shift and go to state 22
    reservada_break shift and go to state 23
    reservada_continue shift and go to state 24
    tipo_int        shift and go to state 25
    tipo_double     shift and go to state 26
    tipo_string     shift and go to state 27
    tipo_char       shift and go to state 28
    tipo_boolean    shift and go to state 29

    ESTRUCTURA                     shift and go to state 30
    PRODIF_ELSE                    shift and go to state 4
    PRODIF                         shift and go to state 5
    PRODDO_WHILE                   shift and go to state 6
    PRODWHILE                      shift and go to state 7
    PRODVOID                       shift and go to state 8
    PRODFUNCION                    shift and go to state 9
    DECLARACION                    shift and go to state 10
    LLAMADA                        shift and go to state 11
    ASINGACION                     shift and go to state 12
    RETURN                         shift and go to state 13
    BREAK                          shift and go to state 14
    CONTINUE                       shift and go to state 15
    TIPO_DATO                      shift and go to state 21

state 3

    (3) INITIAL -> ESTRUCTURA .

    reservada_if    reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    reservada_do    reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    reservada_while reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    reservada_void  reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    id              reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    reservada_return reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    reservada_break reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    reservada_continue reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    tipo_int        reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    tipo_double     reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    tipo_string     reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    tipo_char       reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    tipo_boolean    reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    $end            reduce using rule 3 (INITIAL -> ESTRUCTURA .)


state 4

    (4) ESTRUCTURA -> PRODIF_ELSE .

    reservada_if    reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    reservada_do    reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    reservada_while reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    reservada_void  reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    id              reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    reservada_return reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    reservada_break reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    reservada_continue reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    tipo_int        reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    tipo_double     reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    tipo_string     reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    tipo_char       reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    tipo_boolean    reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    $end            reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)


state 5

    (5) ESTRUCTURA -> PRODIF .

    reservada_if    reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    reservada_do    reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    reservada_while reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    reservada_void  reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    id              reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    reservada_return reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    reservada_break reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    reservada_continue reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    tipo_int        reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    tipo_double     reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    tipo_string     reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    tipo_char       reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    tipo_boolean    reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    $end            reduce using rule 5 (ESTRUCTURA -> PRODIF .)


state 6

    (6) ESTRUCTURA -> PRODDO_WHILE .

    reservada_if    reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    reservada_do    reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    reservada_while reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    reservada_void  reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    id              reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    reservada_return reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    reservada_break reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    reservada_continue reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    tipo_int        reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    tipo_double     reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    tipo_string     reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    tipo_char       reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    tipo_boolean    reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    $end            reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)


state 7

    (7) ESTRUCTURA -> PRODWHILE .

    reservada_if    reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    reservada_do    reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    reservada_while reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    reservada_void  reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    id              reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    reservada_return reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    reservada_break reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    reservada_continue reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    tipo_int        reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    tipo_double     reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    tipo_string     reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    tipo_char       reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    tipo_boolean    reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    $end            reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)


state 8

    (8) ESTRUCTURA -> PRODVOID .

    reservada_if    reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    reservada_do    reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    reservada_while reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    reservada_void  reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    id              reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    reservada_return reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    reservada_break reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    reservada_continue reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    tipo_int        reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    tipo_double     reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    tipo_string     reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    tipo_char       reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    tipo_boolean    reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    $end            reduce using rule 8 (ESTRUCTURA -> PRODVOID .)


state 9

    (9) ESTRUCTURA -> PRODFUNCION .

    reservada_if    reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    reservada_do    reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    reservada_while reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    reservada_void  reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    id              reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    reservada_return reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    reservada_break reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    reservada_continue reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    tipo_int        reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    tipo_double     reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    tipo_string     reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    tipo_char       reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    tipo_boolean    reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    $end            reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)


state 10

    (10) ESTRUCTURA -> DECLARACION .

    reservada_if    reduce using rule 10 (ESTRUCTURA -> DECLARACION .)
    reservada_do    reduce using rule 10 (ESTRUCTURA -> DECLARACION .)
    reservada_while reduce using rule 10 (ESTRUCTURA -> DECLARACION .)
    reservada_void  reduce using rule 10 (ESTRUCTURA -> DECLARACION .)
    id              reduce using rule 10 (ESTRUCTURA -> DECLARACION .)
    reservada_return reduce using rule 10 (ESTRUCTURA -> DECLARACION .)
    reservada_break reduce using rule 10 (ESTRUCTURA -> DECLARACION .)
    reservada_continue reduce using rule 10 (ESTRUCTURA -> DECLARACION .)
    tipo_int        reduce using rule 10 (ESTRUCTURA -> DECLARACION .)
    tipo_double     reduce using rule 10 (ESTRUCTURA -> DECLARACION .)
    tipo_string     reduce using rule 10 (ESTRUCTURA -> DECLARACION .)
    tipo_char       reduce using rule 10 (ESTRUCTURA -> DECLARACION .)
    tipo_boolean    reduce using rule 10 (ESTRUCTURA -> DECLARACION .)
    $end            reduce using rule 10 (ESTRUCTURA -> DECLARACION .)


state 11

    (11) ESTRUCTURA -> LLAMADA .

    reservada_if    reduce using rule 11 (ESTRUCTURA -> LLAMADA .)
    reservada_do    reduce using rule 11 (ESTRUCTURA -> LLAMADA .)
    reservada_while reduce using rule 11 (ESTRUCTURA -> LLAMADA .)
    reservada_void  reduce using rule 11 (ESTRUCTURA -> LLAMADA .)
    id              reduce using rule 11 (ESTRUCTURA -> LLAMADA .)
    reservada_return reduce using rule 11 (ESTRUCTURA -> LLAMADA .)
    reservada_break reduce using rule 11 (ESTRUCTURA -> LLAMADA .)
    reservada_continue reduce using rule 11 (ESTRUCTURA -> LLAMADA .)
    tipo_int        reduce using rule 11 (ESTRUCTURA -> LLAMADA .)
    tipo_double     reduce using rule 11 (ESTRUCTURA -> LLAMADA .)
    tipo_string     reduce using rule 11 (ESTRUCTURA -> LLAMADA .)
    tipo_char       reduce using rule 11 (ESTRUCTURA -> LLAMADA .)
    tipo_boolean    reduce using rule 11 (ESTRUCTURA -> LLAMADA .)
    $end            reduce using rule 11 (ESTRUCTURA -> LLAMADA .)


state 12

    (12) ESTRUCTURA -> ASINGACION .

    reservada_if    reduce using rule 12 (ESTRUCTURA -> ASINGACION .)
    reservada_do    reduce using rule 12 (ESTRUCTURA -> ASINGACION .)
    reservada_while reduce using rule 12 (ESTRUCTURA -> ASINGACION .)
    reservada_void  reduce using rule 12 (ESTRUCTURA -> ASINGACION .)
    id              reduce using rule 12 (ESTRUCTURA -> ASINGACION .)
    reservada_return reduce using rule 12 (ESTRUCTURA -> ASINGACION .)
    reservada_break reduce using rule 12 (ESTRUCTURA -> ASINGACION .)
    reservada_continue reduce using rule 12 (ESTRUCTURA -> ASINGACION .)
    tipo_int        reduce using rule 12 (ESTRUCTURA -> ASINGACION .)
    tipo_double     reduce using rule 12 (ESTRUCTURA -> ASINGACION .)
    tipo_string     reduce using rule 12 (ESTRUCTURA -> ASINGACION .)
    tipo_char       reduce using rule 12 (ESTRUCTURA -> ASINGACION .)
    tipo_boolean    reduce using rule 12 (ESTRUCTURA -> ASINGACION .)
    $end            reduce using rule 12 (ESTRUCTURA -> ASINGACION .)


state 13

    (13) ESTRUCTURA -> RETURN .

    reservada_if    reduce using rule 13 (ESTRUCTURA -> RETURN .)
    reservada_do    reduce using rule 13 (ESTRUCTURA -> RETURN .)
    reservada_while reduce using rule 13 (ESTRUCTURA -> RETURN .)
    reservada_void  reduce using rule 13 (ESTRUCTURA -> RETURN .)
    id              reduce using rule 13 (ESTRUCTURA -> RETURN .)
    reservada_return reduce using rule 13 (ESTRUCTURA -> RETURN .)
    reservada_break reduce using rule 13 (ESTRUCTURA -> RETURN .)
    reservada_continue reduce using rule 13 (ESTRUCTURA -> RETURN .)
    tipo_int        reduce using rule 13 (ESTRUCTURA -> RETURN .)
    tipo_double     reduce using rule 13 (ESTRUCTURA -> RETURN .)
    tipo_string     reduce using rule 13 (ESTRUCTURA -> RETURN .)
    tipo_char       reduce using rule 13 (ESTRUCTURA -> RETURN .)
    tipo_boolean    reduce using rule 13 (ESTRUCTURA -> RETURN .)
    $end            reduce using rule 13 (ESTRUCTURA -> RETURN .)


state 14

    (14) ESTRUCTURA -> BREAK .

    reservada_if    reduce using rule 14 (ESTRUCTURA -> BREAK .)
    reservada_do    reduce using rule 14 (ESTRUCTURA -> BREAK .)
    reservada_while reduce using rule 14 (ESTRUCTURA -> BREAK .)
    reservada_void  reduce using rule 14 (ESTRUCTURA -> BREAK .)
    id              reduce using rule 14 (ESTRUCTURA -> BREAK .)
    reservada_return reduce using rule 14 (ESTRUCTURA -> BREAK .)
    reservada_break reduce using rule 14 (ESTRUCTURA -> BREAK .)
    reservada_continue reduce using rule 14 (ESTRUCTURA -> BREAK .)
    tipo_int        reduce using rule 14 (ESTRUCTURA -> BREAK .)
    tipo_double     reduce using rule 14 (ESTRUCTURA -> BREAK .)
    tipo_string     reduce using rule 14 (ESTRUCTURA -> BREAK .)
    tipo_char       reduce using rule 14 (ESTRUCTURA -> BREAK .)
    tipo_boolean    reduce using rule 14 (ESTRUCTURA -> BREAK .)
    $end            reduce using rule 14 (ESTRUCTURA -> BREAK .)


state 15

    (15) ESTRUCTURA -> CONTINUE .

    reservada_if    reduce using rule 15 (ESTRUCTURA -> CONTINUE .)
    reservada_do    reduce using rule 15 (ESTRUCTURA -> CONTINUE .)
    reservada_while reduce using rule 15 (ESTRUCTURA -> CONTINUE .)
    reservada_void  reduce using rule 15 (ESTRUCTURA -> CONTINUE .)
    id              reduce using rule 15 (ESTRUCTURA -> CONTINUE .)
    reservada_return reduce using rule 15 (ESTRUCTURA -> CONTINUE .)
    reservada_break reduce using rule 15 (ESTRUCTURA -> CONTINUE .)
    reservada_continue reduce using rule 15 (ESTRUCTURA -> CONTINUE .)
    tipo_int        reduce using rule 15 (ESTRUCTURA -> CONTINUE .)
    tipo_double     reduce using rule 15 (ESTRUCTURA -> CONTINUE .)
    tipo_string     reduce using rule 15 (ESTRUCTURA -> CONTINUE .)
    tipo_char       reduce using rule 15 (ESTRUCTURA -> CONTINUE .)
    tipo_boolean    reduce using rule 15 (ESTRUCTURA -> CONTINUE .)
    $end            reduce using rule 15 (ESTRUCTURA -> CONTINUE .)


state 16

    (18) PRODIF_ELSE -> reservada_if . OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO
    (19) PRODIF -> reservada_if . OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (77) OPERACION_FACTORIZADO -> . parentesis_abre OPERACIONES parentesis_cierra

    parentesis_abre shift and go to state 32

    OPERACION_FACTORIZADO          shift and go to state 31

state 17

    (16) PRODDO_WHILE -> reservada_do . INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma
    (78) INSTRUCCIONES_FACTORIZADO -> . llave_abre INSTRUCCIONES llave_cierra

    llave_abre      shift and go to state 34

    INSTRUCCIONES_FACTORIZADO      shift and go to state 33

state 18

    (17) PRODWHILE -> reservada_while . OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (77) OPERACION_FACTORIZADO -> . parentesis_abre OPERACIONES parentesis_cierra

    parentesis_abre shift and go to state 32

    OPERACION_FACTORIZADO          shift and go to state 35

state 19

    (20) PRODVOID -> reservada_void . id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO

    id              shift and go to state 36


state 20

    (68) LLAMADA -> id . parentesis_abre ARGUMENTOS parentesis_cierra
    (52) ASINGACION -> id . operador_igual DATO punto_coma

    parentesis_abre shift and go to state 37
    operador_igual  shift and go to state 38


state 21

    (21) PRODFUNCION -> TIPO_DATO . id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (51) DECLARACION -> TIPO_DATO . id operador_igual DATO punto_coma

    id              shift and go to state 39


state 22

    (73) RETURN -> reservada_return . punto_coma
    (74) RETURN -> reservada_return . DATO punto_coma
    (58) DATO -> . numero
    (59) DATO -> . dato_double
    (60) DATO -> . dato_string
    (61) DATO -> . dato_char
    (62) DATO -> . dato_boolean_true
    (63) DATO -> . dato_boolean_false

    punto_coma      shift and go to state 40
    numero          shift and go to state 42
    dato_double     shift and go to state 43
    dato_string     shift and go to state 44
    dato_char       shift and go to state 45
    dato_boolean_true shift and go to state 46
    dato_boolean_false shift and go to state 47

    DATO                           shift and go to state 41

state 23

    (75) BREAK -> reservada_break . punto_coma

    punto_coma      shift and go to state 48


state 24

    (76) CONTINUE -> reservada_continue . punto_coma

    punto_coma      shift and go to state 49


state 25

    (53) TIPO_DATO -> tipo_int .

    id              reduce using rule 53 (TIPO_DATO -> tipo_int .)


state 26

    (54) TIPO_DATO -> tipo_double .

    id              reduce using rule 54 (TIPO_DATO -> tipo_double .)


state 27

    (55) TIPO_DATO -> tipo_string .

    id              reduce using rule 55 (TIPO_DATO -> tipo_string .)


state 28

    (56) TIPO_DATO -> tipo_char .

    id              reduce using rule 56 (TIPO_DATO -> tipo_char .)


state 29

    (57) TIPO_DATO -> tipo_boolean .

    id              reduce using rule 57 (TIPO_DATO -> tipo_boolean .)


state 30

    (2) INITIAL -> INITIAL ESTRUCTURA .

    reservada_if    reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    reservada_do    reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    reservada_while reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    reservada_void  reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    id              reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    reservada_return reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    reservada_break reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    reservada_continue reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    tipo_int        reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    tipo_double     reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    tipo_string     reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    tipo_char       reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    tipo_boolean    reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    $end            reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)


state 31

    (18) PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO . INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO
    (19) PRODIF -> reservada_if OPERACION_FACTORIZADO . INSTRUCCIONES_FACTORIZADO
    (78) INSTRUCCIONES_FACTORIZADO -> . llave_abre INSTRUCCIONES llave_cierra

    llave_abre      shift and go to state 34

    INSTRUCCIONES_FACTORIZADO      shift and go to state 50

state 32

    (77) OPERACION_FACTORIZADO -> parentesis_abre . OPERACIONES parentesis_cierra
    (22) OPERACIONES -> . OPERACIONES OPERACION
    (23) OPERACIONES -> . OPERACION
    (24) OPERACION -> . OPERACION operador_suma OPERACION
    (25) OPERACION -> . OPERACION operador_resta OPERACION
    (26) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (27) OPERACION -> . OPERACION operador_divicion OPERACION
    (28) OPERACION -> . OPERACION operador_resto OPERACION
    (29) OPERACION -> . OPERACION operador_igualacion OPERACION
    (30) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (31) OPERACION -> . OPERACION operador_mayor OPERACION
    (32) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (33) OPERACION -> . OPERACION operador_menor OPERACION
    (34) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (35) OPERACION -> . OPERACION operador_AND OPERACION
    (36) OPERACION -> . OPERACION operador_OR OPERACION
    (37) OPERACION -> . OPERACION operador_NOT OPERACION
    (38) OPERACION -> . OPERACION operador_igual OPERACION
    (39) OPERACION -> . numero

    numero          shift and go to state 53

    OPERACIONES                    shift and go to state 51
    OPERACION                      shift and go to state 52

state 33

    (16) PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO . reservada_while OPERACION_FACTORIZADO punto_coma

    reservada_while shift and go to state 54


state 34

    (78) INSTRUCCIONES_FACTORIZADO -> llave_abre . INSTRUCCIONES llave_cierra
    (40) INSTRUCCIONES -> . DECLARACION
    (41) INSTRUCCIONES -> . ASINGACION
    (42) INSTRUCCIONES -> . PRODIF_ELSE
    (43) INSTRUCCIONES -> . PRODIF
    (44) INSTRUCCIONES -> . PRODDO_WHILE
    (45) INSTRUCCIONES -> . PRODWHILE
    (46) INSTRUCCIONES -> . PRODVOID
    (47) INSTRUCCIONES -> . RETURN
    (48) INSTRUCCIONES -> . BREAK
    (49) INSTRUCCIONES -> . CONTINUE
    (50) INSTRUCCIONES -> . LLAMADA
    (51) DECLARACION -> . TIPO_DATO id operador_igual DATO punto_coma
    (52) ASINGACION -> . id operador_igual DATO punto_coma
    (18) PRODIF_ELSE -> . reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO
    (19) PRODIF -> . reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (16) PRODDO_WHILE -> . reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma
    (17) PRODWHILE -> . reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (20) PRODVOID -> . reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (73) RETURN -> . reservada_return punto_coma
    (74) RETURN -> . reservada_return DATO punto_coma
    (75) BREAK -> . reservada_break punto_coma
    (76) CONTINUE -> . reservada_continue punto_coma
    (68) LLAMADA -> . id parentesis_abre ARGUMENTOS parentesis_cierra
    (53) TIPO_DATO -> . tipo_int
    (54) TIPO_DATO -> . tipo_double
    (55) TIPO_DATO -> . tipo_string
    (56) TIPO_DATO -> . tipo_char
    (57) TIPO_DATO -> . tipo_boolean

    id              shift and go to state 68
    reservada_if    shift and go to state 16
    reservada_do    shift and go to state 17
    reservada_while shift and go to state 18
    reservada_void  shift and go to state 19
    reservada_return shift and go to state 22
    reservada_break shift and go to state 23
    reservada_continue shift and go to state 24
    tipo_int        shift and go to state 25
    tipo_double     shift and go to state 26
    tipo_string     shift and go to state 27
    tipo_char       shift and go to state 28
    tipo_boolean    shift and go to state 29

    INSTRUCCIONES                  shift and go to state 55
    DECLARACION                    shift and go to state 56
    ASINGACION                     shift and go to state 57
    PRODIF_ELSE                    shift and go to state 58
    PRODIF                         shift and go to state 59
    PRODDO_WHILE                   shift and go to state 60
    PRODWHILE                      shift and go to state 61
    PRODVOID                       shift and go to state 62
    RETURN                         shift and go to state 63
    BREAK                          shift and go to state 64
    CONTINUE                       shift and go to state 65
    LLAMADA                        shift and go to state 66
    TIPO_DATO                      shift and go to state 67

state 35

    (17) PRODWHILE -> reservada_while OPERACION_FACTORIZADO . INSTRUCCIONES_FACTORIZADO
    (78) INSTRUCCIONES_FACTORIZADO -> . llave_abre INSTRUCCIONES llave_cierra

    llave_abre      shift and go to state 34

    INSTRUCCIONES_FACTORIZADO      shift and go to state 69

state 36

    (20) PRODVOID -> reservada_void id . PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (79) PARAMETROS_FACTORIZADO -> . parentesis_abre PARAMETROS parentesis_cierra

    parentesis_abre shift and go to state 71

    PARAMETROS_FACTORIZADO         shift and go to state 70

state 37

    (68) LLAMADA -> id parentesis_abre . ARGUMENTOS parentesis_cierra
    (69) ARGUMENTOS -> . ARGUMENTOS coma ARGUMENTO
    (70) ARGUMENTOS -> . ARGUMENTO
    (71) ARGUMENTOS -> .
    (72) ARGUMENTO -> . DATO
    (58) DATO -> . numero
    (59) DATO -> . dato_double
    (60) DATO -> . dato_string
    (61) DATO -> . dato_char
    (62) DATO -> . dato_boolean_true
    (63) DATO -> . dato_boolean_false

    parentesis_cierra reduce using rule 71 (ARGUMENTOS -> .)
    coma            reduce using rule 71 (ARGUMENTOS -> .)
    numero          shift and go to state 42
    dato_double     shift and go to state 43
    dato_string     shift and go to state 44
    dato_char       shift and go to state 45
    dato_boolean_true shift and go to state 46
    dato_boolean_false shift and go to state 47

    ARGUMENTOS                     shift and go to state 72
    ARGUMENTO                      shift and go to state 73
    DATO                           shift and go to state 74

state 38

    (52) ASINGACION -> id operador_igual . DATO punto_coma
    (58) DATO -> . numero
    (59) DATO -> . dato_double
    (60) DATO -> . dato_string
    (61) DATO -> . dato_char
    (62) DATO -> . dato_boolean_true
    (63) DATO -> . dato_boolean_false

    numero          shift and go to state 42
    dato_double     shift and go to state 43
    dato_string     shift and go to state 44
    dato_char       shift and go to state 45
    dato_boolean_true shift and go to state 46
    dato_boolean_false shift and go to state 47

    DATO                           shift and go to state 75

state 39

    (21) PRODFUNCION -> TIPO_DATO id . PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (51) DECLARACION -> TIPO_DATO id . operador_igual DATO punto_coma
    (79) PARAMETROS_FACTORIZADO -> . parentesis_abre PARAMETROS parentesis_cierra

    operador_igual  shift and go to state 77
    parentesis_abre shift and go to state 71

    PARAMETROS_FACTORIZADO         shift and go to state 76

state 40

    (73) RETURN -> reservada_return punto_coma .

    reservada_if    reduce using rule 73 (RETURN -> reservada_return punto_coma .)
    reservada_do    reduce using rule 73 (RETURN -> reservada_return punto_coma .)
    reservada_while reduce using rule 73 (RETURN -> reservada_return punto_coma .)
    reservada_void  reduce using rule 73 (RETURN -> reservada_return punto_coma .)
    id              reduce using rule 73 (RETURN -> reservada_return punto_coma .)
    reservada_return reduce using rule 73 (RETURN -> reservada_return punto_coma .)
    reservada_break reduce using rule 73 (RETURN -> reservada_return punto_coma .)
    reservada_continue reduce using rule 73 (RETURN -> reservada_return punto_coma .)
    tipo_int        reduce using rule 73 (RETURN -> reservada_return punto_coma .)
    tipo_double     reduce using rule 73 (RETURN -> reservada_return punto_coma .)
    tipo_string     reduce using rule 73 (RETURN -> reservada_return punto_coma .)
    tipo_char       reduce using rule 73 (RETURN -> reservada_return punto_coma .)
    tipo_boolean    reduce using rule 73 (RETURN -> reservada_return punto_coma .)
    $end            reduce using rule 73 (RETURN -> reservada_return punto_coma .)
    llave_cierra    reduce using rule 73 (RETURN -> reservada_return punto_coma .)


state 41

    (74) RETURN -> reservada_return DATO . punto_coma

    punto_coma      shift and go to state 78


state 42

    (58) DATO -> numero .

    punto_coma      reduce using rule 58 (DATO -> numero .)
    parentesis_cierra reduce using rule 58 (DATO -> numero .)
    coma            reduce using rule 58 (DATO -> numero .)


state 43

    (59) DATO -> dato_double .

    punto_coma      reduce using rule 59 (DATO -> dato_double .)
    parentesis_cierra reduce using rule 59 (DATO -> dato_double .)
    coma            reduce using rule 59 (DATO -> dato_double .)


state 44

    (60) DATO -> dato_string .

    punto_coma      reduce using rule 60 (DATO -> dato_string .)
    parentesis_cierra reduce using rule 60 (DATO -> dato_string .)
    coma            reduce using rule 60 (DATO -> dato_string .)


state 45

    (61) DATO -> dato_char .

    punto_coma      reduce using rule 61 (DATO -> dato_char .)
    parentesis_cierra reduce using rule 61 (DATO -> dato_char .)
    coma            reduce using rule 61 (DATO -> dato_char .)


state 46

    (62) DATO -> dato_boolean_true .

    punto_coma      reduce using rule 62 (DATO -> dato_boolean_true .)
    parentesis_cierra reduce using rule 62 (DATO -> dato_boolean_true .)
    coma            reduce using rule 62 (DATO -> dato_boolean_true .)


state 47

    (63) DATO -> dato_boolean_false .

    punto_coma      reduce using rule 63 (DATO -> dato_boolean_false .)
    parentesis_cierra reduce using rule 63 (DATO -> dato_boolean_false .)
    coma            reduce using rule 63 (DATO -> dato_boolean_false .)


state 48

    (75) BREAK -> reservada_break punto_coma .

    reservada_if    reduce using rule 75 (BREAK -> reservada_break punto_coma .)
    reservada_do    reduce using rule 75 (BREAK -> reservada_break punto_coma .)
    reservada_while reduce using rule 75 (BREAK -> reservada_break punto_coma .)
    reservada_void  reduce using rule 75 (BREAK -> reservada_break punto_coma .)
    id              reduce using rule 75 (BREAK -> reservada_break punto_coma .)
    reservada_return reduce using rule 75 (BREAK -> reservada_break punto_coma .)
    reservada_break reduce using rule 75 (BREAK -> reservada_break punto_coma .)
    reservada_continue reduce using rule 75 (BREAK -> reservada_break punto_coma .)
    tipo_int        reduce using rule 75 (BREAK -> reservada_break punto_coma .)
    tipo_double     reduce using rule 75 (BREAK -> reservada_break punto_coma .)
    tipo_string     reduce using rule 75 (BREAK -> reservada_break punto_coma .)
    tipo_char       reduce using rule 75 (BREAK -> reservada_break punto_coma .)
    tipo_boolean    reduce using rule 75 (BREAK -> reservada_break punto_coma .)
    $end            reduce using rule 75 (BREAK -> reservada_break punto_coma .)
    llave_cierra    reduce using rule 75 (BREAK -> reservada_break punto_coma .)


state 49

    (76) CONTINUE -> reservada_continue punto_coma .

    reservada_if    reduce using rule 76 (CONTINUE -> reservada_continue punto_coma .)
    reservada_do    reduce using rule 76 (CONTINUE -> reservada_continue punto_coma .)
    reservada_while reduce using rule 76 (CONTINUE -> reservada_continue punto_coma .)
    reservada_void  reduce using rule 76 (CONTINUE -> reservada_continue punto_coma .)
    id              reduce using rule 76 (CONTINUE -> reservada_continue punto_coma .)
    reservada_return reduce using rule 76 (CONTINUE -> reservada_continue punto_coma .)
    reservada_break reduce using rule 76 (CONTINUE -> reservada_continue punto_coma .)
    reservada_continue reduce using rule 76 (CONTINUE -> reservada_continue punto_coma .)
    tipo_int        reduce using rule 76 (CONTINUE -> reservada_continue punto_coma .)
    tipo_double     reduce using rule 76 (CONTINUE -> reservada_continue punto_coma .)
    tipo_string     reduce using rule 76 (CONTINUE -> reservada_continue punto_coma .)
    tipo_char       reduce using rule 76 (CONTINUE -> reservada_continue punto_coma .)
    tipo_boolean    reduce using rule 76 (CONTINUE -> reservada_continue punto_coma .)
    $end            reduce using rule 76 (CONTINUE -> reservada_continue punto_coma .)
    llave_cierra    reduce using rule 76 (CONTINUE -> reservada_continue punto_coma .)


state 50

    (18) PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO . reservada_else INSTRUCCIONES_FACTORIZADO
    (19) PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .

    reservada_else  shift and go to state 79
    reservada_if    reduce using rule 19 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_do    reduce using rule 19 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_while reduce using rule 19 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_void  reduce using rule 19 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    id              reduce using rule 19 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_return reduce using rule 19 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_break reduce using rule 19 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_continue reduce using rule 19 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_int        reduce using rule 19 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_double     reduce using rule 19 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_string     reduce using rule 19 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_char       reduce using rule 19 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_boolean    reduce using rule 19 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    $end            reduce using rule 19 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    llave_cierra    reduce using rule 19 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)


state 51

    (77) OPERACION_FACTORIZADO -> parentesis_abre OPERACIONES . parentesis_cierra
    (22) OPERACIONES -> OPERACIONES . OPERACION
    (24) OPERACION -> . OPERACION operador_suma OPERACION
    (25) OPERACION -> . OPERACION operador_resta OPERACION
    (26) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (27) OPERACION -> . OPERACION operador_divicion OPERACION
    (28) OPERACION -> . OPERACION operador_resto OPERACION
    (29) OPERACION -> . OPERACION operador_igualacion OPERACION
    (30) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (31) OPERACION -> . OPERACION operador_mayor OPERACION
    (32) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (33) OPERACION -> . OPERACION operador_menor OPERACION
    (34) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (35) OPERACION -> . OPERACION operador_AND OPERACION
    (36) OPERACION -> . OPERACION operador_OR OPERACION
    (37) OPERACION -> . OPERACION operador_NOT OPERACION
    (38) OPERACION -> . OPERACION operador_igual OPERACION
    (39) OPERACION -> . numero

    parentesis_cierra shift and go to state 80
    numero          shift and go to state 53

    OPERACION                      shift and go to state 81

state 52

    (23) OPERACIONES -> OPERACION .
    (24) OPERACION -> OPERACION . operador_suma OPERACION
    (25) OPERACION -> OPERACION . operador_resta OPERACION
    (26) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (27) OPERACION -> OPERACION . operador_divicion OPERACION
    (28) OPERACION -> OPERACION . operador_resto OPERACION
    (29) OPERACION -> OPERACION . operador_igualacion OPERACION
    (30) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (31) OPERACION -> OPERACION . operador_mayor OPERACION
    (32) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (33) OPERACION -> OPERACION . operador_menor OPERACION
    (34) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (35) OPERACION -> OPERACION . operador_AND OPERACION
    (36) OPERACION -> OPERACION . operador_OR OPERACION
    (37) OPERACION -> OPERACION . operador_NOT OPERACION
    (38) OPERACION -> OPERACION . operador_igual OPERACION

    parentesis_cierra reduce using rule 23 (OPERACIONES -> OPERACION .)
    numero          reduce using rule 23 (OPERACIONES -> OPERACION .)
    operador_suma   shift and go to state 82
    operador_resta  shift and go to state 83
    operador_multiplicacion shift and go to state 84
    operador_divicion shift and go to state 85
    operador_resto  shift and go to state 86
    operador_igualacion shift and go to state 87
    operador_diferenciacion shift and go to state 88
    operador_mayor  shift and go to state 89
    operador_mayor_igual shift and go to state 90
    operador_menor  shift and go to state 91
    operador_menor_igual shift and go to state 92
    operador_AND    shift and go to state 93
    operador_OR     shift and go to state 94
    operador_NOT    shift and go to state 95
    operador_igual  shift and go to state 96


state 53

    (39) OPERACION -> numero .

    operador_suma   reduce using rule 39 (OPERACION -> numero .)
    operador_resta  reduce using rule 39 (OPERACION -> numero .)
    operador_multiplicacion reduce using rule 39 (OPERACION -> numero .)
    operador_divicion reduce using rule 39 (OPERACION -> numero .)
    operador_resto  reduce using rule 39 (OPERACION -> numero .)
    operador_igualacion reduce using rule 39 (OPERACION -> numero .)
    operador_diferenciacion reduce using rule 39 (OPERACION -> numero .)
    operador_mayor  reduce using rule 39 (OPERACION -> numero .)
    operador_mayor_igual reduce using rule 39 (OPERACION -> numero .)
    operador_menor  reduce using rule 39 (OPERACION -> numero .)
    operador_menor_igual reduce using rule 39 (OPERACION -> numero .)
    operador_AND    reduce using rule 39 (OPERACION -> numero .)
    operador_OR     reduce using rule 39 (OPERACION -> numero .)
    operador_NOT    reduce using rule 39 (OPERACION -> numero .)
    operador_igual  reduce using rule 39 (OPERACION -> numero .)
    parentesis_cierra reduce using rule 39 (OPERACION -> numero .)
    numero          reduce using rule 39 (OPERACION -> numero .)


state 54

    (16) PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while . OPERACION_FACTORIZADO punto_coma
    (77) OPERACION_FACTORIZADO -> . parentesis_abre OPERACIONES parentesis_cierra

    parentesis_abre shift and go to state 32

    OPERACION_FACTORIZADO          shift and go to state 97

state 55

    (78) INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES . llave_cierra

    llave_cierra    shift and go to state 98


state 56

    (40) INSTRUCCIONES -> DECLARACION .

    llave_cierra    reduce using rule 40 (INSTRUCCIONES -> DECLARACION .)


state 57

    (41) INSTRUCCIONES -> ASINGACION .

    llave_cierra    reduce using rule 41 (INSTRUCCIONES -> ASINGACION .)


state 58

    (42) INSTRUCCIONES -> PRODIF_ELSE .

    llave_cierra    reduce using rule 42 (INSTRUCCIONES -> PRODIF_ELSE .)


state 59

    (43) INSTRUCCIONES -> PRODIF .

    llave_cierra    reduce using rule 43 (INSTRUCCIONES -> PRODIF .)


state 60

    (44) INSTRUCCIONES -> PRODDO_WHILE .

    llave_cierra    reduce using rule 44 (INSTRUCCIONES -> PRODDO_WHILE .)


state 61

    (45) INSTRUCCIONES -> PRODWHILE .

    llave_cierra    reduce using rule 45 (INSTRUCCIONES -> PRODWHILE .)


state 62

    (46) INSTRUCCIONES -> PRODVOID .

    llave_cierra    reduce using rule 46 (INSTRUCCIONES -> PRODVOID .)


state 63

    (47) INSTRUCCIONES -> RETURN .

    llave_cierra    reduce using rule 47 (INSTRUCCIONES -> RETURN .)


state 64

    (48) INSTRUCCIONES -> BREAK .

    llave_cierra    reduce using rule 48 (INSTRUCCIONES -> BREAK .)


state 65

    (49) INSTRUCCIONES -> CONTINUE .

    llave_cierra    reduce using rule 49 (INSTRUCCIONES -> CONTINUE .)


state 66

    (50) INSTRUCCIONES -> LLAMADA .

    llave_cierra    reduce using rule 50 (INSTRUCCIONES -> LLAMADA .)


state 67

    (51) DECLARACION -> TIPO_DATO . id operador_igual DATO punto_coma

    id              shift and go to state 99


state 68

    (52) ASINGACION -> id . operador_igual DATO punto_coma
    (68) LLAMADA -> id . parentesis_abre ARGUMENTOS parentesis_cierra

    operador_igual  shift and go to state 38
    parentesis_abre shift and go to state 37


state 69

    (17) PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .

    reservada_if    reduce using rule 17 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_do    reduce using rule 17 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_while reduce using rule 17 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_void  reduce using rule 17 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    id              reduce using rule 17 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_return reduce using rule 17 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_break reduce using rule 17 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_continue reduce using rule 17 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_int        reduce using rule 17 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_double     reduce using rule 17 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_string     reduce using rule 17 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_char       reduce using rule 17 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_boolean    reduce using rule 17 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    $end            reduce using rule 17 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    llave_cierra    reduce using rule 17 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)


state 70

    (20) PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO . INSTRUCCIONES_FACTORIZADO
    (78) INSTRUCCIONES_FACTORIZADO -> . llave_abre INSTRUCCIONES llave_cierra

    llave_abre      shift and go to state 34

    INSTRUCCIONES_FACTORIZADO      shift and go to state 100

state 71

    (79) PARAMETROS_FACTORIZADO -> parentesis_abre . PARAMETROS parentesis_cierra
    (65) PARAMETROS -> . PARAMETROS coma PARAMETRO
    (66) PARAMETROS -> . PARAMETRO
    (67) PARAMETROS -> .
    (64) PARAMETRO -> . TIPO_DATO id
    (53) TIPO_DATO -> . tipo_int
    (54) TIPO_DATO -> . tipo_double
    (55) TIPO_DATO -> . tipo_string
    (56) TIPO_DATO -> . tipo_char
    (57) TIPO_DATO -> . tipo_boolean

    parentesis_cierra reduce using rule 67 (PARAMETROS -> .)
    coma            reduce using rule 67 (PARAMETROS -> .)
    tipo_int        shift and go to state 25
    tipo_double     shift and go to state 26
    tipo_string     shift and go to state 27
    tipo_char       shift and go to state 28
    tipo_boolean    shift and go to state 29

    PARAMETROS                     shift and go to state 101
    PARAMETRO                      shift and go to state 102
    TIPO_DATO                      shift and go to state 103

state 72

    (68) LLAMADA -> id parentesis_abre ARGUMENTOS . parentesis_cierra
    (69) ARGUMENTOS -> ARGUMENTOS . coma ARGUMENTO

    parentesis_cierra shift and go to state 104
    coma            shift and go to state 105


state 73

    (70) ARGUMENTOS -> ARGUMENTO .

    parentesis_cierra reduce using rule 70 (ARGUMENTOS -> ARGUMENTO .)
    coma            reduce using rule 70 (ARGUMENTOS -> ARGUMENTO .)


state 74

    (72) ARGUMENTO -> DATO .

    parentesis_cierra reduce using rule 72 (ARGUMENTO -> DATO .)
    coma            reduce using rule 72 (ARGUMENTO -> DATO .)


state 75

    (52) ASINGACION -> id operador_igual DATO . punto_coma

    punto_coma      shift and go to state 106


state 76

    (21) PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO . INSTRUCCIONES_FACTORIZADO
    (78) INSTRUCCIONES_FACTORIZADO -> . llave_abre INSTRUCCIONES llave_cierra

    llave_abre      shift and go to state 34

    INSTRUCCIONES_FACTORIZADO      shift and go to state 107

state 77

    (51) DECLARACION -> TIPO_DATO id operador_igual . DATO punto_coma
    (58) DATO -> . numero
    (59) DATO -> . dato_double
    (60) DATO -> . dato_string
    (61) DATO -> . dato_char
    (62) DATO -> . dato_boolean_true
    (63) DATO -> . dato_boolean_false

    numero          shift and go to state 42
    dato_double     shift and go to state 43
    dato_string     shift and go to state 44
    dato_char       shift and go to state 45
    dato_boolean_true shift and go to state 46
    dato_boolean_false shift and go to state 47

    DATO                           shift and go to state 108

state 78

    (74) RETURN -> reservada_return DATO punto_coma .

    reservada_if    reduce using rule 74 (RETURN -> reservada_return DATO punto_coma .)
    reservada_do    reduce using rule 74 (RETURN -> reservada_return DATO punto_coma .)
    reservada_while reduce using rule 74 (RETURN -> reservada_return DATO punto_coma .)
    reservada_void  reduce using rule 74 (RETURN -> reservada_return DATO punto_coma .)
    id              reduce using rule 74 (RETURN -> reservada_return DATO punto_coma .)
    reservada_return reduce using rule 74 (RETURN -> reservada_return DATO punto_coma .)
    reservada_break reduce using rule 74 (RETURN -> reservada_return DATO punto_coma .)
    reservada_continue reduce using rule 74 (RETURN -> reservada_return DATO punto_coma .)
    tipo_int        reduce using rule 74 (RETURN -> reservada_return DATO punto_coma .)
    tipo_double     reduce using rule 74 (RETURN -> reservada_return DATO punto_coma .)
    tipo_string     reduce using rule 74 (RETURN -> reservada_return DATO punto_coma .)
    tipo_char       reduce using rule 74 (RETURN -> reservada_return DATO punto_coma .)
    tipo_boolean    reduce using rule 74 (RETURN -> reservada_return DATO punto_coma .)
    $end            reduce using rule 74 (RETURN -> reservada_return DATO punto_coma .)
    llave_cierra    reduce using rule 74 (RETURN -> reservada_return DATO punto_coma .)


state 79

    (18) PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else . INSTRUCCIONES_FACTORIZADO
    (78) INSTRUCCIONES_FACTORIZADO -> . llave_abre INSTRUCCIONES llave_cierra

    llave_abre      shift and go to state 34

    INSTRUCCIONES_FACTORIZADO      shift and go to state 109

state 80

    (77) OPERACION_FACTORIZADO -> parentesis_abre OPERACIONES parentesis_cierra .

    llave_abre      reduce using rule 77 (OPERACION_FACTORIZADO -> parentesis_abre OPERACIONES parentesis_cierra .)
    punto_coma      reduce using rule 77 (OPERACION_FACTORIZADO -> parentesis_abre OPERACIONES parentesis_cierra .)


state 81

    (22) OPERACIONES -> OPERACIONES OPERACION .
    (24) OPERACION -> OPERACION . operador_suma OPERACION
    (25) OPERACION -> OPERACION . operador_resta OPERACION
    (26) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (27) OPERACION -> OPERACION . operador_divicion OPERACION
    (28) OPERACION -> OPERACION . operador_resto OPERACION
    (29) OPERACION -> OPERACION . operador_igualacion OPERACION
    (30) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (31) OPERACION -> OPERACION . operador_mayor OPERACION
    (32) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (33) OPERACION -> OPERACION . operador_menor OPERACION
    (34) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (35) OPERACION -> OPERACION . operador_AND OPERACION
    (36) OPERACION -> OPERACION . operador_OR OPERACION
    (37) OPERACION -> OPERACION . operador_NOT OPERACION
    (38) OPERACION -> OPERACION . operador_igual OPERACION

    parentesis_cierra reduce using rule 22 (OPERACIONES -> OPERACIONES OPERACION .)
    numero          reduce using rule 22 (OPERACIONES -> OPERACIONES OPERACION .)
    operador_suma   shift and go to state 82
    operador_resta  shift and go to state 83
    operador_multiplicacion shift and go to state 84
    operador_divicion shift and go to state 85
    operador_resto  shift and go to state 86
    operador_igualacion shift and go to state 87
    operador_diferenciacion shift and go to state 88
    operador_mayor  shift and go to state 89
    operador_mayor_igual shift and go to state 90
    operador_menor  shift and go to state 91
    operador_menor_igual shift and go to state 92
    operador_AND    shift and go to state 93
    operador_OR     shift and go to state 94
    operador_NOT    shift and go to state 95
    operador_igual  shift and go to state 96


state 82

    (24) OPERACION -> OPERACION operador_suma . OPERACION
    (24) OPERACION -> . OPERACION operador_suma OPERACION
    (25) OPERACION -> . OPERACION operador_resta OPERACION
    (26) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (27) OPERACION -> . OPERACION operador_divicion OPERACION
    (28) OPERACION -> . OPERACION operador_resto OPERACION
    (29) OPERACION -> . OPERACION operador_igualacion OPERACION
    (30) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (31) OPERACION -> . OPERACION operador_mayor OPERACION
    (32) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (33) OPERACION -> . OPERACION operador_menor OPERACION
    (34) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (35) OPERACION -> . OPERACION operador_AND OPERACION
    (36) OPERACION -> . OPERACION operador_OR OPERACION
    (37) OPERACION -> . OPERACION operador_NOT OPERACION
    (38) OPERACION -> . OPERACION operador_igual OPERACION
    (39) OPERACION -> . numero

    numero          shift and go to state 53

    OPERACION                      shift and go to state 110

state 83

    (25) OPERACION -> OPERACION operador_resta . OPERACION
    (24) OPERACION -> . OPERACION operador_suma OPERACION
    (25) OPERACION -> . OPERACION operador_resta OPERACION
    (26) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (27) OPERACION -> . OPERACION operador_divicion OPERACION
    (28) OPERACION -> . OPERACION operador_resto OPERACION
    (29) OPERACION -> . OPERACION operador_igualacion OPERACION
    (30) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (31) OPERACION -> . OPERACION operador_mayor OPERACION
    (32) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (33) OPERACION -> . OPERACION operador_menor OPERACION
    (34) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (35) OPERACION -> . OPERACION operador_AND OPERACION
    (36) OPERACION -> . OPERACION operador_OR OPERACION
    (37) OPERACION -> . OPERACION operador_NOT OPERACION
    (38) OPERACION -> . OPERACION operador_igual OPERACION
    (39) OPERACION -> . numero

    numero          shift and go to state 53

    OPERACION                      shift and go to state 111

state 84

    (26) OPERACION -> OPERACION operador_multiplicacion . OPERACION
    (24) OPERACION -> . OPERACION operador_suma OPERACION
    (25) OPERACION -> . OPERACION operador_resta OPERACION
    (26) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (27) OPERACION -> . OPERACION operador_divicion OPERACION
    (28) OPERACION -> . OPERACION operador_resto OPERACION
    (29) OPERACION -> . OPERACION operador_igualacion OPERACION
    (30) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (31) OPERACION -> . OPERACION operador_mayor OPERACION
    (32) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (33) OPERACION -> . OPERACION operador_menor OPERACION
    (34) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (35) OPERACION -> . OPERACION operador_AND OPERACION
    (36) OPERACION -> . OPERACION operador_OR OPERACION
    (37) OPERACION -> . OPERACION operador_NOT OPERACION
    (38) OPERACION -> . OPERACION operador_igual OPERACION
    (39) OPERACION -> . numero

    numero          shift and go to state 53

    OPERACION                      shift and go to state 112

state 85

    (27) OPERACION -> OPERACION operador_divicion . OPERACION
    (24) OPERACION -> . OPERACION operador_suma OPERACION
    (25) OPERACION -> . OPERACION operador_resta OPERACION
    (26) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (27) OPERACION -> . OPERACION operador_divicion OPERACION
    (28) OPERACION -> . OPERACION operador_resto OPERACION
    (29) OPERACION -> . OPERACION operador_igualacion OPERACION
    (30) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (31) OPERACION -> . OPERACION operador_mayor OPERACION
    (32) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (33) OPERACION -> . OPERACION operador_menor OPERACION
    (34) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (35) OPERACION -> . OPERACION operador_AND OPERACION
    (36) OPERACION -> . OPERACION operador_OR OPERACION
    (37) OPERACION -> . OPERACION operador_NOT OPERACION
    (38) OPERACION -> . OPERACION operador_igual OPERACION
    (39) OPERACION -> . numero

    numero          shift and go to state 53

    OPERACION                      shift and go to state 113

state 86

    (28) OPERACION -> OPERACION operador_resto . OPERACION
    (24) OPERACION -> . OPERACION operador_suma OPERACION
    (25) OPERACION -> . OPERACION operador_resta OPERACION
    (26) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (27) OPERACION -> . OPERACION operador_divicion OPERACION
    (28) OPERACION -> . OPERACION operador_resto OPERACION
    (29) OPERACION -> . OPERACION operador_igualacion OPERACION
    (30) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (31) OPERACION -> . OPERACION operador_mayor OPERACION
    (32) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (33) OPERACION -> . OPERACION operador_menor OPERACION
    (34) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (35) OPERACION -> . OPERACION operador_AND OPERACION
    (36) OPERACION -> . OPERACION operador_OR OPERACION
    (37) OPERACION -> . OPERACION operador_NOT OPERACION
    (38) OPERACION -> . OPERACION operador_igual OPERACION
    (39) OPERACION -> . numero

    numero          shift and go to state 53

    OPERACION                      shift and go to state 114

state 87

    (29) OPERACION -> OPERACION operador_igualacion . OPERACION
    (24) OPERACION -> . OPERACION operador_suma OPERACION
    (25) OPERACION -> . OPERACION operador_resta OPERACION
    (26) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (27) OPERACION -> . OPERACION operador_divicion OPERACION
    (28) OPERACION -> . OPERACION operador_resto OPERACION
    (29) OPERACION -> . OPERACION operador_igualacion OPERACION
    (30) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (31) OPERACION -> . OPERACION operador_mayor OPERACION
    (32) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (33) OPERACION -> . OPERACION operador_menor OPERACION
    (34) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (35) OPERACION -> . OPERACION operador_AND OPERACION
    (36) OPERACION -> . OPERACION operador_OR OPERACION
    (37) OPERACION -> . OPERACION operador_NOT OPERACION
    (38) OPERACION -> . OPERACION operador_igual OPERACION
    (39) OPERACION -> . numero

    numero          shift and go to state 53

    OPERACION                      shift and go to state 115

state 88

    (30) OPERACION -> OPERACION operador_diferenciacion . OPERACION
    (24) OPERACION -> . OPERACION operador_suma OPERACION
    (25) OPERACION -> . OPERACION operador_resta OPERACION
    (26) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (27) OPERACION -> . OPERACION operador_divicion OPERACION
    (28) OPERACION -> . OPERACION operador_resto OPERACION
    (29) OPERACION -> . OPERACION operador_igualacion OPERACION
    (30) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (31) OPERACION -> . OPERACION operador_mayor OPERACION
    (32) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (33) OPERACION -> . OPERACION operador_menor OPERACION
    (34) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (35) OPERACION -> . OPERACION operador_AND OPERACION
    (36) OPERACION -> . OPERACION operador_OR OPERACION
    (37) OPERACION -> . OPERACION operador_NOT OPERACION
    (38) OPERACION -> . OPERACION operador_igual OPERACION
    (39) OPERACION -> . numero

    numero          shift and go to state 53

    OPERACION                      shift and go to state 116

state 89

    (31) OPERACION -> OPERACION operador_mayor . OPERACION
    (24) OPERACION -> . OPERACION operador_suma OPERACION
    (25) OPERACION -> . OPERACION operador_resta OPERACION
    (26) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (27) OPERACION -> . OPERACION operador_divicion OPERACION
    (28) OPERACION -> . OPERACION operador_resto OPERACION
    (29) OPERACION -> . OPERACION operador_igualacion OPERACION
    (30) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (31) OPERACION -> . OPERACION operador_mayor OPERACION
    (32) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (33) OPERACION -> . OPERACION operador_menor OPERACION
    (34) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (35) OPERACION -> . OPERACION operador_AND OPERACION
    (36) OPERACION -> . OPERACION operador_OR OPERACION
    (37) OPERACION -> . OPERACION operador_NOT OPERACION
    (38) OPERACION -> . OPERACION operador_igual OPERACION
    (39) OPERACION -> . numero

    numero          shift and go to state 53

    OPERACION                      shift and go to state 117

state 90

    (32) OPERACION -> OPERACION operador_mayor_igual . OPERACION
    (24) OPERACION -> . OPERACION operador_suma OPERACION
    (25) OPERACION -> . OPERACION operador_resta OPERACION
    (26) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (27) OPERACION -> . OPERACION operador_divicion OPERACION
    (28) OPERACION -> . OPERACION operador_resto OPERACION
    (29) OPERACION -> . OPERACION operador_igualacion OPERACION
    (30) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (31) OPERACION -> . OPERACION operador_mayor OPERACION
    (32) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (33) OPERACION -> . OPERACION operador_menor OPERACION
    (34) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (35) OPERACION -> . OPERACION operador_AND OPERACION
    (36) OPERACION -> . OPERACION operador_OR OPERACION
    (37) OPERACION -> . OPERACION operador_NOT OPERACION
    (38) OPERACION -> . OPERACION operador_igual OPERACION
    (39) OPERACION -> . numero

    numero          shift and go to state 53

    OPERACION                      shift and go to state 118

state 91

    (33) OPERACION -> OPERACION operador_menor . OPERACION
    (24) OPERACION -> . OPERACION operador_suma OPERACION
    (25) OPERACION -> . OPERACION operador_resta OPERACION
    (26) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (27) OPERACION -> . OPERACION operador_divicion OPERACION
    (28) OPERACION -> . OPERACION operador_resto OPERACION
    (29) OPERACION -> . OPERACION operador_igualacion OPERACION
    (30) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (31) OPERACION -> . OPERACION operador_mayor OPERACION
    (32) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (33) OPERACION -> . OPERACION operador_menor OPERACION
    (34) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (35) OPERACION -> . OPERACION operador_AND OPERACION
    (36) OPERACION -> . OPERACION operador_OR OPERACION
    (37) OPERACION -> . OPERACION operador_NOT OPERACION
    (38) OPERACION -> . OPERACION operador_igual OPERACION
    (39) OPERACION -> . numero

    numero          shift and go to state 53

    OPERACION                      shift and go to state 119

state 92

    (34) OPERACION -> OPERACION operador_menor_igual . OPERACION
    (24) OPERACION -> . OPERACION operador_suma OPERACION
    (25) OPERACION -> . OPERACION operador_resta OPERACION
    (26) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (27) OPERACION -> . OPERACION operador_divicion OPERACION
    (28) OPERACION -> . OPERACION operador_resto OPERACION
    (29) OPERACION -> . OPERACION operador_igualacion OPERACION
    (30) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (31) OPERACION -> . OPERACION operador_mayor OPERACION
    (32) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (33) OPERACION -> . OPERACION operador_menor OPERACION
    (34) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (35) OPERACION -> . OPERACION operador_AND OPERACION
    (36) OPERACION -> . OPERACION operador_OR OPERACION
    (37) OPERACION -> . OPERACION operador_NOT OPERACION
    (38) OPERACION -> . OPERACION operador_igual OPERACION
    (39) OPERACION -> . numero

    numero          shift and go to state 53

    OPERACION                      shift and go to state 120

state 93

    (35) OPERACION -> OPERACION operador_AND . OPERACION
    (24) OPERACION -> . OPERACION operador_suma OPERACION
    (25) OPERACION -> . OPERACION operador_resta OPERACION
    (26) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (27) OPERACION -> . OPERACION operador_divicion OPERACION
    (28) OPERACION -> . OPERACION operador_resto OPERACION
    (29) OPERACION -> . OPERACION operador_igualacion OPERACION
    (30) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (31) OPERACION -> . OPERACION operador_mayor OPERACION
    (32) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (33) OPERACION -> . OPERACION operador_menor OPERACION
    (34) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (35) OPERACION -> . OPERACION operador_AND OPERACION
    (36) OPERACION -> . OPERACION operador_OR OPERACION
    (37) OPERACION -> . OPERACION operador_NOT OPERACION
    (38) OPERACION -> . OPERACION operador_igual OPERACION
    (39) OPERACION -> . numero

    numero          shift and go to state 53

    OPERACION                      shift and go to state 121

state 94

    (36) OPERACION -> OPERACION operador_OR . OPERACION
    (24) OPERACION -> . OPERACION operador_suma OPERACION
    (25) OPERACION -> . OPERACION operador_resta OPERACION
    (26) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (27) OPERACION -> . OPERACION operador_divicion OPERACION
    (28) OPERACION -> . OPERACION operador_resto OPERACION
    (29) OPERACION -> . OPERACION operador_igualacion OPERACION
    (30) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (31) OPERACION -> . OPERACION operador_mayor OPERACION
    (32) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (33) OPERACION -> . OPERACION operador_menor OPERACION
    (34) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (35) OPERACION -> . OPERACION operador_AND OPERACION
    (36) OPERACION -> . OPERACION operador_OR OPERACION
    (37) OPERACION -> . OPERACION operador_NOT OPERACION
    (38) OPERACION -> . OPERACION operador_igual OPERACION
    (39) OPERACION -> . numero

    numero          shift and go to state 53

    OPERACION                      shift and go to state 122

state 95

    (37) OPERACION -> OPERACION operador_NOT . OPERACION
    (24) OPERACION -> . OPERACION operador_suma OPERACION
    (25) OPERACION -> . OPERACION operador_resta OPERACION
    (26) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (27) OPERACION -> . OPERACION operador_divicion OPERACION
    (28) OPERACION -> . OPERACION operador_resto OPERACION
    (29) OPERACION -> . OPERACION operador_igualacion OPERACION
    (30) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (31) OPERACION -> . OPERACION operador_mayor OPERACION
    (32) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (33) OPERACION -> . OPERACION operador_menor OPERACION
    (34) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (35) OPERACION -> . OPERACION operador_AND OPERACION
    (36) OPERACION -> . OPERACION operador_OR OPERACION
    (37) OPERACION -> . OPERACION operador_NOT OPERACION
    (38) OPERACION -> . OPERACION operador_igual OPERACION
    (39) OPERACION -> . numero

    numero          shift and go to state 53

    OPERACION                      shift and go to state 123

state 96

    (38) OPERACION -> OPERACION operador_igual . OPERACION
    (24) OPERACION -> . OPERACION operador_suma OPERACION
    (25) OPERACION -> . OPERACION operador_resta OPERACION
    (26) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (27) OPERACION -> . OPERACION operador_divicion OPERACION
    (28) OPERACION -> . OPERACION operador_resto OPERACION
    (29) OPERACION -> . OPERACION operador_igualacion OPERACION
    (30) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (31) OPERACION -> . OPERACION operador_mayor OPERACION
    (32) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (33) OPERACION -> . OPERACION operador_menor OPERACION
    (34) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (35) OPERACION -> . OPERACION operador_AND OPERACION
    (36) OPERACION -> . OPERACION operador_OR OPERACION
    (37) OPERACION -> . OPERACION operador_NOT OPERACION
    (38) OPERACION -> . OPERACION operador_igual OPERACION
    (39) OPERACION -> . numero

    numero          shift and go to state 53

    OPERACION                      shift and go to state 124

state 97

    (16) PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO . punto_coma

    punto_coma      shift and go to state 125


state 98

    (78) INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .

    reservada_while reduce using rule 78 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    reservada_else  reduce using rule 78 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    reservada_if    reduce using rule 78 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    reservada_do    reduce using rule 78 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    reservada_void  reduce using rule 78 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    id              reduce using rule 78 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    reservada_return reduce using rule 78 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    reservada_break reduce using rule 78 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    reservada_continue reduce using rule 78 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    tipo_int        reduce using rule 78 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    tipo_double     reduce using rule 78 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    tipo_string     reduce using rule 78 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    tipo_char       reduce using rule 78 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    tipo_boolean    reduce using rule 78 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    $end            reduce using rule 78 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    llave_cierra    reduce using rule 78 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)


state 99

    (51) DECLARACION -> TIPO_DATO id . operador_igual DATO punto_coma

    operador_igual  shift and go to state 77


state 100

    (20) PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .

    reservada_if    reduce using rule 20 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_do    reduce using rule 20 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_while reduce using rule 20 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_void  reduce using rule 20 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    id              reduce using rule 20 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_return reduce using rule 20 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_break reduce using rule 20 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_continue reduce using rule 20 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_int        reduce using rule 20 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_double     reduce using rule 20 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_string     reduce using rule 20 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_char       reduce using rule 20 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_boolean    reduce using rule 20 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    $end            reduce using rule 20 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    llave_cierra    reduce using rule 20 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)


state 101

    (79) PARAMETROS_FACTORIZADO -> parentesis_abre PARAMETROS . parentesis_cierra
    (65) PARAMETROS -> PARAMETROS . coma PARAMETRO

    parentesis_cierra shift and go to state 126
    coma            shift and go to state 127


state 102

    (66) PARAMETROS -> PARAMETRO .

    parentesis_cierra reduce using rule 66 (PARAMETROS -> PARAMETRO .)
    coma            reduce using rule 66 (PARAMETROS -> PARAMETRO .)


state 103

    (64) PARAMETRO -> TIPO_DATO . id

    id              shift and go to state 128


state 104

    (68) LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra .

    reservada_if    reduce using rule 68 (LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra .)
    reservada_do    reduce using rule 68 (LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra .)
    reservada_while reduce using rule 68 (LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra .)
    reservada_void  reduce using rule 68 (LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra .)
    id              reduce using rule 68 (LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra .)
    reservada_return reduce using rule 68 (LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra .)
    reservada_break reduce using rule 68 (LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra .)
    reservada_continue reduce using rule 68 (LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra .)
    tipo_int        reduce using rule 68 (LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra .)
    tipo_double     reduce using rule 68 (LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra .)
    tipo_string     reduce using rule 68 (LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra .)
    tipo_char       reduce using rule 68 (LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra .)
    tipo_boolean    reduce using rule 68 (LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra .)
    $end            reduce using rule 68 (LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra .)
    llave_cierra    reduce using rule 68 (LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra .)


state 105

    (69) ARGUMENTOS -> ARGUMENTOS coma . ARGUMENTO
    (72) ARGUMENTO -> . DATO
    (58) DATO -> . numero
    (59) DATO -> . dato_double
    (60) DATO -> . dato_string
    (61) DATO -> . dato_char
    (62) DATO -> . dato_boolean_true
    (63) DATO -> . dato_boolean_false

    numero          shift and go to state 42
    dato_double     shift and go to state 43
    dato_string     shift and go to state 44
    dato_char       shift and go to state 45
    dato_boolean_true shift and go to state 46
    dato_boolean_false shift and go to state 47

    ARGUMENTO                      shift and go to state 129
    DATO                           shift and go to state 74

state 106

    (52) ASINGACION -> id operador_igual DATO punto_coma .

    reservada_if    reduce using rule 52 (ASINGACION -> id operador_igual DATO punto_coma .)
    reservada_do    reduce using rule 52 (ASINGACION -> id operador_igual DATO punto_coma .)
    reservada_while reduce using rule 52 (ASINGACION -> id operador_igual DATO punto_coma .)
    reservada_void  reduce using rule 52 (ASINGACION -> id operador_igual DATO punto_coma .)
    id              reduce using rule 52 (ASINGACION -> id operador_igual DATO punto_coma .)
    reservada_return reduce using rule 52 (ASINGACION -> id operador_igual DATO punto_coma .)
    reservada_break reduce using rule 52 (ASINGACION -> id operador_igual DATO punto_coma .)
    reservada_continue reduce using rule 52 (ASINGACION -> id operador_igual DATO punto_coma .)
    tipo_int        reduce using rule 52 (ASINGACION -> id operador_igual DATO punto_coma .)
    tipo_double     reduce using rule 52 (ASINGACION -> id operador_igual DATO punto_coma .)
    tipo_string     reduce using rule 52 (ASINGACION -> id operador_igual DATO punto_coma .)
    tipo_char       reduce using rule 52 (ASINGACION -> id operador_igual DATO punto_coma .)
    tipo_boolean    reduce using rule 52 (ASINGACION -> id operador_igual DATO punto_coma .)
    $end            reduce using rule 52 (ASINGACION -> id operador_igual DATO punto_coma .)
    llave_cierra    reduce using rule 52 (ASINGACION -> id operador_igual DATO punto_coma .)


state 107

    (21) PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .

    reservada_if    reduce using rule 21 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_do    reduce using rule 21 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_while reduce using rule 21 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_void  reduce using rule 21 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    id              reduce using rule 21 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_return reduce using rule 21 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_break reduce using rule 21 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_continue reduce using rule 21 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_int        reduce using rule 21 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_double     reduce using rule 21 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_string     reduce using rule 21 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_char       reduce using rule 21 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_boolean    reduce using rule 21 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    $end            reduce using rule 21 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)


state 108

    (51) DECLARACION -> TIPO_DATO id operador_igual DATO . punto_coma

    punto_coma      shift and go to state 130


state 109

    (18) PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .

    reservada_if    reduce using rule 18 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    reservada_do    reduce using rule 18 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    reservada_while reduce using rule 18 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    reservada_void  reduce using rule 18 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    id              reduce using rule 18 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    reservada_return reduce using rule 18 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    reservada_break reduce using rule 18 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    reservada_continue reduce using rule 18 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    tipo_int        reduce using rule 18 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    tipo_double     reduce using rule 18 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    tipo_string     reduce using rule 18 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    tipo_char       reduce using rule 18 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    tipo_boolean    reduce using rule 18 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    $end            reduce using rule 18 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    llave_cierra    reduce using rule 18 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)


state 110

    (24) OPERACION -> OPERACION operador_suma OPERACION .
    (24) OPERACION -> OPERACION . operador_suma OPERACION
    (25) OPERACION -> OPERACION . operador_resta OPERACION
    (26) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (27) OPERACION -> OPERACION . operador_divicion OPERACION
    (28) OPERACION -> OPERACION . operador_resto OPERACION
    (29) OPERACION -> OPERACION . operador_igualacion OPERACION
    (30) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (31) OPERACION -> OPERACION . operador_mayor OPERACION
    (32) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (33) OPERACION -> OPERACION . operador_menor OPERACION
    (34) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (35) OPERACION -> OPERACION . operador_AND OPERACION
    (36) OPERACION -> OPERACION . operador_OR OPERACION
    (37) OPERACION -> OPERACION . operador_NOT OPERACION
    (38) OPERACION -> OPERACION . operador_igual OPERACION

    operador_suma   reduce using rule 24 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_resta  reduce using rule 24 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_divicion reduce using rule 24 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_igualacion reduce using rule 24 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_diferenciacion reduce using rule 24 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_mayor  reduce using rule 24 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_mayor_igual reduce using rule 24 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_menor  reduce using rule 24 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_menor_igual reduce using rule 24 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_AND    reduce using rule 24 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_OR     reduce using rule 24 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_igual  reduce using rule 24 (OPERACION -> OPERACION operador_suma OPERACION .)
    parentesis_cierra reduce using rule 24 (OPERACION -> OPERACION operador_suma OPERACION .)
    numero          reduce using rule 24 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_multiplicacion shift and go to state 84
    operador_resto  shift and go to state 86
    operador_NOT    shift and go to state 95

  ! operador_multiplicacion [ reduce using rule 24 (OPERACION -> OPERACION operador_suma OPERACION .) ]
  ! operador_resto  [ reduce using rule 24 (OPERACION -> OPERACION operador_suma OPERACION .) ]
  ! operador_NOT    [ reduce using rule 24 (OPERACION -> OPERACION operador_suma OPERACION .) ]
  ! operador_suma   [ shift and go to state 82 ]
  ! operador_resta  [ shift and go to state 83 ]
  ! operador_divicion [ shift and go to state 85 ]
  ! operador_igualacion [ shift and go to state 87 ]
  ! operador_diferenciacion [ shift and go to state 88 ]
  ! operador_mayor  [ shift and go to state 89 ]
  ! operador_mayor_igual [ shift and go to state 90 ]
  ! operador_menor  [ shift and go to state 91 ]
  ! operador_menor_igual [ shift and go to state 92 ]
  ! operador_AND    [ shift and go to state 93 ]
  ! operador_OR     [ shift and go to state 94 ]
  ! operador_igual  [ shift and go to state 96 ]


state 111

    (25) OPERACION -> OPERACION operador_resta OPERACION .
    (24) OPERACION -> OPERACION . operador_suma OPERACION
    (25) OPERACION -> OPERACION . operador_resta OPERACION
    (26) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (27) OPERACION -> OPERACION . operador_divicion OPERACION
    (28) OPERACION -> OPERACION . operador_resto OPERACION
    (29) OPERACION -> OPERACION . operador_igualacion OPERACION
    (30) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (31) OPERACION -> OPERACION . operador_mayor OPERACION
    (32) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (33) OPERACION -> OPERACION . operador_menor OPERACION
    (34) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (35) OPERACION -> OPERACION . operador_AND OPERACION
    (36) OPERACION -> OPERACION . operador_OR OPERACION
    (37) OPERACION -> OPERACION . operador_NOT OPERACION
    (38) OPERACION -> OPERACION . operador_igual OPERACION

    operador_suma   reduce using rule 25 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_resta  reduce using rule 25 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_divicion reduce using rule 25 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_igualacion reduce using rule 25 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_diferenciacion reduce using rule 25 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_mayor  reduce using rule 25 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_mayor_igual reduce using rule 25 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_menor  reduce using rule 25 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_menor_igual reduce using rule 25 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_AND    reduce using rule 25 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_OR     reduce using rule 25 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_igual  reduce using rule 25 (OPERACION -> OPERACION operador_resta OPERACION .)
    parentesis_cierra reduce using rule 25 (OPERACION -> OPERACION operador_resta OPERACION .)
    numero          reduce using rule 25 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_multiplicacion shift and go to state 84
    operador_resto  shift and go to state 86
    operador_NOT    shift and go to state 95

  ! operador_multiplicacion [ reduce using rule 25 (OPERACION -> OPERACION operador_resta OPERACION .) ]
  ! operador_resto  [ reduce using rule 25 (OPERACION -> OPERACION operador_resta OPERACION .) ]
  ! operador_NOT    [ reduce using rule 25 (OPERACION -> OPERACION operador_resta OPERACION .) ]
  ! operador_suma   [ shift and go to state 82 ]
  ! operador_resta  [ shift and go to state 83 ]
  ! operador_divicion [ shift and go to state 85 ]
  ! operador_igualacion [ shift and go to state 87 ]
  ! operador_diferenciacion [ shift and go to state 88 ]
  ! operador_mayor  [ shift and go to state 89 ]
  ! operador_mayor_igual [ shift and go to state 90 ]
  ! operador_menor  [ shift and go to state 91 ]
  ! operador_menor_igual [ shift and go to state 92 ]
  ! operador_AND    [ shift and go to state 93 ]
  ! operador_OR     [ shift and go to state 94 ]
  ! operador_igual  [ shift and go to state 96 ]


state 112

    (26) OPERACION -> OPERACION operador_multiplicacion OPERACION .
    (24) OPERACION -> OPERACION . operador_suma OPERACION
    (25) OPERACION -> OPERACION . operador_resta OPERACION
    (26) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (27) OPERACION -> OPERACION . operador_divicion OPERACION
    (28) OPERACION -> OPERACION . operador_resto OPERACION
    (29) OPERACION -> OPERACION . operador_igualacion OPERACION
    (30) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (31) OPERACION -> OPERACION . operador_mayor OPERACION
    (32) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (33) OPERACION -> OPERACION . operador_menor OPERACION
    (34) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (35) OPERACION -> OPERACION . operador_AND OPERACION
    (36) OPERACION -> OPERACION . operador_OR OPERACION
    (37) OPERACION -> OPERACION . operador_NOT OPERACION
    (38) OPERACION -> OPERACION . operador_igual OPERACION

    operador_suma   reduce using rule 26 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_resta  reduce using rule 26 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_multiplicacion reduce using rule 26 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_divicion reduce using rule 26 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_resto  reduce using rule 26 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_igualacion reduce using rule 26 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_diferenciacion reduce using rule 26 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_mayor  reduce using rule 26 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_mayor_igual reduce using rule 26 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_menor  reduce using rule 26 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_menor_igual reduce using rule 26 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_AND    reduce using rule 26 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_OR     reduce using rule 26 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_igual  reduce using rule 26 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    parentesis_cierra reduce using rule 26 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    numero          reduce using rule 26 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_NOT    shift and go to state 95

  ! operador_NOT    [ reduce using rule 26 (OPERACION -> OPERACION operador_multiplicacion OPERACION .) ]
  ! operador_suma   [ shift and go to state 82 ]
  ! operador_resta  [ shift and go to state 83 ]
  ! operador_multiplicacion [ shift and go to state 84 ]
  ! operador_divicion [ shift and go to state 85 ]
  ! operador_resto  [ shift and go to state 86 ]
  ! operador_igualacion [ shift and go to state 87 ]
  ! operador_diferenciacion [ shift and go to state 88 ]
  ! operador_mayor  [ shift and go to state 89 ]
  ! operador_mayor_igual [ shift and go to state 90 ]
  ! operador_menor  [ shift and go to state 91 ]
  ! operador_menor_igual [ shift and go to state 92 ]
  ! operador_AND    [ shift and go to state 93 ]
  ! operador_OR     [ shift and go to state 94 ]
  ! operador_igual  [ shift and go to state 96 ]


state 113

    (27) OPERACION -> OPERACION operador_divicion OPERACION .
    (24) OPERACION -> OPERACION . operador_suma OPERACION
    (25) OPERACION -> OPERACION . operador_resta OPERACION
    (26) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (27) OPERACION -> OPERACION . operador_divicion OPERACION
    (28) OPERACION -> OPERACION . operador_resto OPERACION
    (29) OPERACION -> OPERACION . operador_igualacion OPERACION
    (30) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (31) OPERACION -> OPERACION . operador_mayor OPERACION
    (32) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (33) OPERACION -> OPERACION . operador_menor OPERACION
    (34) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (35) OPERACION -> OPERACION . operador_AND OPERACION
    (36) OPERACION -> OPERACION . operador_OR OPERACION
    (37) OPERACION -> OPERACION . operador_NOT OPERACION
    (38) OPERACION -> OPERACION . operador_igual OPERACION

  ! shift/reduce conflict for operador_suma resolved as shift
  ! shift/reduce conflict for operador_resta resolved as shift
  ! shift/reduce conflict for operador_multiplicacion resolved as shift
  ! shift/reduce conflict for operador_divicion resolved as shift
  ! shift/reduce conflict for operador_resto resolved as shift
  ! shift/reduce conflict for operador_igualacion resolved as shift
  ! shift/reduce conflict for operador_diferenciacion resolved as shift
  ! shift/reduce conflict for operador_mayor resolved as shift
  ! shift/reduce conflict for operador_mayor_igual resolved as shift
  ! shift/reduce conflict for operador_menor resolved as shift
  ! shift/reduce conflict for operador_menor_igual resolved as shift
  ! shift/reduce conflict for operador_AND resolved as shift
  ! shift/reduce conflict for operador_OR resolved as shift
  ! shift/reduce conflict for operador_NOT resolved as shift
  ! shift/reduce conflict for operador_igual resolved as shift
    parentesis_cierra reduce using rule 27 (OPERACION -> OPERACION operador_divicion OPERACION .)
    numero          reduce using rule 27 (OPERACION -> OPERACION operador_divicion OPERACION .)
    operador_suma   shift and go to state 82
    operador_resta  shift and go to state 83
    operador_multiplicacion shift and go to state 84
    operador_divicion shift and go to state 85
    operador_resto  shift and go to state 86
    operador_igualacion shift and go to state 87
    operador_diferenciacion shift and go to state 88
    operador_mayor  shift and go to state 89
    operador_mayor_igual shift and go to state 90
    operador_menor  shift and go to state 91
    operador_menor_igual shift and go to state 92
    operador_AND    shift and go to state 93
    operador_OR     shift and go to state 94
    operador_NOT    shift and go to state 95
    operador_igual  shift and go to state 96

  ! operador_suma   [ reduce using rule 27 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_resta  [ reduce using rule 27 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 27 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_divicion [ reduce using rule 27 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_resto  [ reduce using rule 27 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_igualacion [ reduce using rule 27 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_diferenciacion [ reduce using rule 27 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_mayor  [ reduce using rule 27 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_mayor_igual [ reduce using rule 27 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_menor  [ reduce using rule 27 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_menor_igual [ reduce using rule 27 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_AND    [ reduce using rule 27 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_OR     [ reduce using rule 27 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_NOT    [ reduce using rule 27 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_igual  [ reduce using rule 27 (OPERACION -> OPERACION operador_divicion OPERACION .) ]


state 114

    (28) OPERACION -> OPERACION operador_resto OPERACION .
    (24) OPERACION -> OPERACION . operador_suma OPERACION
    (25) OPERACION -> OPERACION . operador_resta OPERACION
    (26) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (27) OPERACION -> OPERACION . operador_divicion OPERACION
    (28) OPERACION -> OPERACION . operador_resto OPERACION
    (29) OPERACION -> OPERACION . operador_igualacion OPERACION
    (30) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (31) OPERACION -> OPERACION . operador_mayor OPERACION
    (32) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (33) OPERACION -> OPERACION . operador_menor OPERACION
    (34) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (35) OPERACION -> OPERACION . operador_AND OPERACION
    (36) OPERACION -> OPERACION . operador_OR OPERACION
    (37) OPERACION -> OPERACION . operador_NOT OPERACION
    (38) OPERACION -> OPERACION . operador_igual OPERACION

    operador_suma   reduce using rule 28 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_resta  reduce using rule 28 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_multiplicacion reduce using rule 28 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_divicion reduce using rule 28 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_resto  reduce using rule 28 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_igualacion reduce using rule 28 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_diferenciacion reduce using rule 28 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_mayor  reduce using rule 28 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_mayor_igual reduce using rule 28 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_menor  reduce using rule 28 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_menor_igual reduce using rule 28 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_AND    reduce using rule 28 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_OR     reduce using rule 28 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_igual  reduce using rule 28 (OPERACION -> OPERACION operador_resto OPERACION .)
    parentesis_cierra reduce using rule 28 (OPERACION -> OPERACION operador_resto OPERACION .)
    numero          reduce using rule 28 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_NOT    shift and go to state 95

  ! operador_NOT    [ reduce using rule 28 (OPERACION -> OPERACION operador_resto OPERACION .) ]
  ! operador_suma   [ shift and go to state 82 ]
  ! operador_resta  [ shift and go to state 83 ]
  ! operador_multiplicacion [ shift and go to state 84 ]
  ! operador_divicion [ shift and go to state 85 ]
  ! operador_resto  [ shift and go to state 86 ]
  ! operador_igualacion [ shift and go to state 87 ]
  ! operador_diferenciacion [ shift and go to state 88 ]
  ! operador_mayor  [ shift and go to state 89 ]
  ! operador_mayor_igual [ shift and go to state 90 ]
  ! operador_menor  [ shift and go to state 91 ]
  ! operador_menor_igual [ shift and go to state 92 ]
  ! operador_AND    [ shift and go to state 93 ]
  ! operador_OR     [ shift and go to state 94 ]
  ! operador_igual  [ shift and go to state 96 ]


state 115

    (29) OPERACION -> OPERACION operador_igualacion OPERACION .
    (24) OPERACION -> OPERACION . operador_suma OPERACION
    (25) OPERACION -> OPERACION . operador_resta OPERACION
    (26) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (27) OPERACION -> OPERACION . operador_divicion OPERACION
    (28) OPERACION -> OPERACION . operador_resto OPERACION
    (29) OPERACION -> OPERACION . operador_igualacion OPERACION
    (30) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (31) OPERACION -> OPERACION . operador_mayor OPERACION
    (32) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (33) OPERACION -> OPERACION . operador_menor OPERACION
    (34) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (35) OPERACION -> OPERACION . operador_AND OPERACION
    (36) OPERACION -> OPERACION . operador_OR OPERACION
    (37) OPERACION -> OPERACION . operador_NOT OPERACION
    (38) OPERACION -> OPERACION . operador_igual OPERACION

    operador_divicion reduce using rule 29 (OPERACION -> OPERACION operador_igualacion OPERACION .)
    operador_igualacion reduce using rule 29 (OPERACION -> OPERACION operador_igualacion OPERACION .)
    operador_diferenciacion reduce using rule 29 (OPERACION -> OPERACION operador_igualacion OPERACION .)
    operador_AND    reduce using rule 29 (OPERACION -> OPERACION operador_igualacion OPERACION .)
    operador_OR     reduce using rule 29 (OPERACION -> OPERACION operador_igualacion OPERACION .)
    operador_igual  reduce using rule 29 (OPERACION -> OPERACION operador_igualacion OPERACION .)
    parentesis_cierra reduce using rule 29 (OPERACION -> OPERACION operador_igualacion OPERACION .)
    numero          reduce using rule 29 (OPERACION -> OPERACION operador_igualacion OPERACION .)
    operador_suma   shift and go to state 82
    operador_resta  shift and go to state 83
    operador_multiplicacion shift and go to state 84
    operador_resto  shift and go to state 86
    operador_mayor  shift and go to state 89
    operador_mayor_igual shift and go to state 90
    operador_menor  shift and go to state 91
    operador_menor_igual shift and go to state 92
    operador_NOT    shift and go to state 95

  ! operador_suma   [ reduce using rule 29 (OPERACION -> OPERACION operador_igualacion OPERACION .) ]
  ! operador_resta  [ reduce using rule 29 (OPERACION -> OPERACION operador_igualacion OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 29 (OPERACION -> OPERACION operador_igualacion OPERACION .) ]
  ! operador_resto  [ reduce using rule 29 (OPERACION -> OPERACION operador_igualacion OPERACION .) ]
  ! operador_mayor  [ reduce using rule 29 (OPERACION -> OPERACION operador_igualacion OPERACION .) ]
  ! operador_mayor_igual [ reduce using rule 29 (OPERACION -> OPERACION operador_igualacion OPERACION .) ]
  ! operador_menor  [ reduce using rule 29 (OPERACION -> OPERACION operador_igualacion OPERACION .) ]
  ! operador_menor_igual [ reduce using rule 29 (OPERACION -> OPERACION operador_igualacion OPERACION .) ]
  ! operador_NOT    [ reduce using rule 29 (OPERACION -> OPERACION operador_igualacion OPERACION .) ]
  ! operador_divicion [ shift and go to state 85 ]
  ! operador_igualacion [ shift and go to state 87 ]
  ! operador_diferenciacion [ shift and go to state 88 ]
  ! operador_AND    [ shift and go to state 93 ]
  ! operador_OR     [ shift and go to state 94 ]
  ! operador_igual  [ shift and go to state 96 ]


state 116

    (30) OPERACION -> OPERACION operador_diferenciacion OPERACION .
    (24) OPERACION -> OPERACION . operador_suma OPERACION
    (25) OPERACION -> OPERACION . operador_resta OPERACION
    (26) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (27) OPERACION -> OPERACION . operador_divicion OPERACION
    (28) OPERACION -> OPERACION . operador_resto OPERACION
    (29) OPERACION -> OPERACION . operador_igualacion OPERACION
    (30) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (31) OPERACION -> OPERACION . operador_mayor OPERACION
    (32) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (33) OPERACION -> OPERACION . operador_menor OPERACION
    (34) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (35) OPERACION -> OPERACION . operador_AND OPERACION
    (36) OPERACION -> OPERACION . operador_OR OPERACION
    (37) OPERACION -> OPERACION . operador_NOT OPERACION
    (38) OPERACION -> OPERACION . operador_igual OPERACION

    operador_divicion reduce using rule 30 (OPERACION -> OPERACION operador_diferenciacion OPERACION .)
    operador_igualacion reduce using rule 30 (OPERACION -> OPERACION operador_diferenciacion OPERACION .)
    operador_diferenciacion reduce using rule 30 (OPERACION -> OPERACION operador_diferenciacion OPERACION .)
    operador_AND    reduce using rule 30 (OPERACION -> OPERACION operador_diferenciacion OPERACION .)
    operador_OR     reduce using rule 30 (OPERACION -> OPERACION operador_diferenciacion OPERACION .)
    operador_igual  reduce using rule 30 (OPERACION -> OPERACION operador_diferenciacion OPERACION .)
    parentesis_cierra reduce using rule 30 (OPERACION -> OPERACION operador_diferenciacion OPERACION .)
    numero          reduce using rule 30 (OPERACION -> OPERACION operador_diferenciacion OPERACION .)
    operador_suma   shift and go to state 82
    operador_resta  shift and go to state 83
    operador_multiplicacion shift and go to state 84
    operador_resto  shift and go to state 86
    operador_mayor  shift and go to state 89
    operador_mayor_igual shift and go to state 90
    operador_menor  shift and go to state 91
    operador_menor_igual shift and go to state 92
    operador_NOT    shift and go to state 95

  ! operador_suma   [ reduce using rule 30 (OPERACION -> OPERACION operador_diferenciacion OPERACION .) ]
  ! operador_resta  [ reduce using rule 30 (OPERACION -> OPERACION operador_diferenciacion OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 30 (OPERACION -> OPERACION operador_diferenciacion OPERACION .) ]
  ! operador_resto  [ reduce using rule 30 (OPERACION -> OPERACION operador_diferenciacion OPERACION .) ]
  ! operador_mayor  [ reduce using rule 30 (OPERACION -> OPERACION operador_diferenciacion OPERACION .) ]
  ! operador_mayor_igual [ reduce using rule 30 (OPERACION -> OPERACION operador_diferenciacion OPERACION .) ]
  ! operador_menor  [ reduce using rule 30 (OPERACION -> OPERACION operador_diferenciacion OPERACION .) ]
  ! operador_menor_igual [ reduce using rule 30 (OPERACION -> OPERACION operador_diferenciacion OPERACION .) ]
  ! operador_NOT    [ reduce using rule 30 (OPERACION -> OPERACION operador_diferenciacion OPERACION .) ]
  ! operador_divicion [ shift and go to state 85 ]
  ! operador_igualacion [ shift and go to state 87 ]
  ! operador_diferenciacion [ shift and go to state 88 ]
  ! operador_AND    [ shift and go to state 93 ]
  ! operador_OR     [ shift and go to state 94 ]
  ! operador_igual  [ shift and go to state 96 ]


state 117

    (31) OPERACION -> OPERACION operador_mayor OPERACION .
    (24) OPERACION -> OPERACION . operador_suma OPERACION
    (25) OPERACION -> OPERACION . operador_resta OPERACION
    (26) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (27) OPERACION -> OPERACION . operador_divicion OPERACION
    (28) OPERACION -> OPERACION . operador_resto OPERACION
    (29) OPERACION -> OPERACION . operador_igualacion OPERACION
    (30) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (31) OPERACION -> OPERACION . operador_mayor OPERACION
    (32) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (33) OPERACION -> OPERACION . operador_menor OPERACION
    (34) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (35) OPERACION -> OPERACION . operador_AND OPERACION
    (36) OPERACION -> OPERACION . operador_OR OPERACION
    (37) OPERACION -> OPERACION . operador_NOT OPERACION
    (38) OPERACION -> OPERACION . operador_igual OPERACION

    operador_divicion reduce using rule 31 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_igualacion reduce using rule 31 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_diferenciacion reduce using rule 31 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_mayor  reduce using rule 31 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_mayor_igual reduce using rule 31 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_menor  reduce using rule 31 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_menor_igual reduce using rule 31 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_AND    reduce using rule 31 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_OR     reduce using rule 31 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_igual  reduce using rule 31 (OPERACION -> OPERACION operador_mayor OPERACION .)
    parentesis_cierra reduce using rule 31 (OPERACION -> OPERACION operador_mayor OPERACION .)
    numero          reduce using rule 31 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_suma   shift and go to state 82
    operador_resta  shift and go to state 83
    operador_multiplicacion shift and go to state 84
    operador_resto  shift and go to state 86
    operador_NOT    shift and go to state 95

  ! operador_suma   [ reduce using rule 31 (OPERACION -> OPERACION operador_mayor OPERACION .) ]
  ! operador_resta  [ reduce using rule 31 (OPERACION -> OPERACION operador_mayor OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 31 (OPERACION -> OPERACION operador_mayor OPERACION .) ]
  ! operador_resto  [ reduce using rule 31 (OPERACION -> OPERACION operador_mayor OPERACION .) ]
  ! operador_NOT    [ reduce using rule 31 (OPERACION -> OPERACION operador_mayor OPERACION .) ]
  ! operador_divicion [ shift and go to state 85 ]
  ! operador_igualacion [ shift and go to state 87 ]
  ! operador_diferenciacion [ shift and go to state 88 ]
  ! operador_mayor  [ shift and go to state 89 ]
  ! operador_mayor_igual [ shift and go to state 90 ]
  ! operador_menor  [ shift and go to state 91 ]
  ! operador_menor_igual [ shift and go to state 92 ]
  ! operador_AND    [ shift and go to state 93 ]
  ! operador_OR     [ shift and go to state 94 ]
  ! operador_igual  [ shift and go to state 96 ]


state 118

    (32) OPERACION -> OPERACION operador_mayor_igual OPERACION .
    (24) OPERACION -> OPERACION . operador_suma OPERACION
    (25) OPERACION -> OPERACION . operador_resta OPERACION
    (26) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (27) OPERACION -> OPERACION . operador_divicion OPERACION
    (28) OPERACION -> OPERACION . operador_resto OPERACION
    (29) OPERACION -> OPERACION . operador_igualacion OPERACION
    (30) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (31) OPERACION -> OPERACION . operador_mayor OPERACION
    (32) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (33) OPERACION -> OPERACION . operador_menor OPERACION
    (34) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (35) OPERACION -> OPERACION . operador_AND OPERACION
    (36) OPERACION -> OPERACION . operador_OR OPERACION
    (37) OPERACION -> OPERACION . operador_NOT OPERACION
    (38) OPERACION -> OPERACION . operador_igual OPERACION

    operador_divicion reduce using rule 32 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_igualacion reduce using rule 32 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_diferenciacion reduce using rule 32 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_mayor  reduce using rule 32 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_mayor_igual reduce using rule 32 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_menor  reduce using rule 32 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_menor_igual reduce using rule 32 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_AND    reduce using rule 32 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_OR     reduce using rule 32 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_igual  reduce using rule 32 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    parentesis_cierra reduce using rule 32 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    numero          reduce using rule 32 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_suma   shift and go to state 82
    operador_resta  shift and go to state 83
    operador_multiplicacion shift and go to state 84
    operador_resto  shift and go to state 86
    operador_NOT    shift and go to state 95

  ! operador_suma   [ reduce using rule 32 (OPERACION -> OPERACION operador_mayor_igual OPERACION .) ]
  ! operador_resta  [ reduce using rule 32 (OPERACION -> OPERACION operador_mayor_igual OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 32 (OPERACION -> OPERACION operador_mayor_igual OPERACION .) ]
  ! operador_resto  [ reduce using rule 32 (OPERACION -> OPERACION operador_mayor_igual OPERACION .) ]
  ! operador_NOT    [ reduce using rule 32 (OPERACION -> OPERACION operador_mayor_igual OPERACION .) ]
  ! operador_divicion [ shift and go to state 85 ]
  ! operador_igualacion [ shift and go to state 87 ]
  ! operador_diferenciacion [ shift and go to state 88 ]
  ! operador_mayor  [ shift and go to state 89 ]
  ! operador_mayor_igual [ shift and go to state 90 ]
  ! operador_menor  [ shift and go to state 91 ]
  ! operador_menor_igual [ shift and go to state 92 ]
  ! operador_AND    [ shift and go to state 93 ]
  ! operador_OR     [ shift and go to state 94 ]
  ! operador_igual  [ shift and go to state 96 ]


state 119

    (33) OPERACION -> OPERACION operador_menor OPERACION .
    (24) OPERACION -> OPERACION . operador_suma OPERACION
    (25) OPERACION -> OPERACION . operador_resta OPERACION
    (26) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (27) OPERACION -> OPERACION . operador_divicion OPERACION
    (28) OPERACION -> OPERACION . operador_resto OPERACION
    (29) OPERACION -> OPERACION . operador_igualacion OPERACION
    (30) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (31) OPERACION -> OPERACION . operador_mayor OPERACION
    (32) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (33) OPERACION -> OPERACION . operador_menor OPERACION
    (34) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (35) OPERACION -> OPERACION . operador_AND OPERACION
    (36) OPERACION -> OPERACION . operador_OR OPERACION
    (37) OPERACION -> OPERACION . operador_NOT OPERACION
    (38) OPERACION -> OPERACION . operador_igual OPERACION

    operador_divicion reduce using rule 33 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_igualacion reduce using rule 33 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_diferenciacion reduce using rule 33 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_mayor  reduce using rule 33 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_mayor_igual reduce using rule 33 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_menor  reduce using rule 33 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_menor_igual reduce using rule 33 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_AND    reduce using rule 33 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_OR     reduce using rule 33 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_igual  reduce using rule 33 (OPERACION -> OPERACION operador_menor OPERACION .)
    parentesis_cierra reduce using rule 33 (OPERACION -> OPERACION operador_menor OPERACION .)
    numero          reduce using rule 33 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_suma   shift and go to state 82
    operador_resta  shift and go to state 83
    operador_multiplicacion shift and go to state 84
    operador_resto  shift and go to state 86
    operador_NOT    shift and go to state 95

  ! operador_suma   [ reduce using rule 33 (OPERACION -> OPERACION operador_menor OPERACION .) ]
  ! operador_resta  [ reduce using rule 33 (OPERACION -> OPERACION operador_menor OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 33 (OPERACION -> OPERACION operador_menor OPERACION .) ]
  ! operador_resto  [ reduce using rule 33 (OPERACION -> OPERACION operador_menor OPERACION .) ]
  ! operador_NOT    [ reduce using rule 33 (OPERACION -> OPERACION operador_menor OPERACION .) ]
  ! operador_divicion [ shift and go to state 85 ]
  ! operador_igualacion [ shift and go to state 87 ]
  ! operador_diferenciacion [ shift and go to state 88 ]
  ! operador_mayor  [ shift and go to state 89 ]
  ! operador_mayor_igual [ shift and go to state 90 ]
  ! operador_menor  [ shift and go to state 91 ]
  ! operador_menor_igual [ shift and go to state 92 ]
  ! operador_AND    [ shift and go to state 93 ]
  ! operador_OR     [ shift and go to state 94 ]
  ! operador_igual  [ shift and go to state 96 ]


state 120

    (34) OPERACION -> OPERACION operador_menor_igual OPERACION .
    (24) OPERACION -> OPERACION . operador_suma OPERACION
    (25) OPERACION -> OPERACION . operador_resta OPERACION
    (26) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (27) OPERACION -> OPERACION . operador_divicion OPERACION
    (28) OPERACION -> OPERACION . operador_resto OPERACION
    (29) OPERACION -> OPERACION . operador_igualacion OPERACION
    (30) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (31) OPERACION -> OPERACION . operador_mayor OPERACION
    (32) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (33) OPERACION -> OPERACION . operador_menor OPERACION
    (34) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (35) OPERACION -> OPERACION . operador_AND OPERACION
    (36) OPERACION -> OPERACION . operador_OR OPERACION
    (37) OPERACION -> OPERACION . operador_NOT OPERACION
    (38) OPERACION -> OPERACION . operador_igual OPERACION

    operador_divicion reduce using rule 34 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_igualacion reduce using rule 34 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_diferenciacion reduce using rule 34 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_mayor  reduce using rule 34 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_mayor_igual reduce using rule 34 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_menor  reduce using rule 34 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_menor_igual reduce using rule 34 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_AND    reduce using rule 34 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_OR     reduce using rule 34 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_igual  reduce using rule 34 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    parentesis_cierra reduce using rule 34 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    numero          reduce using rule 34 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_suma   shift and go to state 82
    operador_resta  shift and go to state 83
    operador_multiplicacion shift and go to state 84
    operador_resto  shift and go to state 86
    operador_NOT    shift and go to state 95

  ! operador_suma   [ reduce using rule 34 (OPERACION -> OPERACION operador_menor_igual OPERACION .) ]
  ! operador_resta  [ reduce using rule 34 (OPERACION -> OPERACION operador_menor_igual OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 34 (OPERACION -> OPERACION operador_menor_igual OPERACION .) ]
  ! operador_resto  [ reduce using rule 34 (OPERACION -> OPERACION operador_menor_igual OPERACION .) ]
  ! operador_NOT    [ reduce using rule 34 (OPERACION -> OPERACION operador_menor_igual OPERACION .) ]
  ! operador_divicion [ shift and go to state 85 ]
  ! operador_igualacion [ shift and go to state 87 ]
  ! operador_diferenciacion [ shift and go to state 88 ]
  ! operador_mayor  [ shift and go to state 89 ]
  ! operador_mayor_igual [ shift and go to state 90 ]
  ! operador_menor  [ shift and go to state 91 ]
  ! operador_menor_igual [ shift and go to state 92 ]
  ! operador_AND    [ shift and go to state 93 ]
  ! operador_OR     [ shift and go to state 94 ]
  ! operador_igual  [ shift and go to state 96 ]


state 121

    (35) OPERACION -> OPERACION operador_AND OPERACION .
    (24) OPERACION -> OPERACION . operador_suma OPERACION
    (25) OPERACION -> OPERACION . operador_resta OPERACION
    (26) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (27) OPERACION -> OPERACION . operador_divicion OPERACION
    (28) OPERACION -> OPERACION . operador_resto OPERACION
    (29) OPERACION -> OPERACION . operador_igualacion OPERACION
    (30) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (31) OPERACION -> OPERACION . operador_mayor OPERACION
    (32) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (33) OPERACION -> OPERACION . operador_menor OPERACION
    (34) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (35) OPERACION -> OPERACION . operador_AND OPERACION
    (36) OPERACION -> OPERACION . operador_OR OPERACION
    (37) OPERACION -> OPERACION . operador_NOT OPERACION
    (38) OPERACION -> OPERACION . operador_igual OPERACION

    operador_divicion reduce using rule 35 (OPERACION -> OPERACION operador_AND OPERACION .)
    operador_AND    reduce using rule 35 (OPERACION -> OPERACION operador_AND OPERACION .)
    operador_OR     reduce using rule 35 (OPERACION -> OPERACION operador_AND OPERACION .)
    operador_igual  reduce using rule 35 (OPERACION -> OPERACION operador_AND OPERACION .)
    parentesis_cierra reduce using rule 35 (OPERACION -> OPERACION operador_AND OPERACION .)
    numero          reduce using rule 35 (OPERACION -> OPERACION operador_AND OPERACION .)
    operador_suma   shift and go to state 82
    operador_resta  shift and go to state 83
    operador_multiplicacion shift and go to state 84
    operador_resto  shift and go to state 86
    operador_igualacion shift and go to state 87
    operador_diferenciacion shift and go to state 88
    operador_mayor  shift and go to state 89
    operador_mayor_igual shift and go to state 90
    operador_menor  shift and go to state 91
    operador_menor_igual shift and go to state 92
    operador_NOT    shift and go to state 95

  ! operador_suma   [ reduce using rule 35 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_resta  [ reduce using rule 35 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 35 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_resto  [ reduce using rule 35 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_igualacion [ reduce using rule 35 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_diferenciacion [ reduce using rule 35 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_mayor  [ reduce using rule 35 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_mayor_igual [ reduce using rule 35 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_menor  [ reduce using rule 35 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_menor_igual [ reduce using rule 35 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_NOT    [ reduce using rule 35 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_divicion [ shift and go to state 85 ]
  ! operador_AND    [ shift and go to state 93 ]
  ! operador_OR     [ shift and go to state 94 ]
  ! operador_igual  [ shift and go to state 96 ]


state 122

    (36) OPERACION -> OPERACION operador_OR OPERACION .
    (24) OPERACION -> OPERACION . operador_suma OPERACION
    (25) OPERACION -> OPERACION . operador_resta OPERACION
    (26) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (27) OPERACION -> OPERACION . operador_divicion OPERACION
    (28) OPERACION -> OPERACION . operador_resto OPERACION
    (29) OPERACION -> OPERACION . operador_igualacion OPERACION
    (30) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (31) OPERACION -> OPERACION . operador_mayor OPERACION
    (32) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (33) OPERACION -> OPERACION . operador_menor OPERACION
    (34) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (35) OPERACION -> OPERACION . operador_AND OPERACION
    (36) OPERACION -> OPERACION . operador_OR OPERACION
    (37) OPERACION -> OPERACION . operador_NOT OPERACION
    (38) OPERACION -> OPERACION . operador_igual OPERACION

    operador_divicion reduce using rule 36 (OPERACION -> OPERACION operador_OR OPERACION .)
    operador_OR     reduce using rule 36 (OPERACION -> OPERACION operador_OR OPERACION .)
    operador_igual  reduce using rule 36 (OPERACION -> OPERACION operador_OR OPERACION .)
    parentesis_cierra reduce using rule 36 (OPERACION -> OPERACION operador_OR OPERACION .)
    numero          reduce using rule 36 (OPERACION -> OPERACION operador_OR OPERACION .)
    operador_suma   shift and go to state 82
    operador_resta  shift and go to state 83
    operador_multiplicacion shift and go to state 84
    operador_resto  shift and go to state 86
    operador_igualacion shift and go to state 87
    operador_diferenciacion shift and go to state 88
    operador_mayor  shift and go to state 89
    operador_mayor_igual shift and go to state 90
    operador_menor  shift and go to state 91
    operador_menor_igual shift and go to state 92
    operador_AND    shift and go to state 93
    operador_NOT    shift and go to state 95

  ! operador_suma   [ reduce using rule 36 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_resta  [ reduce using rule 36 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 36 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_resto  [ reduce using rule 36 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_igualacion [ reduce using rule 36 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_diferenciacion [ reduce using rule 36 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_mayor  [ reduce using rule 36 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_mayor_igual [ reduce using rule 36 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_menor  [ reduce using rule 36 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_menor_igual [ reduce using rule 36 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_AND    [ reduce using rule 36 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_NOT    [ reduce using rule 36 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_divicion [ shift and go to state 85 ]
  ! operador_OR     [ shift and go to state 94 ]
  ! operador_igual  [ shift and go to state 96 ]


state 123

    (37) OPERACION -> OPERACION operador_NOT OPERACION .
    (24) OPERACION -> OPERACION . operador_suma OPERACION
    (25) OPERACION -> OPERACION . operador_resta OPERACION
    (26) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (27) OPERACION -> OPERACION . operador_divicion OPERACION
    (28) OPERACION -> OPERACION . operador_resto OPERACION
    (29) OPERACION -> OPERACION . operador_igualacion OPERACION
    (30) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (31) OPERACION -> OPERACION . operador_mayor OPERACION
    (32) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (33) OPERACION -> OPERACION . operador_menor OPERACION
    (34) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (35) OPERACION -> OPERACION . operador_AND OPERACION
    (36) OPERACION -> OPERACION . operador_OR OPERACION
    (37) OPERACION -> OPERACION . operador_NOT OPERACION
    (38) OPERACION -> OPERACION . operador_igual OPERACION

    operador_suma   reduce using rule 37 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_resta  reduce using rule 37 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_multiplicacion reduce using rule 37 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_divicion reduce using rule 37 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_resto  reduce using rule 37 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_igualacion reduce using rule 37 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_diferenciacion reduce using rule 37 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_mayor  reduce using rule 37 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_mayor_igual reduce using rule 37 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_menor  reduce using rule 37 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_menor_igual reduce using rule 37 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_AND    reduce using rule 37 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_OR     reduce using rule 37 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_igual  reduce using rule 37 (OPERACION -> OPERACION operador_NOT OPERACION .)
    parentesis_cierra reduce using rule 37 (OPERACION -> OPERACION operador_NOT OPERACION .)
    numero          reduce using rule 37 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_NOT    shift and go to state 95

  ! operador_NOT    [ reduce using rule 37 (OPERACION -> OPERACION operador_NOT OPERACION .) ]
  ! operador_suma   [ shift and go to state 82 ]
  ! operador_resta  [ shift and go to state 83 ]
  ! operador_multiplicacion [ shift and go to state 84 ]
  ! operador_divicion [ shift and go to state 85 ]
  ! operador_resto  [ shift and go to state 86 ]
  ! operador_igualacion [ shift and go to state 87 ]
  ! operador_diferenciacion [ shift and go to state 88 ]
  ! operador_mayor  [ shift and go to state 89 ]
  ! operador_mayor_igual [ shift and go to state 90 ]
  ! operador_menor  [ shift and go to state 91 ]
  ! operador_menor_igual [ shift and go to state 92 ]
  ! operador_AND    [ shift and go to state 93 ]
  ! operador_OR     [ shift and go to state 94 ]
  ! operador_igual  [ shift and go to state 96 ]


state 124

    (38) OPERACION -> OPERACION operador_igual OPERACION .
    (24) OPERACION -> OPERACION . operador_suma OPERACION
    (25) OPERACION -> OPERACION . operador_resta OPERACION
    (26) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (27) OPERACION -> OPERACION . operador_divicion OPERACION
    (28) OPERACION -> OPERACION . operador_resto OPERACION
    (29) OPERACION -> OPERACION . operador_igualacion OPERACION
    (30) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (31) OPERACION -> OPERACION . operador_mayor OPERACION
    (32) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (33) OPERACION -> OPERACION . operador_menor OPERACION
    (34) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (35) OPERACION -> OPERACION . operador_AND OPERACION
    (36) OPERACION -> OPERACION . operador_OR OPERACION
    (37) OPERACION -> OPERACION . operador_NOT OPERACION
    (38) OPERACION -> OPERACION . operador_igual OPERACION

  ! shift/reduce conflict for operador_suma resolved as shift
  ! shift/reduce conflict for operador_resta resolved as shift
  ! shift/reduce conflict for operador_multiplicacion resolved as shift
  ! shift/reduce conflict for operador_divicion resolved as shift
  ! shift/reduce conflict for operador_resto resolved as shift
  ! shift/reduce conflict for operador_igualacion resolved as shift
  ! shift/reduce conflict for operador_diferenciacion resolved as shift
  ! shift/reduce conflict for operador_mayor resolved as shift
  ! shift/reduce conflict for operador_mayor_igual resolved as shift
  ! shift/reduce conflict for operador_menor resolved as shift
  ! shift/reduce conflict for operador_menor_igual resolved as shift
  ! shift/reduce conflict for operador_AND resolved as shift
  ! shift/reduce conflict for operador_OR resolved as shift
  ! shift/reduce conflict for operador_NOT resolved as shift
  ! shift/reduce conflict for operador_igual resolved as shift
    parentesis_cierra reduce using rule 38 (OPERACION -> OPERACION operador_igual OPERACION .)
    numero          reduce using rule 38 (OPERACION -> OPERACION operador_igual OPERACION .)
    operador_suma   shift and go to state 82
    operador_resta  shift and go to state 83
    operador_multiplicacion shift and go to state 84
    operador_divicion shift and go to state 85
    operador_resto  shift and go to state 86
    operador_igualacion shift and go to state 87
    operador_diferenciacion shift and go to state 88
    operador_mayor  shift and go to state 89
    operador_mayor_igual shift and go to state 90
    operador_menor  shift and go to state 91
    operador_menor_igual shift and go to state 92
    operador_AND    shift and go to state 93
    operador_OR     shift and go to state 94
    operador_NOT    shift and go to state 95
    operador_igual  shift and go to state 96

  ! operador_suma   [ reduce using rule 38 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_resta  [ reduce using rule 38 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 38 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_divicion [ reduce using rule 38 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_resto  [ reduce using rule 38 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_igualacion [ reduce using rule 38 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_diferenciacion [ reduce using rule 38 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_mayor  [ reduce using rule 38 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_mayor_igual [ reduce using rule 38 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_menor  [ reduce using rule 38 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_menor_igual [ reduce using rule 38 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_AND    [ reduce using rule 38 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_OR     [ reduce using rule 38 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_NOT    [ reduce using rule 38 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_igual  [ reduce using rule 38 (OPERACION -> OPERACION operador_igual OPERACION .) ]


state 125

    (16) PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .

    reservada_if    reduce using rule 16 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    reservada_do    reduce using rule 16 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    reservada_while reduce using rule 16 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    reservada_void  reduce using rule 16 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    id              reduce using rule 16 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    reservada_return reduce using rule 16 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    reservada_break reduce using rule 16 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    reservada_continue reduce using rule 16 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    tipo_int        reduce using rule 16 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    tipo_double     reduce using rule 16 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    tipo_string     reduce using rule 16 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    tipo_char       reduce using rule 16 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    tipo_boolean    reduce using rule 16 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    $end            reduce using rule 16 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    llave_cierra    reduce using rule 16 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)


state 126

    (79) PARAMETROS_FACTORIZADO -> parentesis_abre PARAMETROS parentesis_cierra .

    llave_abre      reduce using rule 79 (PARAMETROS_FACTORIZADO -> parentesis_abre PARAMETROS parentesis_cierra .)


state 127

    (65) PARAMETROS -> PARAMETROS coma . PARAMETRO
    (64) PARAMETRO -> . TIPO_DATO id
    (53) TIPO_DATO -> . tipo_int
    (54) TIPO_DATO -> . tipo_double
    (55) TIPO_DATO -> . tipo_string
    (56) TIPO_DATO -> . tipo_char
    (57) TIPO_DATO -> . tipo_boolean

    tipo_int        shift and go to state 25
    tipo_double     shift and go to state 26
    tipo_string     shift and go to state 27
    tipo_char       shift and go to state 28
    tipo_boolean    shift and go to state 29

    PARAMETRO                      shift and go to state 131
    TIPO_DATO                      shift and go to state 103

state 128

    (64) PARAMETRO -> TIPO_DATO id .

    parentesis_cierra reduce using rule 64 (PARAMETRO -> TIPO_DATO id .)
    coma            reduce using rule 64 (PARAMETRO -> TIPO_DATO id .)


state 129

    (69) ARGUMENTOS -> ARGUMENTOS coma ARGUMENTO .

    parentesis_cierra reduce using rule 69 (ARGUMENTOS -> ARGUMENTOS coma ARGUMENTO .)
    coma            reduce using rule 69 (ARGUMENTOS -> ARGUMENTOS coma ARGUMENTO .)


state 130

    (51) DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma .

    reservada_if    reduce using rule 51 (DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma .)
    reservada_do    reduce using rule 51 (DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma .)
    reservada_while reduce using rule 51 (DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma .)
    reservada_void  reduce using rule 51 (DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma .)
    id              reduce using rule 51 (DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma .)
    reservada_return reduce using rule 51 (DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma .)
    reservada_break reduce using rule 51 (DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma .)
    reservada_continue reduce using rule 51 (DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma .)
    tipo_int        reduce using rule 51 (DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma .)
    tipo_double     reduce using rule 51 (DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma .)
    tipo_string     reduce using rule 51 (DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma .)
    tipo_char       reduce using rule 51 (DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma .)
    tipo_boolean    reduce using rule 51 (DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma .)
    $end            reduce using rule 51 (DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma .)
    llave_cierra    reduce using rule 51 (DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma .)


state 131

    (65) PARAMETROS -> PARAMETROS coma PARAMETRO .

    parentesis_cierra reduce using rule 65 (PARAMETROS -> PARAMETROS coma PARAMETRO .)
    coma            reduce using rule 65 (PARAMETROS -> PARAMETROS coma PARAMETRO .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for operador_suma in state 113 resolved as shift
WARNING: shift/reduce conflict for operador_resta in state 113 resolved as shift
WARNING: shift/reduce conflict for operador_multiplicacion in state 113 resolved as shift
WARNING: shift/reduce conflict for operador_divicion in state 113 resolved as shift
WARNING: shift/reduce conflict for operador_resto in state 113 resolved as shift
WARNING: shift/reduce conflict for operador_igualacion in state 113 resolved as shift
WARNING: shift/reduce conflict for operador_diferenciacion in state 113 resolved as shift
WARNING: shift/reduce conflict for operador_mayor in state 113 resolved as shift
WARNING: shift/reduce conflict for operador_mayor_igual in state 113 resolved as shift
WARNING: shift/reduce conflict for operador_menor in state 113 resolved as shift
WARNING: shift/reduce conflict for operador_menor_igual in state 113 resolved as shift
WARNING: shift/reduce conflict for operador_AND in state 113 resolved as shift
WARNING: shift/reduce conflict for operador_OR in state 113 resolved as shift
WARNING: shift/reduce conflict for operador_NOT in state 113 resolved as shift
WARNING: shift/reduce conflict for operador_igual in state 113 resolved as shift
WARNING: shift/reduce conflict for operador_suma in state 124 resolved as shift
WARNING: shift/reduce conflict for operador_resta in state 124 resolved as shift
WARNING: shift/reduce conflict for operador_multiplicacion in state 124 resolved as shift
WARNING: shift/reduce conflict for operador_divicion in state 124 resolved as shift
WARNING: shift/reduce conflict for operador_resto in state 124 resolved as shift
WARNING: shift/reduce conflict for operador_igualacion in state 124 resolved as shift
WARNING: shift/reduce conflict for operador_diferenciacion in state 124 resolved as shift
WARNING: shift/reduce conflict for operador_mayor in state 124 resolved as shift
WARNING: shift/reduce conflict for operador_mayor_igual in state 124 resolved as shift
WARNING: shift/reduce conflict for operador_menor in state 124 resolved as shift
WARNING: shift/reduce conflict for operador_menor_igual in state 124 resolved as shift
WARNING: shift/reduce conflict for operador_AND in state 124 resolved as shift
WARNING: shift/reduce conflict for operador_OR in state 124 resolved as shift
WARNING: shift/reduce conflict for operador_NOT in state 124 resolved as shift
WARNING: shift/reduce conflict for operador_igual in state 124 resolved as shift
