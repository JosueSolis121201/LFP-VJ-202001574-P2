Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    comentario_multilinea
    comentario_unilinea
    corchete_abre
    corchete_cierra
    dos_puntos
    punto
    reservada_fin
    reservada_inicio

Grammar

Rule 0     S' -> S0
Rule 1     S0 -> INITIAL
Rule 2     INITIAL -> INITIAL ESTRUCTURA
Rule 3     INITIAL -> ESTRUCTURA
Rule 4     ESTRUCTURA -> PRODIF_ELSE
Rule 5     ESTRUCTURA -> PRODIF
Rule 6     ESTRUCTURA -> PRODDO_WHILE
Rule 7     ESTRUCTURA -> PRODWHILE
Rule 8     ESTRUCTURA -> PRODVOID
Rule 9     ESTRUCTURA -> PRODFUNCION
Rule 10    PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma
Rule 11    PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
Rule 12    PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO
Rule 13    PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
Rule 14    PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO
Rule 15    PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO
Rule 16    OPERACION -> OPERACION operador_suma OPERACION
Rule 17    OPERACION -> OPERACION operador_resta OPERACION
Rule 18    OPERACION -> OPERACION operador_multiplicacion OPERACION
Rule 19    OPERACION -> OPERACION operador_divicion OPERACION
Rule 20    OPERACION -> OPERACION operador_resto OPERACION
Rule 21    OPERACION -> OPERACION operador_igualacion OPERACION
Rule 22    OPERACION -> OPERACION operador_diferenciacion OPERACION
Rule 23    OPERACION -> OPERACION operador_mayor OPERACION
Rule 24    OPERACION -> OPERACION operador_mayor_igual OPERACION
Rule 25    OPERACION -> OPERACION operador_menor OPERACION
Rule 26    OPERACION -> OPERACION operador_menor_igual OPERACION
Rule 27    OPERACION -> OPERACION operador_AND OPERACION
Rule 28    OPERACION -> OPERACION operador_OR OPERACION
Rule 29    OPERACION -> OPERACION operador_NOT OPERACION
Rule 30    OPERACION -> OPERACION operador_igual OPERACION
Rule 31    OPERACION -> numero
Rule 32    INSTRUCCIONES -> DECLARACION
Rule 33    INSTRUCCIONES -> ASINGACION
Rule 34    INSTRUCCIONES -> PRODIF_ELSE
Rule 35    INSTRUCCIONES -> PRODIF
Rule 36    INSTRUCCIONES -> PRODDO_WHILE
Rule 37    INSTRUCCIONES -> PRODWHILE
Rule 38    INSTRUCCIONES -> PRODVOID
Rule 39    INSTRUCCIONES -> RETURN
Rule 40    INSTRUCCIONES -> BREAK
Rule 41    INSTRUCCIONES -> CONTINUE
Rule 42    INSTRUCCIONES -> LLAMADA
Rule 43    DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma
Rule 44    ASINGACION -> id operador_igual DATO punto_coma
Rule 45    TIPO_DATO -> tipo_int
Rule 46    TIPO_DATO -> tipo_double
Rule 47    TIPO_DATO -> tipo_string
Rule 48    TIPO_DATO -> tipo_char
Rule 49    TIPO_DATO -> tipo_boolean
Rule 50    DATO -> numero
Rule 51    DATO -> dato_double
Rule 52    DATO -> dato_string
Rule 53    DATO -> dato_char
Rule 54    DATO -> dato_boolean_true
Rule 55    DATO -> dato_boolean_false
Rule 56    PARAMETRO -> TIPO_DATO id
Rule 57    PARAMETROS -> PARAMETROS coma PARAMETRO
Rule 58    PARAMETROS -> PARAMETRO
Rule 59    PARAMETROS -> <empty>
Rule 60    LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra
Rule 61    ARGUMENTOS -> ARGUMENTOS coma ARGUMENTO
Rule 62    ARGUMENTOS -> ARGUMENTO
Rule 63    ARGUMENTOS -> <empty>
Rule 64    ARGUMENTO -> DATO
Rule 65    RETURN -> reservada_return punto_coma
Rule 66    RETURN -> reservada_return DATO punto_coma
Rule 67    BREAK -> reservada_break punto_coma
Rule 68    CONTINUE -> reservada_continue punto_coma
Rule 69    OPERACION_FACTORIZADO -> parentesis_abre OPERACION parentesis_cierra
Rule 70    INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra
Rule 71    PARAMETROS_FACTORIZADO -> parentesis_abre PARAMETROS parentesis_cierra

Terminals, with rules where they appear

coma                 : 57 61
comentario_multilinea : 
comentario_unilinea  : 
corchete_abre        : 
corchete_cierra      : 
dato_boolean_false   : 55
dato_boolean_true    : 54
dato_char            : 53
dato_double          : 51
dato_string          : 52
dos_puntos           : 
error                : 
id                   : 14 15 43 44 56 60
llave_abre           : 70
llave_cierra         : 70
numero               : 31 50
operador_AND         : 27
operador_NOT         : 29
operador_OR          : 28
operador_diferenciacion : 22
operador_divicion    : 19
operador_igual       : 30 43 44
operador_igualacion  : 21
operador_mayor       : 23
operador_mayor_igual : 24
operador_menor       : 25
operador_menor_igual : 26
operador_multiplicacion : 18
operador_resta       : 17
operador_resto       : 20
operador_suma        : 16
parentesis_abre      : 60 69 71
parentesis_cierra    : 60 69 71
punto                : 
punto_coma           : 10 43 44 65 66 67 68
reservada_break      : 67
reservada_continue   : 68
reservada_do         : 10
reservada_else       : 12
reservada_fin        : 
reservada_if         : 12 13
reservada_inicio     : 
reservada_return     : 65 66
reservada_void       : 14
reservada_while      : 10 11
tipo_boolean         : 49
tipo_char            : 48
tipo_double          : 46
tipo_int             : 45
tipo_string          : 47

Nonterminals, with rules where they appear

ARGUMENTO            : 61 62
ARGUMENTOS           : 60 61
ASINGACION           : 33
BREAK                : 40
CONTINUE             : 41
DATO                 : 43 44 64 66
DECLARACION          : 32
ESTRUCTURA           : 2 3
INITIAL              : 1 2
INSTRUCCIONES        : 70
INSTRUCCIONES_FACTORIZADO : 10 11 12 12 13 14 15
LLAMADA              : 42
OPERACION            : 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 69
OPERACION_FACTORIZADO : 10 11 12 13
PARAMETRO            : 57 58
PARAMETROS           : 57 71
PARAMETROS_FACTORIZADO : 14 15
PRODDO_WHILE         : 6 36
PRODFUNCION          : 9
PRODIF               : 5 35
PRODIF_ELSE          : 4 34
PRODVOID             : 8 38
PRODWHILE            : 7 37
RETURN               : 39
S0                   : 0
TIPO_DATO            : 15 43 56

Parsing method: LALR

state 0

    (0) S' -> . S0
    (1) S0 -> . INITIAL
    (2) INITIAL -> . INITIAL ESTRUCTURA
    (3) INITIAL -> . ESTRUCTURA
    (4) ESTRUCTURA -> . PRODIF_ELSE
    (5) ESTRUCTURA -> . PRODIF
    (6) ESTRUCTURA -> . PRODDO_WHILE
    (7) ESTRUCTURA -> . PRODWHILE
    (8) ESTRUCTURA -> . PRODVOID
    (9) ESTRUCTURA -> . PRODFUNCION
    (12) PRODIF_ELSE -> . reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO
    (13) PRODIF -> . reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (10) PRODDO_WHILE -> . reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma
    (11) PRODWHILE -> . reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (14) PRODVOID -> . reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (15) PRODFUNCION -> . TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (45) TIPO_DATO -> . tipo_int
    (46) TIPO_DATO -> . tipo_double
    (47) TIPO_DATO -> . tipo_string
    (48) TIPO_DATO -> . tipo_char
    (49) TIPO_DATO -> . tipo_boolean

    reservada_if    shift and go to state 10
    reservada_do    shift and go to state 11
    reservada_while shift and go to state 12
    reservada_void  shift and go to state 13
    tipo_int        shift and go to state 15
    tipo_double     shift and go to state 16
    tipo_string     shift and go to state 17
    tipo_char       shift and go to state 18
    tipo_boolean    shift and go to state 19

    S0                             shift and go to state 1
    INITIAL                        shift and go to state 2
    ESTRUCTURA                     shift and go to state 3
    PRODIF_ELSE                    shift and go to state 4
    PRODIF                         shift and go to state 5
    PRODDO_WHILE                   shift and go to state 6
    PRODWHILE                      shift and go to state 7
    PRODVOID                       shift and go to state 8
    PRODFUNCION                    shift and go to state 9
    TIPO_DATO                      shift and go to state 14

state 1

    (0) S' -> S0 .



state 2

    (1) S0 -> INITIAL .
    (2) INITIAL -> INITIAL . ESTRUCTURA
    (4) ESTRUCTURA -> . PRODIF_ELSE
    (5) ESTRUCTURA -> . PRODIF
    (6) ESTRUCTURA -> . PRODDO_WHILE
    (7) ESTRUCTURA -> . PRODWHILE
    (8) ESTRUCTURA -> . PRODVOID
    (9) ESTRUCTURA -> . PRODFUNCION
    (12) PRODIF_ELSE -> . reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO
    (13) PRODIF -> . reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (10) PRODDO_WHILE -> . reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma
    (11) PRODWHILE -> . reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (14) PRODVOID -> . reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (15) PRODFUNCION -> . TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (45) TIPO_DATO -> . tipo_int
    (46) TIPO_DATO -> . tipo_double
    (47) TIPO_DATO -> . tipo_string
    (48) TIPO_DATO -> . tipo_char
    (49) TIPO_DATO -> . tipo_boolean

    $end            reduce using rule 1 (S0 -> INITIAL .)
    reservada_if    shift and go to state 10
    reservada_do    shift and go to state 11
    reservada_while shift and go to state 12
    reservada_void  shift and go to state 13
    tipo_int        shift and go to state 15
    tipo_double     shift and go to state 16
    tipo_string     shift and go to state 17
    tipo_char       shift and go to state 18
    tipo_boolean    shift and go to state 19

    ESTRUCTURA                     shift and go to state 20
    PRODIF_ELSE                    shift and go to state 4
    PRODIF                         shift and go to state 5
    PRODDO_WHILE                   shift and go to state 6
    PRODWHILE                      shift and go to state 7
    PRODVOID                       shift and go to state 8
    PRODFUNCION                    shift and go to state 9
    TIPO_DATO                      shift and go to state 14

state 3

    (3) INITIAL -> ESTRUCTURA .

    reservada_if    reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    reservada_do    reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    reservada_while reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    reservada_void  reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    tipo_int        reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    tipo_double     reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    tipo_string     reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    tipo_char       reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    tipo_boolean    reduce using rule 3 (INITIAL -> ESTRUCTURA .)
    $end            reduce using rule 3 (INITIAL -> ESTRUCTURA .)


state 4

    (4) ESTRUCTURA -> PRODIF_ELSE .

    reservada_if    reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    reservada_do    reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    reservada_while reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    reservada_void  reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    tipo_int        reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    tipo_double     reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    tipo_string     reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    tipo_char       reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    tipo_boolean    reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)
    $end            reduce using rule 4 (ESTRUCTURA -> PRODIF_ELSE .)


state 5

    (5) ESTRUCTURA -> PRODIF .

    reservada_if    reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    reservada_do    reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    reservada_while reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    reservada_void  reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    tipo_int        reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    tipo_double     reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    tipo_string     reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    tipo_char       reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    tipo_boolean    reduce using rule 5 (ESTRUCTURA -> PRODIF .)
    $end            reduce using rule 5 (ESTRUCTURA -> PRODIF .)


state 6

    (6) ESTRUCTURA -> PRODDO_WHILE .

    reservada_if    reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    reservada_do    reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    reservada_while reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    reservada_void  reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    tipo_int        reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    tipo_double     reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    tipo_string     reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    tipo_char       reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    tipo_boolean    reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)
    $end            reduce using rule 6 (ESTRUCTURA -> PRODDO_WHILE .)


state 7

    (7) ESTRUCTURA -> PRODWHILE .

    reservada_if    reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    reservada_do    reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    reservada_while reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    reservada_void  reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    tipo_int        reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    tipo_double     reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    tipo_string     reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    tipo_char       reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    tipo_boolean    reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)
    $end            reduce using rule 7 (ESTRUCTURA -> PRODWHILE .)


state 8

    (8) ESTRUCTURA -> PRODVOID .

    reservada_if    reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    reservada_do    reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    reservada_while reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    reservada_void  reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    tipo_int        reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    tipo_double     reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    tipo_string     reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    tipo_char       reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    tipo_boolean    reduce using rule 8 (ESTRUCTURA -> PRODVOID .)
    $end            reduce using rule 8 (ESTRUCTURA -> PRODVOID .)


state 9

    (9) ESTRUCTURA -> PRODFUNCION .

    reservada_if    reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    reservada_do    reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    reservada_while reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    reservada_void  reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    tipo_int        reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    tipo_double     reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    tipo_string     reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    tipo_char       reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    tipo_boolean    reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)
    $end            reduce using rule 9 (ESTRUCTURA -> PRODFUNCION .)


state 10

    (12) PRODIF_ELSE -> reservada_if . OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO
    (13) PRODIF -> reservada_if . OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (69) OPERACION_FACTORIZADO -> . parentesis_abre OPERACION parentesis_cierra

    parentesis_abre shift and go to state 22

    OPERACION_FACTORIZADO          shift and go to state 21

state 11

    (10) PRODDO_WHILE -> reservada_do . INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma
    (70) INSTRUCCIONES_FACTORIZADO -> . llave_abre INSTRUCCIONES llave_cierra

    llave_abre      shift and go to state 24

    INSTRUCCIONES_FACTORIZADO      shift and go to state 23

state 12

    (11) PRODWHILE -> reservada_while . OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (69) OPERACION_FACTORIZADO -> . parentesis_abre OPERACION parentesis_cierra

    parentesis_abre shift and go to state 22

    OPERACION_FACTORIZADO          shift and go to state 25

state 13

    (14) PRODVOID -> reservada_void . id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO

    id              shift and go to state 26


state 14

    (15) PRODFUNCION -> TIPO_DATO . id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO

    id              shift and go to state 27


state 15

    (45) TIPO_DATO -> tipo_int .

    id              reduce using rule 45 (TIPO_DATO -> tipo_int .)


state 16

    (46) TIPO_DATO -> tipo_double .

    id              reduce using rule 46 (TIPO_DATO -> tipo_double .)


state 17

    (47) TIPO_DATO -> tipo_string .

    id              reduce using rule 47 (TIPO_DATO -> tipo_string .)


state 18

    (48) TIPO_DATO -> tipo_char .

    id              reduce using rule 48 (TIPO_DATO -> tipo_char .)


state 19

    (49) TIPO_DATO -> tipo_boolean .

    id              reduce using rule 49 (TIPO_DATO -> tipo_boolean .)


state 20

    (2) INITIAL -> INITIAL ESTRUCTURA .

    reservada_if    reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    reservada_do    reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    reservada_while reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    reservada_void  reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    tipo_int        reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    tipo_double     reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    tipo_string     reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    tipo_char       reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    tipo_boolean    reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)
    $end            reduce using rule 2 (INITIAL -> INITIAL ESTRUCTURA .)


state 21

    (12) PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO . INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO
    (13) PRODIF -> reservada_if OPERACION_FACTORIZADO . INSTRUCCIONES_FACTORIZADO
    (70) INSTRUCCIONES_FACTORIZADO -> . llave_abre INSTRUCCIONES llave_cierra

    llave_abre      shift and go to state 24

    INSTRUCCIONES_FACTORIZADO      shift and go to state 28

state 22

    (69) OPERACION_FACTORIZADO -> parentesis_abre . OPERACION parentesis_cierra
    (16) OPERACION -> . OPERACION operador_suma OPERACION
    (17) OPERACION -> . OPERACION operador_resta OPERACION
    (18) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (19) OPERACION -> . OPERACION operador_divicion OPERACION
    (20) OPERACION -> . OPERACION operador_resto OPERACION
    (21) OPERACION -> . OPERACION operador_igualacion OPERACION
    (22) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (23) OPERACION -> . OPERACION operador_mayor OPERACION
    (24) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (25) OPERACION -> . OPERACION operador_menor OPERACION
    (26) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (27) OPERACION -> . OPERACION operador_AND OPERACION
    (28) OPERACION -> . OPERACION operador_OR OPERACION
    (29) OPERACION -> . OPERACION operador_NOT OPERACION
    (30) OPERACION -> . OPERACION operador_igual OPERACION
    (31) OPERACION -> . numero

    numero          shift and go to state 30

    OPERACION                      shift and go to state 29

state 23

    (10) PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO . reservada_while OPERACION_FACTORIZADO punto_coma

    reservada_while shift and go to state 31


state 24

    (70) INSTRUCCIONES_FACTORIZADO -> llave_abre . INSTRUCCIONES llave_cierra
    (32) INSTRUCCIONES -> . DECLARACION
    (33) INSTRUCCIONES -> . ASINGACION
    (34) INSTRUCCIONES -> . PRODIF_ELSE
    (35) INSTRUCCIONES -> . PRODIF
    (36) INSTRUCCIONES -> . PRODDO_WHILE
    (37) INSTRUCCIONES -> . PRODWHILE
    (38) INSTRUCCIONES -> . PRODVOID
    (39) INSTRUCCIONES -> . RETURN
    (40) INSTRUCCIONES -> . BREAK
    (41) INSTRUCCIONES -> . CONTINUE
    (42) INSTRUCCIONES -> . LLAMADA
    (43) DECLARACION -> . TIPO_DATO id operador_igual DATO punto_coma
    (44) ASINGACION -> . id operador_igual DATO punto_coma
    (12) PRODIF_ELSE -> . reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO
    (13) PRODIF -> . reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (10) PRODDO_WHILE -> . reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma
    (11) PRODWHILE -> . reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (14) PRODVOID -> . reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (65) RETURN -> . reservada_return punto_coma
    (66) RETURN -> . reservada_return DATO punto_coma
    (67) BREAK -> . reservada_break punto_coma
    (68) CONTINUE -> . reservada_continue punto_coma
    (60) LLAMADA -> . id parentesis_abre ARGUMENTOS parentesis_cierra
    (45) TIPO_DATO -> . tipo_int
    (46) TIPO_DATO -> . tipo_double
    (47) TIPO_DATO -> . tipo_string
    (48) TIPO_DATO -> . tipo_char
    (49) TIPO_DATO -> . tipo_boolean

    id              shift and go to state 45
    reservada_if    shift and go to state 10
    reservada_do    shift and go to state 11
    reservada_while shift and go to state 12
    reservada_void  shift and go to state 13
    reservada_return shift and go to state 46
    reservada_break shift and go to state 47
    reservada_continue shift and go to state 48
    tipo_int        shift and go to state 15
    tipo_double     shift and go to state 16
    tipo_string     shift and go to state 17
    tipo_char       shift and go to state 18
    tipo_boolean    shift and go to state 19

    INSTRUCCIONES                  shift and go to state 32
    DECLARACION                    shift and go to state 33
    ASINGACION                     shift and go to state 34
    PRODIF_ELSE                    shift and go to state 35
    PRODIF                         shift and go to state 36
    PRODDO_WHILE                   shift and go to state 37
    PRODWHILE                      shift and go to state 38
    PRODVOID                       shift and go to state 39
    RETURN                         shift and go to state 40
    BREAK                          shift and go to state 41
    CONTINUE                       shift and go to state 42
    LLAMADA                        shift and go to state 43
    TIPO_DATO                      shift and go to state 44

state 25

    (11) PRODWHILE -> reservada_while OPERACION_FACTORIZADO . INSTRUCCIONES_FACTORIZADO
    (70) INSTRUCCIONES_FACTORIZADO -> . llave_abre INSTRUCCIONES llave_cierra

    llave_abre      shift and go to state 24

    INSTRUCCIONES_FACTORIZADO      shift and go to state 49

state 26

    (14) PRODVOID -> reservada_void id . PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (71) PARAMETROS_FACTORIZADO -> . parentesis_abre PARAMETROS parentesis_cierra

    parentesis_abre shift and go to state 51

    PARAMETROS_FACTORIZADO         shift and go to state 50

state 27

    (15) PRODFUNCION -> TIPO_DATO id . PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO
    (71) PARAMETROS_FACTORIZADO -> . parentesis_abre PARAMETROS parentesis_cierra

    parentesis_abre shift and go to state 51

    PARAMETROS_FACTORIZADO         shift and go to state 52

state 28

    (12) PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO . reservada_else INSTRUCCIONES_FACTORIZADO
    (13) PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .

    reservada_else  shift and go to state 53
    reservada_if    reduce using rule 13 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_do    reduce using rule 13 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_while reduce using rule 13 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_void  reduce using rule 13 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_int        reduce using rule 13 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_double     reduce using rule 13 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_string     reduce using rule 13 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_char       reduce using rule 13 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_boolean    reduce using rule 13 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    $end            reduce using rule 13 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    llave_cierra    reduce using rule 13 (PRODIF -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)


state 29

    (69) OPERACION_FACTORIZADO -> parentesis_abre OPERACION . parentesis_cierra
    (16) OPERACION -> OPERACION . operador_suma OPERACION
    (17) OPERACION -> OPERACION . operador_resta OPERACION
    (18) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (19) OPERACION -> OPERACION . operador_divicion OPERACION
    (20) OPERACION -> OPERACION . operador_resto OPERACION
    (21) OPERACION -> OPERACION . operador_igualacion OPERACION
    (22) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (23) OPERACION -> OPERACION . operador_mayor OPERACION
    (24) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (25) OPERACION -> OPERACION . operador_menor OPERACION
    (26) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (27) OPERACION -> OPERACION . operador_AND OPERACION
    (28) OPERACION -> OPERACION . operador_OR OPERACION
    (29) OPERACION -> OPERACION . operador_NOT OPERACION
    (30) OPERACION -> OPERACION . operador_igual OPERACION

    parentesis_cierra shift and go to state 54
    operador_suma   shift and go to state 55
    operador_resta  shift and go to state 56
    operador_multiplicacion shift and go to state 57
    operador_divicion shift and go to state 58
    operador_resto  shift and go to state 59
    operador_igualacion shift and go to state 60
    operador_diferenciacion shift and go to state 61
    operador_mayor  shift and go to state 62
    operador_mayor_igual shift and go to state 63
    operador_menor  shift and go to state 64
    operador_menor_igual shift and go to state 65
    operador_AND    shift and go to state 66
    operador_OR     shift and go to state 67
    operador_NOT    shift and go to state 68
    operador_igual  shift and go to state 69


state 30

    (31) OPERACION -> numero .

    parentesis_cierra reduce using rule 31 (OPERACION -> numero .)
    operador_suma   reduce using rule 31 (OPERACION -> numero .)
    operador_resta  reduce using rule 31 (OPERACION -> numero .)
    operador_multiplicacion reduce using rule 31 (OPERACION -> numero .)
    operador_divicion reduce using rule 31 (OPERACION -> numero .)
    operador_resto  reduce using rule 31 (OPERACION -> numero .)
    operador_igualacion reduce using rule 31 (OPERACION -> numero .)
    operador_diferenciacion reduce using rule 31 (OPERACION -> numero .)
    operador_mayor  reduce using rule 31 (OPERACION -> numero .)
    operador_mayor_igual reduce using rule 31 (OPERACION -> numero .)
    operador_menor  reduce using rule 31 (OPERACION -> numero .)
    operador_menor_igual reduce using rule 31 (OPERACION -> numero .)
    operador_AND    reduce using rule 31 (OPERACION -> numero .)
    operador_OR     reduce using rule 31 (OPERACION -> numero .)
    operador_NOT    reduce using rule 31 (OPERACION -> numero .)
    operador_igual  reduce using rule 31 (OPERACION -> numero .)


state 31

    (10) PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while . OPERACION_FACTORIZADO punto_coma
    (69) OPERACION_FACTORIZADO -> . parentesis_abre OPERACION parentesis_cierra

    parentesis_abre shift and go to state 22

    OPERACION_FACTORIZADO          shift and go to state 70

state 32

    (70) INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES . llave_cierra

    llave_cierra    shift and go to state 71


state 33

    (32) INSTRUCCIONES -> DECLARACION .

    llave_cierra    reduce using rule 32 (INSTRUCCIONES -> DECLARACION .)


state 34

    (33) INSTRUCCIONES -> ASINGACION .

    llave_cierra    reduce using rule 33 (INSTRUCCIONES -> ASINGACION .)


state 35

    (34) INSTRUCCIONES -> PRODIF_ELSE .

    llave_cierra    reduce using rule 34 (INSTRUCCIONES -> PRODIF_ELSE .)


state 36

    (35) INSTRUCCIONES -> PRODIF .

    llave_cierra    reduce using rule 35 (INSTRUCCIONES -> PRODIF .)


state 37

    (36) INSTRUCCIONES -> PRODDO_WHILE .

    llave_cierra    reduce using rule 36 (INSTRUCCIONES -> PRODDO_WHILE .)


state 38

    (37) INSTRUCCIONES -> PRODWHILE .

    llave_cierra    reduce using rule 37 (INSTRUCCIONES -> PRODWHILE .)


state 39

    (38) INSTRUCCIONES -> PRODVOID .

    llave_cierra    reduce using rule 38 (INSTRUCCIONES -> PRODVOID .)


state 40

    (39) INSTRUCCIONES -> RETURN .

    llave_cierra    reduce using rule 39 (INSTRUCCIONES -> RETURN .)


state 41

    (40) INSTRUCCIONES -> BREAK .

    llave_cierra    reduce using rule 40 (INSTRUCCIONES -> BREAK .)


state 42

    (41) INSTRUCCIONES -> CONTINUE .

    llave_cierra    reduce using rule 41 (INSTRUCCIONES -> CONTINUE .)


state 43

    (42) INSTRUCCIONES -> LLAMADA .

    llave_cierra    reduce using rule 42 (INSTRUCCIONES -> LLAMADA .)


state 44

    (43) DECLARACION -> TIPO_DATO . id operador_igual DATO punto_coma

    id              shift and go to state 72


state 45

    (44) ASINGACION -> id . operador_igual DATO punto_coma
    (60) LLAMADA -> id . parentesis_abre ARGUMENTOS parentesis_cierra

    operador_igual  shift and go to state 73
    parentesis_abre shift and go to state 74


state 46

    (65) RETURN -> reservada_return . punto_coma
    (66) RETURN -> reservada_return . DATO punto_coma
    (50) DATO -> . numero
    (51) DATO -> . dato_double
    (52) DATO -> . dato_string
    (53) DATO -> . dato_char
    (54) DATO -> . dato_boolean_true
    (55) DATO -> . dato_boolean_false

    punto_coma      shift and go to state 75
    numero          shift and go to state 77
    dato_double     shift and go to state 78
    dato_string     shift and go to state 79
    dato_char       shift and go to state 80
    dato_boolean_true shift and go to state 81
    dato_boolean_false shift and go to state 82

    DATO                           shift and go to state 76

state 47

    (67) BREAK -> reservada_break . punto_coma

    punto_coma      shift and go to state 83


state 48

    (68) CONTINUE -> reservada_continue . punto_coma

    punto_coma      shift and go to state 84


state 49

    (11) PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .

    reservada_if    reduce using rule 11 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_do    reduce using rule 11 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_while reduce using rule 11 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_void  reduce using rule 11 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_int        reduce using rule 11 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_double     reduce using rule 11 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_string     reduce using rule 11 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_char       reduce using rule 11 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_boolean    reduce using rule 11 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    $end            reduce using rule 11 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    llave_cierra    reduce using rule 11 (PRODWHILE -> reservada_while OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)


state 50

    (14) PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO . INSTRUCCIONES_FACTORIZADO
    (70) INSTRUCCIONES_FACTORIZADO -> . llave_abre INSTRUCCIONES llave_cierra

    llave_abre      shift and go to state 24

    INSTRUCCIONES_FACTORIZADO      shift and go to state 85

state 51

    (71) PARAMETROS_FACTORIZADO -> parentesis_abre . PARAMETROS parentesis_cierra
    (57) PARAMETROS -> . PARAMETROS coma PARAMETRO
    (58) PARAMETROS -> . PARAMETRO
    (59) PARAMETROS -> .
    (56) PARAMETRO -> . TIPO_DATO id
    (45) TIPO_DATO -> . tipo_int
    (46) TIPO_DATO -> . tipo_double
    (47) TIPO_DATO -> . tipo_string
    (48) TIPO_DATO -> . tipo_char
    (49) TIPO_DATO -> . tipo_boolean

    parentesis_cierra reduce using rule 59 (PARAMETROS -> .)
    coma            reduce using rule 59 (PARAMETROS -> .)
    tipo_int        shift and go to state 15
    tipo_double     shift and go to state 16
    tipo_string     shift and go to state 17
    tipo_char       shift and go to state 18
    tipo_boolean    shift and go to state 19

    PARAMETROS                     shift and go to state 86
    PARAMETRO                      shift and go to state 87
    TIPO_DATO                      shift and go to state 88

state 52

    (15) PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO . INSTRUCCIONES_FACTORIZADO
    (70) INSTRUCCIONES_FACTORIZADO -> . llave_abre INSTRUCCIONES llave_cierra

    llave_abre      shift and go to state 24

    INSTRUCCIONES_FACTORIZADO      shift and go to state 89

state 53

    (12) PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else . INSTRUCCIONES_FACTORIZADO
    (70) INSTRUCCIONES_FACTORIZADO -> . llave_abre INSTRUCCIONES llave_cierra

    llave_abre      shift and go to state 24

    INSTRUCCIONES_FACTORIZADO      shift and go to state 90

state 54

    (69) OPERACION_FACTORIZADO -> parentesis_abre OPERACION parentesis_cierra .

    llave_abre      reduce using rule 69 (OPERACION_FACTORIZADO -> parentesis_abre OPERACION parentesis_cierra .)
    punto_coma      reduce using rule 69 (OPERACION_FACTORIZADO -> parentesis_abre OPERACION parentesis_cierra .)


state 55

    (16) OPERACION -> OPERACION operador_suma . OPERACION
    (16) OPERACION -> . OPERACION operador_suma OPERACION
    (17) OPERACION -> . OPERACION operador_resta OPERACION
    (18) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (19) OPERACION -> . OPERACION operador_divicion OPERACION
    (20) OPERACION -> . OPERACION operador_resto OPERACION
    (21) OPERACION -> . OPERACION operador_igualacion OPERACION
    (22) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (23) OPERACION -> . OPERACION operador_mayor OPERACION
    (24) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (25) OPERACION -> . OPERACION operador_menor OPERACION
    (26) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (27) OPERACION -> . OPERACION operador_AND OPERACION
    (28) OPERACION -> . OPERACION operador_OR OPERACION
    (29) OPERACION -> . OPERACION operador_NOT OPERACION
    (30) OPERACION -> . OPERACION operador_igual OPERACION
    (31) OPERACION -> . numero

    numero          shift and go to state 30

    OPERACION                      shift and go to state 91

state 56

    (17) OPERACION -> OPERACION operador_resta . OPERACION
    (16) OPERACION -> . OPERACION operador_suma OPERACION
    (17) OPERACION -> . OPERACION operador_resta OPERACION
    (18) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (19) OPERACION -> . OPERACION operador_divicion OPERACION
    (20) OPERACION -> . OPERACION operador_resto OPERACION
    (21) OPERACION -> . OPERACION operador_igualacion OPERACION
    (22) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (23) OPERACION -> . OPERACION operador_mayor OPERACION
    (24) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (25) OPERACION -> . OPERACION operador_menor OPERACION
    (26) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (27) OPERACION -> . OPERACION operador_AND OPERACION
    (28) OPERACION -> . OPERACION operador_OR OPERACION
    (29) OPERACION -> . OPERACION operador_NOT OPERACION
    (30) OPERACION -> . OPERACION operador_igual OPERACION
    (31) OPERACION -> . numero

    numero          shift and go to state 30

    OPERACION                      shift and go to state 92

state 57

    (18) OPERACION -> OPERACION operador_multiplicacion . OPERACION
    (16) OPERACION -> . OPERACION operador_suma OPERACION
    (17) OPERACION -> . OPERACION operador_resta OPERACION
    (18) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (19) OPERACION -> . OPERACION operador_divicion OPERACION
    (20) OPERACION -> . OPERACION operador_resto OPERACION
    (21) OPERACION -> . OPERACION operador_igualacion OPERACION
    (22) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (23) OPERACION -> . OPERACION operador_mayor OPERACION
    (24) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (25) OPERACION -> . OPERACION operador_menor OPERACION
    (26) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (27) OPERACION -> . OPERACION operador_AND OPERACION
    (28) OPERACION -> . OPERACION operador_OR OPERACION
    (29) OPERACION -> . OPERACION operador_NOT OPERACION
    (30) OPERACION -> . OPERACION operador_igual OPERACION
    (31) OPERACION -> . numero

    numero          shift and go to state 30

    OPERACION                      shift and go to state 93

state 58

    (19) OPERACION -> OPERACION operador_divicion . OPERACION
    (16) OPERACION -> . OPERACION operador_suma OPERACION
    (17) OPERACION -> . OPERACION operador_resta OPERACION
    (18) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (19) OPERACION -> . OPERACION operador_divicion OPERACION
    (20) OPERACION -> . OPERACION operador_resto OPERACION
    (21) OPERACION -> . OPERACION operador_igualacion OPERACION
    (22) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (23) OPERACION -> . OPERACION operador_mayor OPERACION
    (24) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (25) OPERACION -> . OPERACION operador_menor OPERACION
    (26) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (27) OPERACION -> . OPERACION operador_AND OPERACION
    (28) OPERACION -> . OPERACION operador_OR OPERACION
    (29) OPERACION -> . OPERACION operador_NOT OPERACION
    (30) OPERACION -> . OPERACION operador_igual OPERACION
    (31) OPERACION -> . numero

    numero          shift and go to state 30

    OPERACION                      shift and go to state 94

state 59

    (20) OPERACION -> OPERACION operador_resto . OPERACION
    (16) OPERACION -> . OPERACION operador_suma OPERACION
    (17) OPERACION -> . OPERACION operador_resta OPERACION
    (18) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (19) OPERACION -> . OPERACION operador_divicion OPERACION
    (20) OPERACION -> . OPERACION operador_resto OPERACION
    (21) OPERACION -> . OPERACION operador_igualacion OPERACION
    (22) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (23) OPERACION -> . OPERACION operador_mayor OPERACION
    (24) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (25) OPERACION -> . OPERACION operador_menor OPERACION
    (26) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (27) OPERACION -> . OPERACION operador_AND OPERACION
    (28) OPERACION -> . OPERACION operador_OR OPERACION
    (29) OPERACION -> . OPERACION operador_NOT OPERACION
    (30) OPERACION -> . OPERACION operador_igual OPERACION
    (31) OPERACION -> . numero

    numero          shift and go to state 30

    OPERACION                      shift and go to state 95

state 60

    (21) OPERACION -> OPERACION operador_igualacion . OPERACION
    (16) OPERACION -> . OPERACION operador_suma OPERACION
    (17) OPERACION -> . OPERACION operador_resta OPERACION
    (18) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (19) OPERACION -> . OPERACION operador_divicion OPERACION
    (20) OPERACION -> . OPERACION operador_resto OPERACION
    (21) OPERACION -> . OPERACION operador_igualacion OPERACION
    (22) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (23) OPERACION -> . OPERACION operador_mayor OPERACION
    (24) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (25) OPERACION -> . OPERACION operador_menor OPERACION
    (26) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (27) OPERACION -> . OPERACION operador_AND OPERACION
    (28) OPERACION -> . OPERACION operador_OR OPERACION
    (29) OPERACION -> . OPERACION operador_NOT OPERACION
    (30) OPERACION -> . OPERACION operador_igual OPERACION
    (31) OPERACION -> . numero

    numero          shift and go to state 30

    OPERACION                      shift and go to state 96

state 61

    (22) OPERACION -> OPERACION operador_diferenciacion . OPERACION
    (16) OPERACION -> . OPERACION operador_suma OPERACION
    (17) OPERACION -> . OPERACION operador_resta OPERACION
    (18) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (19) OPERACION -> . OPERACION operador_divicion OPERACION
    (20) OPERACION -> . OPERACION operador_resto OPERACION
    (21) OPERACION -> . OPERACION operador_igualacion OPERACION
    (22) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (23) OPERACION -> . OPERACION operador_mayor OPERACION
    (24) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (25) OPERACION -> . OPERACION operador_menor OPERACION
    (26) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (27) OPERACION -> . OPERACION operador_AND OPERACION
    (28) OPERACION -> . OPERACION operador_OR OPERACION
    (29) OPERACION -> . OPERACION operador_NOT OPERACION
    (30) OPERACION -> . OPERACION operador_igual OPERACION
    (31) OPERACION -> . numero

    numero          shift and go to state 30

    OPERACION                      shift and go to state 97

state 62

    (23) OPERACION -> OPERACION operador_mayor . OPERACION
    (16) OPERACION -> . OPERACION operador_suma OPERACION
    (17) OPERACION -> . OPERACION operador_resta OPERACION
    (18) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (19) OPERACION -> . OPERACION operador_divicion OPERACION
    (20) OPERACION -> . OPERACION operador_resto OPERACION
    (21) OPERACION -> . OPERACION operador_igualacion OPERACION
    (22) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (23) OPERACION -> . OPERACION operador_mayor OPERACION
    (24) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (25) OPERACION -> . OPERACION operador_menor OPERACION
    (26) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (27) OPERACION -> . OPERACION operador_AND OPERACION
    (28) OPERACION -> . OPERACION operador_OR OPERACION
    (29) OPERACION -> . OPERACION operador_NOT OPERACION
    (30) OPERACION -> . OPERACION operador_igual OPERACION
    (31) OPERACION -> . numero

    numero          shift and go to state 30

    OPERACION                      shift and go to state 98

state 63

    (24) OPERACION -> OPERACION operador_mayor_igual . OPERACION
    (16) OPERACION -> . OPERACION operador_suma OPERACION
    (17) OPERACION -> . OPERACION operador_resta OPERACION
    (18) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (19) OPERACION -> . OPERACION operador_divicion OPERACION
    (20) OPERACION -> . OPERACION operador_resto OPERACION
    (21) OPERACION -> . OPERACION operador_igualacion OPERACION
    (22) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (23) OPERACION -> . OPERACION operador_mayor OPERACION
    (24) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (25) OPERACION -> . OPERACION operador_menor OPERACION
    (26) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (27) OPERACION -> . OPERACION operador_AND OPERACION
    (28) OPERACION -> . OPERACION operador_OR OPERACION
    (29) OPERACION -> . OPERACION operador_NOT OPERACION
    (30) OPERACION -> . OPERACION operador_igual OPERACION
    (31) OPERACION -> . numero

    numero          shift and go to state 30

    OPERACION                      shift and go to state 99

state 64

    (25) OPERACION -> OPERACION operador_menor . OPERACION
    (16) OPERACION -> . OPERACION operador_suma OPERACION
    (17) OPERACION -> . OPERACION operador_resta OPERACION
    (18) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (19) OPERACION -> . OPERACION operador_divicion OPERACION
    (20) OPERACION -> . OPERACION operador_resto OPERACION
    (21) OPERACION -> . OPERACION operador_igualacion OPERACION
    (22) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (23) OPERACION -> . OPERACION operador_mayor OPERACION
    (24) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (25) OPERACION -> . OPERACION operador_menor OPERACION
    (26) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (27) OPERACION -> . OPERACION operador_AND OPERACION
    (28) OPERACION -> . OPERACION operador_OR OPERACION
    (29) OPERACION -> . OPERACION operador_NOT OPERACION
    (30) OPERACION -> . OPERACION operador_igual OPERACION
    (31) OPERACION -> . numero

    numero          shift and go to state 30

    OPERACION                      shift and go to state 100

state 65

    (26) OPERACION -> OPERACION operador_menor_igual . OPERACION
    (16) OPERACION -> . OPERACION operador_suma OPERACION
    (17) OPERACION -> . OPERACION operador_resta OPERACION
    (18) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (19) OPERACION -> . OPERACION operador_divicion OPERACION
    (20) OPERACION -> . OPERACION operador_resto OPERACION
    (21) OPERACION -> . OPERACION operador_igualacion OPERACION
    (22) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (23) OPERACION -> . OPERACION operador_mayor OPERACION
    (24) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (25) OPERACION -> . OPERACION operador_menor OPERACION
    (26) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (27) OPERACION -> . OPERACION operador_AND OPERACION
    (28) OPERACION -> . OPERACION operador_OR OPERACION
    (29) OPERACION -> . OPERACION operador_NOT OPERACION
    (30) OPERACION -> . OPERACION operador_igual OPERACION
    (31) OPERACION -> . numero

    numero          shift and go to state 30

    OPERACION                      shift and go to state 101

state 66

    (27) OPERACION -> OPERACION operador_AND . OPERACION
    (16) OPERACION -> . OPERACION operador_suma OPERACION
    (17) OPERACION -> . OPERACION operador_resta OPERACION
    (18) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (19) OPERACION -> . OPERACION operador_divicion OPERACION
    (20) OPERACION -> . OPERACION operador_resto OPERACION
    (21) OPERACION -> . OPERACION operador_igualacion OPERACION
    (22) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (23) OPERACION -> . OPERACION operador_mayor OPERACION
    (24) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (25) OPERACION -> . OPERACION operador_menor OPERACION
    (26) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (27) OPERACION -> . OPERACION operador_AND OPERACION
    (28) OPERACION -> . OPERACION operador_OR OPERACION
    (29) OPERACION -> . OPERACION operador_NOT OPERACION
    (30) OPERACION -> . OPERACION operador_igual OPERACION
    (31) OPERACION -> . numero

    numero          shift and go to state 30

    OPERACION                      shift and go to state 102

state 67

    (28) OPERACION -> OPERACION operador_OR . OPERACION
    (16) OPERACION -> . OPERACION operador_suma OPERACION
    (17) OPERACION -> . OPERACION operador_resta OPERACION
    (18) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (19) OPERACION -> . OPERACION operador_divicion OPERACION
    (20) OPERACION -> . OPERACION operador_resto OPERACION
    (21) OPERACION -> . OPERACION operador_igualacion OPERACION
    (22) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (23) OPERACION -> . OPERACION operador_mayor OPERACION
    (24) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (25) OPERACION -> . OPERACION operador_menor OPERACION
    (26) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (27) OPERACION -> . OPERACION operador_AND OPERACION
    (28) OPERACION -> . OPERACION operador_OR OPERACION
    (29) OPERACION -> . OPERACION operador_NOT OPERACION
    (30) OPERACION -> . OPERACION operador_igual OPERACION
    (31) OPERACION -> . numero

    numero          shift and go to state 30

    OPERACION                      shift and go to state 103

state 68

    (29) OPERACION -> OPERACION operador_NOT . OPERACION
    (16) OPERACION -> . OPERACION operador_suma OPERACION
    (17) OPERACION -> . OPERACION operador_resta OPERACION
    (18) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (19) OPERACION -> . OPERACION operador_divicion OPERACION
    (20) OPERACION -> . OPERACION operador_resto OPERACION
    (21) OPERACION -> . OPERACION operador_igualacion OPERACION
    (22) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (23) OPERACION -> . OPERACION operador_mayor OPERACION
    (24) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (25) OPERACION -> . OPERACION operador_menor OPERACION
    (26) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (27) OPERACION -> . OPERACION operador_AND OPERACION
    (28) OPERACION -> . OPERACION operador_OR OPERACION
    (29) OPERACION -> . OPERACION operador_NOT OPERACION
    (30) OPERACION -> . OPERACION operador_igual OPERACION
    (31) OPERACION -> . numero

    numero          shift and go to state 30

    OPERACION                      shift and go to state 104

state 69

    (30) OPERACION -> OPERACION operador_igual . OPERACION
    (16) OPERACION -> . OPERACION operador_suma OPERACION
    (17) OPERACION -> . OPERACION operador_resta OPERACION
    (18) OPERACION -> . OPERACION operador_multiplicacion OPERACION
    (19) OPERACION -> . OPERACION operador_divicion OPERACION
    (20) OPERACION -> . OPERACION operador_resto OPERACION
    (21) OPERACION -> . OPERACION operador_igualacion OPERACION
    (22) OPERACION -> . OPERACION operador_diferenciacion OPERACION
    (23) OPERACION -> . OPERACION operador_mayor OPERACION
    (24) OPERACION -> . OPERACION operador_mayor_igual OPERACION
    (25) OPERACION -> . OPERACION operador_menor OPERACION
    (26) OPERACION -> . OPERACION operador_menor_igual OPERACION
    (27) OPERACION -> . OPERACION operador_AND OPERACION
    (28) OPERACION -> . OPERACION operador_OR OPERACION
    (29) OPERACION -> . OPERACION operador_NOT OPERACION
    (30) OPERACION -> . OPERACION operador_igual OPERACION
    (31) OPERACION -> . numero

    numero          shift and go to state 30

    OPERACION                      shift and go to state 105

state 70

    (10) PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO . punto_coma

    punto_coma      shift and go to state 106


state 71

    (70) INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .

    reservada_while reduce using rule 70 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    reservada_else  reduce using rule 70 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    reservada_if    reduce using rule 70 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    reservada_do    reduce using rule 70 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    reservada_void  reduce using rule 70 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    tipo_int        reduce using rule 70 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    tipo_double     reduce using rule 70 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    tipo_string     reduce using rule 70 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    tipo_char       reduce using rule 70 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    tipo_boolean    reduce using rule 70 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    $end            reduce using rule 70 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)
    llave_cierra    reduce using rule 70 (INSTRUCCIONES_FACTORIZADO -> llave_abre INSTRUCCIONES llave_cierra .)


state 72

    (43) DECLARACION -> TIPO_DATO id . operador_igual DATO punto_coma

    operador_igual  shift and go to state 107


state 73

    (44) ASINGACION -> id operador_igual . DATO punto_coma
    (50) DATO -> . numero
    (51) DATO -> . dato_double
    (52) DATO -> . dato_string
    (53) DATO -> . dato_char
    (54) DATO -> . dato_boolean_true
    (55) DATO -> . dato_boolean_false

    numero          shift and go to state 77
    dato_double     shift and go to state 78
    dato_string     shift and go to state 79
    dato_char       shift and go to state 80
    dato_boolean_true shift and go to state 81
    dato_boolean_false shift and go to state 82

    DATO                           shift and go to state 108

state 74

    (60) LLAMADA -> id parentesis_abre . ARGUMENTOS parentesis_cierra
    (61) ARGUMENTOS -> . ARGUMENTOS coma ARGUMENTO
    (62) ARGUMENTOS -> . ARGUMENTO
    (63) ARGUMENTOS -> .
    (64) ARGUMENTO -> . DATO
    (50) DATO -> . numero
    (51) DATO -> . dato_double
    (52) DATO -> . dato_string
    (53) DATO -> . dato_char
    (54) DATO -> . dato_boolean_true
    (55) DATO -> . dato_boolean_false

    parentesis_cierra reduce using rule 63 (ARGUMENTOS -> .)
    coma            reduce using rule 63 (ARGUMENTOS -> .)
    numero          shift and go to state 77
    dato_double     shift and go to state 78
    dato_string     shift and go to state 79
    dato_char       shift and go to state 80
    dato_boolean_true shift and go to state 81
    dato_boolean_false shift and go to state 82

    ARGUMENTOS                     shift and go to state 109
    ARGUMENTO                      shift and go to state 110
    DATO                           shift and go to state 111

state 75

    (65) RETURN -> reservada_return punto_coma .

    llave_cierra    reduce using rule 65 (RETURN -> reservada_return punto_coma .)


state 76

    (66) RETURN -> reservada_return DATO . punto_coma

    punto_coma      shift and go to state 112


state 77

    (50) DATO -> numero .

    punto_coma      reduce using rule 50 (DATO -> numero .)
    parentesis_cierra reduce using rule 50 (DATO -> numero .)
    coma            reduce using rule 50 (DATO -> numero .)


state 78

    (51) DATO -> dato_double .

    punto_coma      reduce using rule 51 (DATO -> dato_double .)
    parentesis_cierra reduce using rule 51 (DATO -> dato_double .)
    coma            reduce using rule 51 (DATO -> dato_double .)


state 79

    (52) DATO -> dato_string .

    punto_coma      reduce using rule 52 (DATO -> dato_string .)
    parentesis_cierra reduce using rule 52 (DATO -> dato_string .)
    coma            reduce using rule 52 (DATO -> dato_string .)


state 80

    (53) DATO -> dato_char .

    punto_coma      reduce using rule 53 (DATO -> dato_char .)
    parentesis_cierra reduce using rule 53 (DATO -> dato_char .)
    coma            reduce using rule 53 (DATO -> dato_char .)


state 81

    (54) DATO -> dato_boolean_true .

    punto_coma      reduce using rule 54 (DATO -> dato_boolean_true .)
    parentesis_cierra reduce using rule 54 (DATO -> dato_boolean_true .)
    coma            reduce using rule 54 (DATO -> dato_boolean_true .)


state 82

    (55) DATO -> dato_boolean_false .

    punto_coma      reduce using rule 55 (DATO -> dato_boolean_false .)
    parentesis_cierra reduce using rule 55 (DATO -> dato_boolean_false .)
    coma            reduce using rule 55 (DATO -> dato_boolean_false .)


state 83

    (67) BREAK -> reservada_break punto_coma .

    llave_cierra    reduce using rule 67 (BREAK -> reservada_break punto_coma .)


state 84

    (68) CONTINUE -> reservada_continue punto_coma .

    llave_cierra    reduce using rule 68 (CONTINUE -> reservada_continue punto_coma .)


state 85

    (14) PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .

    reservada_if    reduce using rule 14 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_do    reduce using rule 14 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_while reduce using rule 14 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_void  reduce using rule 14 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_int        reduce using rule 14 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_double     reduce using rule 14 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_string     reduce using rule 14 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_char       reduce using rule 14 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_boolean    reduce using rule 14 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    $end            reduce using rule 14 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    llave_cierra    reduce using rule 14 (PRODVOID -> reservada_void id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)


state 86

    (71) PARAMETROS_FACTORIZADO -> parentesis_abre PARAMETROS . parentesis_cierra
    (57) PARAMETROS -> PARAMETROS . coma PARAMETRO

    parentesis_cierra shift and go to state 113
    coma            shift and go to state 114


state 87

    (58) PARAMETROS -> PARAMETRO .

    parentesis_cierra reduce using rule 58 (PARAMETROS -> PARAMETRO .)
    coma            reduce using rule 58 (PARAMETROS -> PARAMETRO .)


state 88

    (56) PARAMETRO -> TIPO_DATO . id

    id              shift and go to state 115


state 89

    (15) PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .

    reservada_if    reduce using rule 15 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_do    reduce using rule 15 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_while reduce using rule 15 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    reservada_void  reduce using rule 15 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_int        reduce using rule 15 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_double     reduce using rule 15 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_string     reduce using rule 15 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_char       reduce using rule 15 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    tipo_boolean    reduce using rule 15 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)
    $end            reduce using rule 15 (PRODFUNCION -> TIPO_DATO id PARAMETROS_FACTORIZADO INSTRUCCIONES_FACTORIZADO .)


state 90

    (12) PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .

    reservada_if    reduce using rule 12 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    reservada_do    reduce using rule 12 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    reservada_while reduce using rule 12 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    reservada_void  reduce using rule 12 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    tipo_int        reduce using rule 12 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    tipo_double     reduce using rule 12 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    tipo_string     reduce using rule 12 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    tipo_char       reduce using rule 12 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    tipo_boolean    reduce using rule 12 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    $end            reduce using rule 12 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)
    llave_cierra    reduce using rule 12 (PRODIF_ELSE -> reservada_if OPERACION_FACTORIZADO INSTRUCCIONES_FACTORIZADO reservada_else INSTRUCCIONES_FACTORIZADO .)


state 91

    (16) OPERACION -> OPERACION operador_suma OPERACION .
    (16) OPERACION -> OPERACION . operador_suma OPERACION
    (17) OPERACION -> OPERACION . operador_resta OPERACION
    (18) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (19) OPERACION -> OPERACION . operador_divicion OPERACION
    (20) OPERACION -> OPERACION . operador_resto OPERACION
    (21) OPERACION -> OPERACION . operador_igualacion OPERACION
    (22) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (23) OPERACION -> OPERACION . operador_mayor OPERACION
    (24) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (25) OPERACION -> OPERACION . operador_menor OPERACION
    (26) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (27) OPERACION -> OPERACION . operador_AND OPERACION
    (28) OPERACION -> OPERACION . operador_OR OPERACION
    (29) OPERACION -> OPERACION . operador_NOT OPERACION
    (30) OPERACION -> OPERACION . operador_igual OPERACION

    parentesis_cierra reduce using rule 16 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_suma   reduce using rule 16 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_resta  reduce using rule 16 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_divicion reduce using rule 16 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_igualacion reduce using rule 16 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_diferenciacion reduce using rule 16 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_mayor  reduce using rule 16 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_mayor_igual reduce using rule 16 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_menor  reduce using rule 16 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_menor_igual reduce using rule 16 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_AND    reduce using rule 16 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_OR     reduce using rule 16 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_igual  reduce using rule 16 (OPERACION -> OPERACION operador_suma OPERACION .)
    operador_multiplicacion shift and go to state 57
    operador_resto  shift and go to state 59
    operador_NOT    shift and go to state 68

  ! operador_multiplicacion [ reduce using rule 16 (OPERACION -> OPERACION operador_suma OPERACION .) ]
  ! operador_resto  [ reduce using rule 16 (OPERACION -> OPERACION operador_suma OPERACION .) ]
  ! operador_NOT    [ reduce using rule 16 (OPERACION -> OPERACION operador_suma OPERACION .) ]
  ! operador_suma   [ shift and go to state 55 ]
  ! operador_resta  [ shift and go to state 56 ]
  ! operador_divicion [ shift and go to state 58 ]
  ! operador_igualacion [ shift and go to state 60 ]
  ! operador_diferenciacion [ shift and go to state 61 ]
  ! operador_mayor  [ shift and go to state 62 ]
  ! operador_mayor_igual [ shift and go to state 63 ]
  ! operador_menor  [ shift and go to state 64 ]
  ! operador_menor_igual [ shift and go to state 65 ]
  ! operador_AND    [ shift and go to state 66 ]
  ! operador_OR     [ shift and go to state 67 ]
  ! operador_igual  [ shift and go to state 69 ]


state 92

    (17) OPERACION -> OPERACION operador_resta OPERACION .
    (16) OPERACION -> OPERACION . operador_suma OPERACION
    (17) OPERACION -> OPERACION . operador_resta OPERACION
    (18) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (19) OPERACION -> OPERACION . operador_divicion OPERACION
    (20) OPERACION -> OPERACION . operador_resto OPERACION
    (21) OPERACION -> OPERACION . operador_igualacion OPERACION
    (22) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (23) OPERACION -> OPERACION . operador_mayor OPERACION
    (24) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (25) OPERACION -> OPERACION . operador_menor OPERACION
    (26) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (27) OPERACION -> OPERACION . operador_AND OPERACION
    (28) OPERACION -> OPERACION . operador_OR OPERACION
    (29) OPERACION -> OPERACION . operador_NOT OPERACION
    (30) OPERACION -> OPERACION . operador_igual OPERACION

    parentesis_cierra reduce using rule 17 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_suma   reduce using rule 17 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_resta  reduce using rule 17 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_divicion reduce using rule 17 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_igualacion reduce using rule 17 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_diferenciacion reduce using rule 17 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_mayor  reduce using rule 17 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_mayor_igual reduce using rule 17 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_menor  reduce using rule 17 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_menor_igual reduce using rule 17 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_AND    reduce using rule 17 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_OR     reduce using rule 17 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_igual  reduce using rule 17 (OPERACION -> OPERACION operador_resta OPERACION .)
    operador_multiplicacion shift and go to state 57
    operador_resto  shift and go to state 59
    operador_NOT    shift and go to state 68

  ! operador_multiplicacion [ reduce using rule 17 (OPERACION -> OPERACION operador_resta OPERACION .) ]
  ! operador_resto  [ reduce using rule 17 (OPERACION -> OPERACION operador_resta OPERACION .) ]
  ! operador_NOT    [ reduce using rule 17 (OPERACION -> OPERACION operador_resta OPERACION .) ]
  ! operador_suma   [ shift and go to state 55 ]
  ! operador_resta  [ shift and go to state 56 ]
  ! operador_divicion [ shift and go to state 58 ]
  ! operador_igualacion [ shift and go to state 60 ]
  ! operador_diferenciacion [ shift and go to state 61 ]
  ! operador_mayor  [ shift and go to state 62 ]
  ! operador_mayor_igual [ shift and go to state 63 ]
  ! operador_menor  [ shift and go to state 64 ]
  ! operador_menor_igual [ shift and go to state 65 ]
  ! operador_AND    [ shift and go to state 66 ]
  ! operador_OR     [ shift and go to state 67 ]
  ! operador_igual  [ shift and go to state 69 ]


state 93

    (18) OPERACION -> OPERACION operador_multiplicacion OPERACION .
    (16) OPERACION -> OPERACION . operador_suma OPERACION
    (17) OPERACION -> OPERACION . operador_resta OPERACION
    (18) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (19) OPERACION -> OPERACION . operador_divicion OPERACION
    (20) OPERACION -> OPERACION . operador_resto OPERACION
    (21) OPERACION -> OPERACION . operador_igualacion OPERACION
    (22) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (23) OPERACION -> OPERACION . operador_mayor OPERACION
    (24) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (25) OPERACION -> OPERACION . operador_menor OPERACION
    (26) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (27) OPERACION -> OPERACION . operador_AND OPERACION
    (28) OPERACION -> OPERACION . operador_OR OPERACION
    (29) OPERACION -> OPERACION . operador_NOT OPERACION
    (30) OPERACION -> OPERACION . operador_igual OPERACION

    parentesis_cierra reduce using rule 18 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_suma   reduce using rule 18 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_resta  reduce using rule 18 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_multiplicacion reduce using rule 18 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_divicion reduce using rule 18 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_resto  reduce using rule 18 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_igualacion reduce using rule 18 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_diferenciacion reduce using rule 18 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_mayor  reduce using rule 18 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_mayor_igual reduce using rule 18 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_menor  reduce using rule 18 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_menor_igual reduce using rule 18 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_AND    reduce using rule 18 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_OR     reduce using rule 18 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_igual  reduce using rule 18 (OPERACION -> OPERACION operador_multiplicacion OPERACION .)
    operador_NOT    shift and go to state 68

  ! operador_NOT    [ reduce using rule 18 (OPERACION -> OPERACION operador_multiplicacion OPERACION .) ]
  ! operador_suma   [ shift and go to state 55 ]
  ! operador_resta  [ shift and go to state 56 ]
  ! operador_multiplicacion [ shift and go to state 57 ]
  ! operador_divicion [ shift and go to state 58 ]
  ! operador_resto  [ shift and go to state 59 ]
  ! operador_igualacion [ shift and go to state 60 ]
  ! operador_diferenciacion [ shift and go to state 61 ]
  ! operador_mayor  [ shift and go to state 62 ]
  ! operador_mayor_igual [ shift and go to state 63 ]
  ! operador_menor  [ shift and go to state 64 ]
  ! operador_menor_igual [ shift and go to state 65 ]
  ! operador_AND    [ shift and go to state 66 ]
  ! operador_OR     [ shift and go to state 67 ]
  ! operador_igual  [ shift and go to state 69 ]


state 94

    (19) OPERACION -> OPERACION operador_divicion OPERACION .
    (16) OPERACION -> OPERACION . operador_suma OPERACION
    (17) OPERACION -> OPERACION . operador_resta OPERACION
    (18) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (19) OPERACION -> OPERACION . operador_divicion OPERACION
    (20) OPERACION -> OPERACION . operador_resto OPERACION
    (21) OPERACION -> OPERACION . operador_igualacion OPERACION
    (22) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (23) OPERACION -> OPERACION . operador_mayor OPERACION
    (24) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (25) OPERACION -> OPERACION . operador_menor OPERACION
    (26) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (27) OPERACION -> OPERACION . operador_AND OPERACION
    (28) OPERACION -> OPERACION . operador_OR OPERACION
    (29) OPERACION -> OPERACION . operador_NOT OPERACION
    (30) OPERACION -> OPERACION . operador_igual OPERACION

  ! shift/reduce conflict for operador_suma resolved as shift
  ! shift/reduce conflict for operador_resta resolved as shift
  ! shift/reduce conflict for operador_multiplicacion resolved as shift
  ! shift/reduce conflict for operador_divicion resolved as shift
  ! shift/reduce conflict for operador_resto resolved as shift
  ! shift/reduce conflict for operador_igualacion resolved as shift
  ! shift/reduce conflict for operador_diferenciacion resolved as shift
  ! shift/reduce conflict for operador_mayor resolved as shift
  ! shift/reduce conflict for operador_mayor_igual resolved as shift
  ! shift/reduce conflict for operador_menor resolved as shift
  ! shift/reduce conflict for operador_menor_igual resolved as shift
  ! shift/reduce conflict for operador_AND resolved as shift
  ! shift/reduce conflict for operador_OR resolved as shift
  ! shift/reduce conflict for operador_NOT resolved as shift
  ! shift/reduce conflict for operador_igual resolved as shift
    parentesis_cierra reduce using rule 19 (OPERACION -> OPERACION operador_divicion OPERACION .)
    operador_suma   shift and go to state 55
    operador_resta  shift and go to state 56
    operador_multiplicacion shift and go to state 57
    operador_divicion shift and go to state 58
    operador_resto  shift and go to state 59
    operador_igualacion shift and go to state 60
    operador_diferenciacion shift and go to state 61
    operador_mayor  shift and go to state 62
    operador_mayor_igual shift and go to state 63
    operador_menor  shift and go to state 64
    operador_menor_igual shift and go to state 65
    operador_AND    shift and go to state 66
    operador_OR     shift and go to state 67
    operador_NOT    shift and go to state 68
    operador_igual  shift and go to state 69

  ! operador_suma   [ reduce using rule 19 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_resta  [ reduce using rule 19 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 19 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_divicion [ reduce using rule 19 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_resto  [ reduce using rule 19 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_igualacion [ reduce using rule 19 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_diferenciacion [ reduce using rule 19 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_mayor  [ reduce using rule 19 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_mayor_igual [ reduce using rule 19 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_menor  [ reduce using rule 19 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_menor_igual [ reduce using rule 19 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_AND    [ reduce using rule 19 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_OR     [ reduce using rule 19 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_NOT    [ reduce using rule 19 (OPERACION -> OPERACION operador_divicion OPERACION .) ]
  ! operador_igual  [ reduce using rule 19 (OPERACION -> OPERACION operador_divicion OPERACION .) ]


state 95

    (20) OPERACION -> OPERACION operador_resto OPERACION .
    (16) OPERACION -> OPERACION . operador_suma OPERACION
    (17) OPERACION -> OPERACION . operador_resta OPERACION
    (18) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (19) OPERACION -> OPERACION . operador_divicion OPERACION
    (20) OPERACION -> OPERACION . operador_resto OPERACION
    (21) OPERACION -> OPERACION . operador_igualacion OPERACION
    (22) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (23) OPERACION -> OPERACION . operador_mayor OPERACION
    (24) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (25) OPERACION -> OPERACION . operador_menor OPERACION
    (26) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (27) OPERACION -> OPERACION . operador_AND OPERACION
    (28) OPERACION -> OPERACION . operador_OR OPERACION
    (29) OPERACION -> OPERACION . operador_NOT OPERACION
    (30) OPERACION -> OPERACION . operador_igual OPERACION

    parentesis_cierra reduce using rule 20 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_suma   reduce using rule 20 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_resta  reduce using rule 20 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_multiplicacion reduce using rule 20 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_divicion reduce using rule 20 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_resto  reduce using rule 20 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_igualacion reduce using rule 20 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_diferenciacion reduce using rule 20 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_mayor  reduce using rule 20 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_mayor_igual reduce using rule 20 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_menor  reduce using rule 20 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_menor_igual reduce using rule 20 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_AND    reduce using rule 20 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_OR     reduce using rule 20 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_igual  reduce using rule 20 (OPERACION -> OPERACION operador_resto OPERACION .)
    operador_NOT    shift and go to state 68

  ! operador_NOT    [ reduce using rule 20 (OPERACION -> OPERACION operador_resto OPERACION .) ]
  ! operador_suma   [ shift and go to state 55 ]
  ! operador_resta  [ shift and go to state 56 ]
  ! operador_multiplicacion [ shift and go to state 57 ]
  ! operador_divicion [ shift and go to state 58 ]
  ! operador_resto  [ shift and go to state 59 ]
  ! operador_igualacion [ shift and go to state 60 ]
  ! operador_diferenciacion [ shift and go to state 61 ]
  ! operador_mayor  [ shift and go to state 62 ]
  ! operador_mayor_igual [ shift and go to state 63 ]
  ! operador_menor  [ shift and go to state 64 ]
  ! operador_menor_igual [ shift and go to state 65 ]
  ! operador_AND    [ shift and go to state 66 ]
  ! operador_OR     [ shift and go to state 67 ]
  ! operador_igual  [ shift and go to state 69 ]


state 96

    (21) OPERACION -> OPERACION operador_igualacion OPERACION .
    (16) OPERACION -> OPERACION . operador_suma OPERACION
    (17) OPERACION -> OPERACION . operador_resta OPERACION
    (18) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (19) OPERACION -> OPERACION . operador_divicion OPERACION
    (20) OPERACION -> OPERACION . operador_resto OPERACION
    (21) OPERACION -> OPERACION . operador_igualacion OPERACION
    (22) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (23) OPERACION -> OPERACION . operador_mayor OPERACION
    (24) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (25) OPERACION -> OPERACION . operador_menor OPERACION
    (26) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (27) OPERACION -> OPERACION . operador_AND OPERACION
    (28) OPERACION -> OPERACION . operador_OR OPERACION
    (29) OPERACION -> OPERACION . operador_NOT OPERACION
    (30) OPERACION -> OPERACION . operador_igual OPERACION

    parentesis_cierra reduce using rule 21 (OPERACION -> OPERACION operador_igualacion OPERACION .)
    operador_divicion reduce using rule 21 (OPERACION -> OPERACION operador_igualacion OPERACION .)
    operador_igualacion reduce using rule 21 (OPERACION -> OPERACION operador_igualacion OPERACION .)
    operador_diferenciacion reduce using rule 21 (OPERACION -> OPERACION operador_igualacion OPERACION .)
    operador_AND    reduce using rule 21 (OPERACION -> OPERACION operador_igualacion OPERACION .)
    operador_OR     reduce using rule 21 (OPERACION -> OPERACION operador_igualacion OPERACION .)
    operador_igual  reduce using rule 21 (OPERACION -> OPERACION operador_igualacion OPERACION .)
    operador_suma   shift and go to state 55
    operador_resta  shift and go to state 56
    operador_multiplicacion shift and go to state 57
    operador_resto  shift and go to state 59
    operador_mayor  shift and go to state 62
    operador_mayor_igual shift and go to state 63
    operador_menor  shift and go to state 64
    operador_menor_igual shift and go to state 65
    operador_NOT    shift and go to state 68

  ! operador_suma   [ reduce using rule 21 (OPERACION -> OPERACION operador_igualacion OPERACION .) ]
  ! operador_resta  [ reduce using rule 21 (OPERACION -> OPERACION operador_igualacion OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 21 (OPERACION -> OPERACION operador_igualacion OPERACION .) ]
  ! operador_resto  [ reduce using rule 21 (OPERACION -> OPERACION operador_igualacion OPERACION .) ]
  ! operador_mayor  [ reduce using rule 21 (OPERACION -> OPERACION operador_igualacion OPERACION .) ]
  ! operador_mayor_igual [ reduce using rule 21 (OPERACION -> OPERACION operador_igualacion OPERACION .) ]
  ! operador_menor  [ reduce using rule 21 (OPERACION -> OPERACION operador_igualacion OPERACION .) ]
  ! operador_menor_igual [ reduce using rule 21 (OPERACION -> OPERACION operador_igualacion OPERACION .) ]
  ! operador_NOT    [ reduce using rule 21 (OPERACION -> OPERACION operador_igualacion OPERACION .) ]
  ! operador_divicion [ shift and go to state 58 ]
  ! operador_igualacion [ shift and go to state 60 ]
  ! operador_diferenciacion [ shift and go to state 61 ]
  ! operador_AND    [ shift and go to state 66 ]
  ! operador_OR     [ shift and go to state 67 ]
  ! operador_igual  [ shift and go to state 69 ]


state 97

    (22) OPERACION -> OPERACION operador_diferenciacion OPERACION .
    (16) OPERACION -> OPERACION . operador_suma OPERACION
    (17) OPERACION -> OPERACION . operador_resta OPERACION
    (18) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (19) OPERACION -> OPERACION . operador_divicion OPERACION
    (20) OPERACION -> OPERACION . operador_resto OPERACION
    (21) OPERACION -> OPERACION . operador_igualacion OPERACION
    (22) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (23) OPERACION -> OPERACION . operador_mayor OPERACION
    (24) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (25) OPERACION -> OPERACION . operador_menor OPERACION
    (26) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (27) OPERACION -> OPERACION . operador_AND OPERACION
    (28) OPERACION -> OPERACION . operador_OR OPERACION
    (29) OPERACION -> OPERACION . operador_NOT OPERACION
    (30) OPERACION -> OPERACION . operador_igual OPERACION

    parentesis_cierra reduce using rule 22 (OPERACION -> OPERACION operador_diferenciacion OPERACION .)
    operador_divicion reduce using rule 22 (OPERACION -> OPERACION operador_diferenciacion OPERACION .)
    operador_igualacion reduce using rule 22 (OPERACION -> OPERACION operador_diferenciacion OPERACION .)
    operador_diferenciacion reduce using rule 22 (OPERACION -> OPERACION operador_diferenciacion OPERACION .)
    operador_AND    reduce using rule 22 (OPERACION -> OPERACION operador_diferenciacion OPERACION .)
    operador_OR     reduce using rule 22 (OPERACION -> OPERACION operador_diferenciacion OPERACION .)
    operador_igual  reduce using rule 22 (OPERACION -> OPERACION operador_diferenciacion OPERACION .)
    operador_suma   shift and go to state 55
    operador_resta  shift and go to state 56
    operador_multiplicacion shift and go to state 57
    operador_resto  shift and go to state 59
    operador_mayor  shift and go to state 62
    operador_mayor_igual shift and go to state 63
    operador_menor  shift and go to state 64
    operador_menor_igual shift and go to state 65
    operador_NOT    shift and go to state 68

  ! operador_suma   [ reduce using rule 22 (OPERACION -> OPERACION operador_diferenciacion OPERACION .) ]
  ! operador_resta  [ reduce using rule 22 (OPERACION -> OPERACION operador_diferenciacion OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 22 (OPERACION -> OPERACION operador_diferenciacion OPERACION .) ]
  ! operador_resto  [ reduce using rule 22 (OPERACION -> OPERACION operador_diferenciacion OPERACION .) ]
  ! operador_mayor  [ reduce using rule 22 (OPERACION -> OPERACION operador_diferenciacion OPERACION .) ]
  ! operador_mayor_igual [ reduce using rule 22 (OPERACION -> OPERACION operador_diferenciacion OPERACION .) ]
  ! operador_menor  [ reduce using rule 22 (OPERACION -> OPERACION operador_diferenciacion OPERACION .) ]
  ! operador_menor_igual [ reduce using rule 22 (OPERACION -> OPERACION operador_diferenciacion OPERACION .) ]
  ! operador_NOT    [ reduce using rule 22 (OPERACION -> OPERACION operador_diferenciacion OPERACION .) ]
  ! operador_divicion [ shift and go to state 58 ]
  ! operador_igualacion [ shift and go to state 60 ]
  ! operador_diferenciacion [ shift and go to state 61 ]
  ! operador_AND    [ shift and go to state 66 ]
  ! operador_OR     [ shift and go to state 67 ]
  ! operador_igual  [ shift and go to state 69 ]


state 98

    (23) OPERACION -> OPERACION operador_mayor OPERACION .
    (16) OPERACION -> OPERACION . operador_suma OPERACION
    (17) OPERACION -> OPERACION . operador_resta OPERACION
    (18) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (19) OPERACION -> OPERACION . operador_divicion OPERACION
    (20) OPERACION -> OPERACION . operador_resto OPERACION
    (21) OPERACION -> OPERACION . operador_igualacion OPERACION
    (22) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (23) OPERACION -> OPERACION . operador_mayor OPERACION
    (24) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (25) OPERACION -> OPERACION . operador_menor OPERACION
    (26) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (27) OPERACION -> OPERACION . operador_AND OPERACION
    (28) OPERACION -> OPERACION . operador_OR OPERACION
    (29) OPERACION -> OPERACION . operador_NOT OPERACION
    (30) OPERACION -> OPERACION . operador_igual OPERACION

    parentesis_cierra reduce using rule 23 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_divicion reduce using rule 23 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_igualacion reduce using rule 23 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_diferenciacion reduce using rule 23 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_mayor  reduce using rule 23 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_mayor_igual reduce using rule 23 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_menor  reduce using rule 23 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_menor_igual reduce using rule 23 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_AND    reduce using rule 23 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_OR     reduce using rule 23 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_igual  reduce using rule 23 (OPERACION -> OPERACION operador_mayor OPERACION .)
    operador_suma   shift and go to state 55
    operador_resta  shift and go to state 56
    operador_multiplicacion shift and go to state 57
    operador_resto  shift and go to state 59
    operador_NOT    shift and go to state 68

  ! operador_suma   [ reduce using rule 23 (OPERACION -> OPERACION operador_mayor OPERACION .) ]
  ! operador_resta  [ reduce using rule 23 (OPERACION -> OPERACION operador_mayor OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 23 (OPERACION -> OPERACION operador_mayor OPERACION .) ]
  ! operador_resto  [ reduce using rule 23 (OPERACION -> OPERACION operador_mayor OPERACION .) ]
  ! operador_NOT    [ reduce using rule 23 (OPERACION -> OPERACION operador_mayor OPERACION .) ]
  ! operador_divicion [ shift and go to state 58 ]
  ! operador_igualacion [ shift and go to state 60 ]
  ! operador_diferenciacion [ shift and go to state 61 ]
  ! operador_mayor  [ shift and go to state 62 ]
  ! operador_mayor_igual [ shift and go to state 63 ]
  ! operador_menor  [ shift and go to state 64 ]
  ! operador_menor_igual [ shift and go to state 65 ]
  ! operador_AND    [ shift and go to state 66 ]
  ! operador_OR     [ shift and go to state 67 ]
  ! operador_igual  [ shift and go to state 69 ]


state 99

    (24) OPERACION -> OPERACION operador_mayor_igual OPERACION .
    (16) OPERACION -> OPERACION . operador_suma OPERACION
    (17) OPERACION -> OPERACION . operador_resta OPERACION
    (18) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (19) OPERACION -> OPERACION . operador_divicion OPERACION
    (20) OPERACION -> OPERACION . operador_resto OPERACION
    (21) OPERACION -> OPERACION . operador_igualacion OPERACION
    (22) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (23) OPERACION -> OPERACION . operador_mayor OPERACION
    (24) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (25) OPERACION -> OPERACION . operador_menor OPERACION
    (26) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (27) OPERACION -> OPERACION . operador_AND OPERACION
    (28) OPERACION -> OPERACION . operador_OR OPERACION
    (29) OPERACION -> OPERACION . operador_NOT OPERACION
    (30) OPERACION -> OPERACION . operador_igual OPERACION

    parentesis_cierra reduce using rule 24 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_divicion reduce using rule 24 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_igualacion reduce using rule 24 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_diferenciacion reduce using rule 24 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_mayor  reduce using rule 24 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_mayor_igual reduce using rule 24 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_menor  reduce using rule 24 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_menor_igual reduce using rule 24 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_AND    reduce using rule 24 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_OR     reduce using rule 24 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_igual  reduce using rule 24 (OPERACION -> OPERACION operador_mayor_igual OPERACION .)
    operador_suma   shift and go to state 55
    operador_resta  shift and go to state 56
    operador_multiplicacion shift and go to state 57
    operador_resto  shift and go to state 59
    operador_NOT    shift and go to state 68

  ! operador_suma   [ reduce using rule 24 (OPERACION -> OPERACION operador_mayor_igual OPERACION .) ]
  ! operador_resta  [ reduce using rule 24 (OPERACION -> OPERACION operador_mayor_igual OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 24 (OPERACION -> OPERACION operador_mayor_igual OPERACION .) ]
  ! operador_resto  [ reduce using rule 24 (OPERACION -> OPERACION operador_mayor_igual OPERACION .) ]
  ! operador_NOT    [ reduce using rule 24 (OPERACION -> OPERACION operador_mayor_igual OPERACION .) ]
  ! operador_divicion [ shift and go to state 58 ]
  ! operador_igualacion [ shift and go to state 60 ]
  ! operador_diferenciacion [ shift and go to state 61 ]
  ! operador_mayor  [ shift and go to state 62 ]
  ! operador_mayor_igual [ shift and go to state 63 ]
  ! operador_menor  [ shift and go to state 64 ]
  ! operador_menor_igual [ shift and go to state 65 ]
  ! operador_AND    [ shift and go to state 66 ]
  ! operador_OR     [ shift and go to state 67 ]
  ! operador_igual  [ shift and go to state 69 ]


state 100

    (25) OPERACION -> OPERACION operador_menor OPERACION .
    (16) OPERACION -> OPERACION . operador_suma OPERACION
    (17) OPERACION -> OPERACION . operador_resta OPERACION
    (18) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (19) OPERACION -> OPERACION . operador_divicion OPERACION
    (20) OPERACION -> OPERACION . operador_resto OPERACION
    (21) OPERACION -> OPERACION . operador_igualacion OPERACION
    (22) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (23) OPERACION -> OPERACION . operador_mayor OPERACION
    (24) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (25) OPERACION -> OPERACION . operador_menor OPERACION
    (26) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (27) OPERACION -> OPERACION . operador_AND OPERACION
    (28) OPERACION -> OPERACION . operador_OR OPERACION
    (29) OPERACION -> OPERACION . operador_NOT OPERACION
    (30) OPERACION -> OPERACION . operador_igual OPERACION

    parentesis_cierra reduce using rule 25 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_divicion reduce using rule 25 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_igualacion reduce using rule 25 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_diferenciacion reduce using rule 25 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_mayor  reduce using rule 25 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_mayor_igual reduce using rule 25 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_menor  reduce using rule 25 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_menor_igual reduce using rule 25 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_AND    reduce using rule 25 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_OR     reduce using rule 25 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_igual  reduce using rule 25 (OPERACION -> OPERACION operador_menor OPERACION .)
    operador_suma   shift and go to state 55
    operador_resta  shift and go to state 56
    operador_multiplicacion shift and go to state 57
    operador_resto  shift and go to state 59
    operador_NOT    shift and go to state 68

  ! operador_suma   [ reduce using rule 25 (OPERACION -> OPERACION operador_menor OPERACION .) ]
  ! operador_resta  [ reduce using rule 25 (OPERACION -> OPERACION operador_menor OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 25 (OPERACION -> OPERACION operador_menor OPERACION .) ]
  ! operador_resto  [ reduce using rule 25 (OPERACION -> OPERACION operador_menor OPERACION .) ]
  ! operador_NOT    [ reduce using rule 25 (OPERACION -> OPERACION operador_menor OPERACION .) ]
  ! operador_divicion [ shift and go to state 58 ]
  ! operador_igualacion [ shift and go to state 60 ]
  ! operador_diferenciacion [ shift and go to state 61 ]
  ! operador_mayor  [ shift and go to state 62 ]
  ! operador_mayor_igual [ shift and go to state 63 ]
  ! operador_menor  [ shift and go to state 64 ]
  ! operador_menor_igual [ shift and go to state 65 ]
  ! operador_AND    [ shift and go to state 66 ]
  ! operador_OR     [ shift and go to state 67 ]
  ! operador_igual  [ shift and go to state 69 ]


state 101

    (26) OPERACION -> OPERACION operador_menor_igual OPERACION .
    (16) OPERACION -> OPERACION . operador_suma OPERACION
    (17) OPERACION -> OPERACION . operador_resta OPERACION
    (18) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (19) OPERACION -> OPERACION . operador_divicion OPERACION
    (20) OPERACION -> OPERACION . operador_resto OPERACION
    (21) OPERACION -> OPERACION . operador_igualacion OPERACION
    (22) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (23) OPERACION -> OPERACION . operador_mayor OPERACION
    (24) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (25) OPERACION -> OPERACION . operador_menor OPERACION
    (26) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (27) OPERACION -> OPERACION . operador_AND OPERACION
    (28) OPERACION -> OPERACION . operador_OR OPERACION
    (29) OPERACION -> OPERACION . operador_NOT OPERACION
    (30) OPERACION -> OPERACION . operador_igual OPERACION

    parentesis_cierra reduce using rule 26 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_divicion reduce using rule 26 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_igualacion reduce using rule 26 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_diferenciacion reduce using rule 26 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_mayor  reduce using rule 26 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_mayor_igual reduce using rule 26 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_menor  reduce using rule 26 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_menor_igual reduce using rule 26 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_AND    reduce using rule 26 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_OR     reduce using rule 26 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_igual  reduce using rule 26 (OPERACION -> OPERACION operador_menor_igual OPERACION .)
    operador_suma   shift and go to state 55
    operador_resta  shift and go to state 56
    operador_multiplicacion shift and go to state 57
    operador_resto  shift and go to state 59
    operador_NOT    shift and go to state 68

  ! operador_suma   [ reduce using rule 26 (OPERACION -> OPERACION operador_menor_igual OPERACION .) ]
  ! operador_resta  [ reduce using rule 26 (OPERACION -> OPERACION operador_menor_igual OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 26 (OPERACION -> OPERACION operador_menor_igual OPERACION .) ]
  ! operador_resto  [ reduce using rule 26 (OPERACION -> OPERACION operador_menor_igual OPERACION .) ]
  ! operador_NOT    [ reduce using rule 26 (OPERACION -> OPERACION operador_menor_igual OPERACION .) ]
  ! operador_divicion [ shift and go to state 58 ]
  ! operador_igualacion [ shift and go to state 60 ]
  ! operador_diferenciacion [ shift and go to state 61 ]
  ! operador_mayor  [ shift and go to state 62 ]
  ! operador_mayor_igual [ shift and go to state 63 ]
  ! operador_menor  [ shift and go to state 64 ]
  ! operador_menor_igual [ shift and go to state 65 ]
  ! operador_AND    [ shift and go to state 66 ]
  ! operador_OR     [ shift and go to state 67 ]
  ! operador_igual  [ shift and go to state 69 ]


state 102

    (27) OPERACION -> OPERACION operador_AND OPERACION .
    (16) OPERACION -> OPERACION . operador_suma OPERACION
    (17) OPERACION -> OPERACION . operador_resta OPERACION
    (18) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (19) OPERACION -> OPERACION . operador_divicion OPERACION
    (20) OPERACION -> OPERACION . operador_resto OPERACION
    (21) OPERACION -> OPERACION . operador_igualacion OPERACION
    (22) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (23) OPERACION -> OPERACION . operador_mayor OPERACION
    (24) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (25) OPERACION -> OPERACION . operador_menor OPERACION
    (26) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (27) OPERACION -> OPERACION . operador_AND OPERACION
    (28) OPERACION -> OPERACION . operador_OR OPERACION
    (29) OPERACION -> OPERACION . operador_NOT OPERACION
    (30) OPERACION -> OPERACION . operador_igual OPERACION

    parentesis_cierra reduce using rule 27 (OPERACION -> OPERACION operador_AND OPERACION .)
    operador_divicion reduce using rule 27 (OPERACION -> OPERACION operador_AND OPERACION .)
    operador_AND    reduce using rule 27 (OPERACION -> OPERACION operador_AND OPERACION .)
    operador_OR     reduce using rule 27 (OPERACION -> OPERACION operador_AND OPERACION .)
    operador_igual  reduce using rule 27 (OPERACION -> OPERACION operador_AND OPERACION .)
    operador_suma   shift and go to state 55
    operador_resta  shift and go to state 56
    operador_multiplicacion shift and go to state 57
    operador_resto  shift and go to state 59
    operador_igualacion shift and go to state 60
    operador_diferenciacion shift and go to state 61
    operador_mayor  shift and go to state 62
    operador_mayor_igual shift and go to state 63
    operador_menor  shift and go to state 64
    operador_menor_igual shift and go to state 65
    operador_NOT    shift and go to state 68

  ! operador_suma   [ reduce using rule 27 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_resta  [ reduce using rule 27 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 27 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_resto  [ reduce using rule 27 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_igualacion [ reduce using rule 27 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_diferenciacion [ reduce using rule 27 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_mayor  [ reduce using rule 27 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_mayor_igual [ reduce using rule 27 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_menor  [ reduce using rule 27 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_menor_igual [ reduce using rule 27 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_NOT    [ reduce using rule 27 (OPERACION -> OPERACION operador_AND OPERACION .) ]
  ! operador_divicion [ shift and go to state 58 ]
  ! operador_AND    [ shift and go to state 66 ]
  ! operador_OR     [ shift and go to state 67 ]
  ! operador_igual  [ shift and go to state 69 ]


state 103

    (28) OPERACION -> OPERACION operador_OR OPERACION .
    (16) OPERACION -> OPERACION . operador_suma OPERACION
    (17) OPERACION -> OPERACION . operador_resta OPERACION
    (18) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (19) OPERACION -> OPERACION . operador_divicion OPERACION
    (20) OPERACION -> OPERACION . operador_resto OPERACION
    (21) OPERACION -> OPERACION . operador_igualacion OPERACION
    (22) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (23) OPERACION -> OPERACION . operador_mayor OPERACION
    (24) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (25) OPERACION -> OPERACION . operador_menor OPERACION
    (26) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (27) OPERACION -> OPERACION . operador_AND OPERACION
    (28) OPERACION -> OPERACION . operador_OR OPERACION
    (29) OPERACION -> OPERACION . operador_NOT OPERACION
    (30) OPERACION -> OPERACION . operador_igual OPERACION

    parentesis_cierra reduce using rule 28 (OPERACION -> OPERACION operador_OR OPERACION .)
    operador_divicion reduce using rule 28 (OPERACION -> OPERACION operador_OR OPERACION .)
    operador_OR     reduce using rule 28 (OPERACION -> OPERACION operador_OR OPERACION .)
    operador_igual  reduce using rule 28 (OPERACION -> OPERACION operador_OR OPERACION .)
    operador_suma   shift and go to state 55
    operador_resta  shift and go to state 56
    operador_multiplicacion shift and go to state 57
    operador_resto  shift and go to state 59
    operador_igualacion shift and go to state 60
    operador_diferenciacion shift and go to state 61
    operador_mayor  shift and go to state 62
    operador_mayor_igual shift and go to state 63
    operador_menor  shift and go to state 64
    operador_menor_igual shift and go to state 65
    operador_AND    shift and go to state 66
    operador_NOT    shift and go to state 68

  ! operador_suma   [ reduce using rule 28 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_resta  [ reduce using rule 28 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 28 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_resto  [ reduce using rule 28 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_igualacion [ reduce using rule 28 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_diferenciacion [ reduce using rule 28 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_mayor  [ reduce using rule 28 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_mayor_igual [ reduce using rule 28 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_menor  [ reduce using rule 28 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_menor_igual [ reduce using rule 28 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_AND    [ reduce using rule 28 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_NOT    [ reduce using rule 28 (OPERACION -> OPERACION operador_OR OPERACION .) ]
  ! operador_divicion [ shift and go to state 58 ]
  ! operador_OR     [ shift and go to state 67 ]
  ! operador_igual  [ shift and go to state 69 ]


state 104

    (29) OPERACION -> OPERACION operador_NOT OPERACION .
    (16) OPERACION -> OPERACION . operador_suma OPERACION
    (17) OPERACION -> OPERACION . operador_resta OPERACION
    (18) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (19) OPERACION -> OPERACION . operador_divicion OPERACION
    (20) OPERACION -> OPERACION . operador_resto OPERACION
    (21) OPERACION -> OPERACION . operador_igualacion OPERACION
    (22) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (23) OPERACION -> OPERACION . operador_mayor OPERACION
    (24) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (25) OPERACION -> OPERACION . operador_menor OPERACION
    (26) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (27) OPERACION -> OPERACION . operador_AND OPERACION
    (28) OPERACION -> OPERACION . operador_OR OPERACION
    (29) OPERACION -> OPERACION . operador_NOT OPERACION
    (30) OPERACION -> OPERACION . operador_igual OPERACION

    parentesis_cierra reduce using rule 29 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_suma   reduce using rule 29 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_resta  reduce using rule 29 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_multiplicacion reduce using rule 29 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_divicion reduce using rule 29 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_resto  reduce using rule 29 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_igualacion reduce using rule 29 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_diferenciacion reduce using rule 29 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_mayor  reduce using rule 29 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_mayor_igual reduce using rule 29 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_menor  reduce using rule 29 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_menor_igual reduce using rule 29 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_AND    reduce using rule 29 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_OR     reduce using rule 29 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_igual  reduce using rule 29 (OPERACION -> OPERACION operador_NOT OPERACION .)
    operador_NOT    shift and go to state 68

  ! operador_NOT    [ reduce using rule 29 (OPERACION -> OPERACION operador_NOT OPERACION .) ]
  ! operador_suma   [ shift and go to state 55 ]
  ! operador_resta  [ shift and go to state 56 ]
  ! operador_multiplicacion [ shift and go to state 57 ]
  ! operador_divicion [ shift and go to state 58 ]
  ! operador_resto  [ shift and go to state 59 ]
  ! operador_igualacion [ shift and go to state 60 ]
  ! operador_diferenciacion [ shift and go to state 61 ]
  ! operador_mayor  [ shift and go to state 62 ]
  ! operador_mayor_igual [ shift and go to state 63 ]
  ! operador_menor  [ shift and go to state 64 ]
  ! operador_menor_igual [ shift and go to state 65 ]
  ! operador_AND    [ shift and go to state 66 ]
  ! operador_OR     [ shift and go to state 67 ]
  ! operador_igual  [ shift and go to state 69 ]


state 105

    (30) OPERACION -> OPERACION operador_igual OPERACION .
    (16) OPERACION -> OPERACION . operador_suma OPERACION
    (17) OPERACION -> OPERACION . operador_resta OPERACION
    (18) OPERACION -> OPERACION . operador_multiplicacion OPERACION
    (19) OPERACION -> OPERACION . operador_divicion OPERACION
    (20) OPERACION -> OPERACION . operador_resto OPERACION
    (21) OPERACION -> OPERACION . operador_igualacion OPERACION
    (22) OPERACION -> OPERACION . operador_diferenciacion OPERACION
    (23) OPERACION -> OPERACION . operador_mayor OPERACION
    (24) OPERACION -> OPERACION . operador_mayor_igual OPERACION
    (25) OPERACION -> OPERACION . operador_menor OPERACION
    (26) OPERACION -> OPERACION . operador_menor_igual OPERACION
    (27) OPERACION -> OPERACION . operador_AND OPERACION
    (28) OPERACION -> OPERACION . operador_OR OPERACION
    (29) OPERACION -> OPERACION . operador_NOT OPERACION
    (30) OPERACION -> OPERACION . operador_igual OPERACION

  ! shift/reduce conflict for operador_suma resolved as shift
  ! shift/reduce conflict for operador_resta resolved as shift
  ! shift/reduce conflict for operador_multiplicacion resolved as shift
  ! shift/reduce conflict for operador_divicion resolved as shift
  ! shift/reduce conflict for operador_resto resolved as shift
  ! shift/reduce conflict for operador_igualacion resolved as shift
  ! shift/reduce conflict for operador_diferenciacion resolved as shift
  ! shift/reduce conflict for operador_mayor resolved as shift
  ! shift/reduce conflict for operador_mayor_igual resolved as shift
  ! shift/reduce conflict for operador_menor resolved as shift
  ! shift/reduce conflict for operador_menor_igual resolved as shift
  ! shift/reduce conflict for operador_AND resolved as shift
  ! shift/reduce conflict for operador_OR resolved as shift
  ! shift/reduce conflict for operador_NOT resolved as shift
  ! shift/reduce conflict for operador_igual resolved as shift
    parentesis_cierra reduce using rule 30 (OPERACION -> OPERACION operador_igual OPERACION .)
    operador_suma   shift and go to state 55
    operador_resta  shift and go to state 56
    operador_multiplicacion shift and go to state 57
    operador_divicion shift and go to state 58
    operador_resto  shift and go to state 59
    operador_igualacion shift and go to state 60
    operador_diferenciacion shift and go to state 61
    operador_mayor  shift and go to state 62
    operador_mayor_igual shift and go to state 63
    operador_menor  shift and go to state 64
    operador_menor_igual shift and go to state 65
    operador_AND    shift and go to state 66
    operador_OR     shift and go to state 67
    operador_NOT    shift and go to state 68
    operador_igual  shift and go to state 69

  ! operador_suma   [ reduce using rule 30 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_resta  [ reduce using rule 30 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_multiplicacion [ reduce using rule 30 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_divicion [ reduce using rule 30 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_resto  [ reduce using rule 30 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_igualacion [ reduce using rule 30 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_diferenciacion [ reduce using rule 30 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_mayor  [ reduce using rule 30 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_mayor_igual [ reduce using rule 30 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_menor  [ reduce using rule 30 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_menor_igual [ reduce using rule 30 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_AND    [ reduce using rule 30 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_OR     [ reduce using rule 30 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_NOT    [ reduce using rule 30 (OPERACION -> OPERACION operador_igual OPERACION .) ]
  ! operador_igual  [ reduce using rule 30 (OPERACION -> OPERACION operador_igual OPERACION .) ]


state 106

    (10) PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .

    reservada_if    reduce using rule 10 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    reservada_do    reduce using rule 10 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    reservada_while reduce using rule 10 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    reservada_void  reduce using rule 10 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    tipo_int        reduce using rule 10 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    tipo_double     reduce using rule 10 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    tipo_string     reduce using rule 10 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    tipo_char       reduce using rule 10 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    tipo_boolean    reduce using rule 10 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    $end            reduce using rule 10 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)
    llave_cierra    reduce using rule 10 (PRODDO_WHILE -> reservada_do INSTRUCCIONES_FACTORIZADO reservada_while OPERACION_FACTORIZADO punto_coma .)


state 107

    (43) DECLARACION -> TIPO_DATO id operador_igual . DATO punto_coma
    (50) DATO -> . numero
    (51) DATO -> . dato_double
    (52) DATO -> . dato_string
    (53) DATO -> . dato_char
    (54) DATO -> . dato_boolean_true
    (55) DATO -> . dato_boolean_false

    numero          shift and go to state 77
    dato_double     shift and go to state 78
    dato_string     shift and go to state 79
    dato_char       shift and go to state 80
    dato_boolean_true shift and go to state 81
    dato_boolean_false shift and go to state 82

    DATO                           shift and go to state 116

state 108

    (44) ASINGACION -> id operador_igual DATO . punto_coma

    punto_coma      shift and go to state 117


state 109

    (60) LLAMADA -> id parentesis_abre ARGUMENTOS . parentesis_cierra
    (61) ARGUMENTOS -> ARGUMENTOS . coma ARGUMENTO

    parentesis_cierra shift and go to state 118
    coma            shift and go to state 119


state 110

    (62) ARGUMENTOS -> ARGUMENTO .

    parentesis_cierra reduce using rule 62 (ARGUMENTOS -> ARGUMENTO .)
    coma            reduce using rule 62 (ARGUMENTOS -> ARGUMENTO .)


state 111

    (64) ARGUMENTO -> DATO .

    parentesis_cierra reduce using rule 64 (ARGUMENTO -> DATO .)
    coma            reduce using rule 64 (ARGUMENTO -> DATO .)


state 112

    (66) RETURN -> reservada_return DATO punto_coma .

    llave_cierra    reduce using rule 66 (RETURN -> reservada_return DATO punto_coma .)


state 113

    (71) PARAMETROS_FACTORIZADO -> parentesis_abre PARAMETROS parentesis_cierra .

    llave_abre      reduce using rule 71 (PARAMETROS_FACTORIZADO -> parentesis_abre PARAMETROS parentesis_cierra .)


state 114

    (57) PARAMETROS -> PARAMETROS coma . PARAMETRO
    (56) PARAMETRO -> . TIPO_DATO id
    (45) TIPO_DATO -> . tipo_int
    (46) TIPO_DATO -> . tipo_double
    (47) TIPO_DATO -> . tipo_string
    (48) TIPO_DATO -> . tipo_char
    (49) TIPO_DATO -> . tipo_boolean

    tipo_int        shift and go to state 15
    tipo_double     shift and go to state 16
    tipo_string     shift and go to state 17
    tipo_char       shift and go to state 18
    tipo_boolean    shift and go to state 19

    PARAMETRO                      shift and go to state 120
    TIPO_DATO                      shift and go to state 88

state 115

    (56) PARAMETRO -> TIPO_DATO id .

    parentesis_cierra reduce using rule 56 (PARAMETRO -> TIPO_DATO id .)
    coma            reduce using rule 56 (PARAMETRO -> TIPO_DATO id .)


state 116

    (43) DECLARACION -> TIPO_DATO id operador_igual DATO . punto_coma

    punto_coma      shift and go to state 121


state 117

    (44) ASINGACION -> id operador_igual DATO punto_coma .

    llave_cierra    reduce using rule 44 (ASINGACION -> id operador_igual DATO punto_coma .)


state 118

    (60) LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra .

    llave_cierra    reduce using rule 60 (LLAMADA -> id parentesis_abre ARGUMENTOS parentesis_cierra .)


state 119

    (61) ARGUMENTOS -> ARGUMENTOS coma . ARGUMENTO
    (64) ARGUMENTO -> . DATO
    (50) DATO -> . numero
    (51) DATO -> . dato_double
    (52) DATO -> . dato_string
    (53) DATO -> . dato_char
    (54) DATO -> . dato_boolean_true
    (55) DATO -> . dato_boolean_false

    numero          shift and go to state 77
    dato_double     shift and go to state 78
    dato_string     shift and go to state 79
    dato_char       shift and go to state 80
    dato_boolean_true shift and go to state 81
    dato_boolean_false shift and go to state 82

    ARGUMENTO                      shift and go to state 122
    DATO                           shift and go to state 111

state 120

    (57) PARAMETROS -> PARAMETROS coma PARAMETRO .

    parentesis_cierra reduce using rule 57 (PARAMETROS -> PARAMETROS coma PARAMETRO .)
    coma            reduce using rule 57 (PARAMETROS -> PARAMETROS coma PARAMETRO .)


state 121

    (43) DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma .

    llave_cierra    reduce using rule 43 (DECLARACION -> TIPO_DATO id operador_igual DATO punto_coma .)


state 122

    (61) ARGUMENTOS -> ARGUMENTOS coma ARGUMENTO .

    parentesis_cierra reduce using rule 61 (ARGUMENTOS -> ARGUMENTOS coma ARGUMENTO .)
    coma            reduce using rule 61 (ARGUMENTOS -> ARGUMENTOS coma ARGUMENTO .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for operador_suma in state 94 resolved as shift
WARNING: shift/reduce conflict for operador_resta in state 94 resolved as shift
WARNING: shift/reduce conflict for operador_multiplicacion in state 94 resolved as shift
WARNING: shift/reduce conflict for operador_divicion in state 94 resolved as shift
WARNING: shift/reduce conflict for operador_resto in state 94 resolved as shift
WARNING: shift/reduce conflict for operador_igualacion in state 94 resolved as shift
WARNING: shift/reduce conflict for operador_diferenciacion in state 94 resolved as shift
WARNING: shift/reduce conflict for operador_mayor in state 94 resolved as shift
WARNING: shift/reduce conflict for operador_mayor_igual in state 94 resolved as shift
WARNING: shift/reduce conflict for operador_menor in state 94 resolved as shift
WARNING: shift/reduce conflict for operador_menor_igual in state 94 resolved as shift
WARNING: shift/reduce conflict for operador_AND in state 94 resolved as shift
WARNING: shift/reduce conflict for operador_OR in state 94 resolved as shift
WARNING: shift/reduce conflict for operador_NOT in state 94 resolved as shift
WARNING: shift/reduce conflict for operador_igual in state 94 resolved as shift
WARNING: shift/reduce conflict for operador_suma in state 105 resolved as shift
WARNING: shift/reduce conflict for operador_resta in state 105 resolved as shift
WARNING: shift/reduce conflict for operador_multiplicacion in state 105 resolved as shift
WARNING: shift/reduce conflict for operador_divicion in state 105 resolved as shift
WARNING: shift/reduce conflict for operador_resto in state 105 resolved as shift
WARNING: shift/reduce conflict for operador_igualacion in state 105 resolved as shift
WARNING: shift/reduce conflict for operador_diferenciacion in state 105 resolved as shift
WARNING: shift/reduce conflict for operador_mayor in state 105 resolved as shift
WARNING: shift/reduce conflict for operador_mayor_igual in state 105 resolved as shift
WARNING: shift/reduce conflict for operador_menor in state 105 resolved as shift
WARNING: shift/reduce conflict for operador_menor_igual in state 105 resolved as shift
WARNING: shift/reduce conflict for operador_AND in state 105 resolved as shift
WARNING: shift/reduce conflict for operador_OR in state 105 resolved as shift
WARNING: shift/reduce conflict for operador_NOT in state 105 resolved as shift
WARNING: shift/reduce conflict for operador_igual in state 105 resolved as shift
